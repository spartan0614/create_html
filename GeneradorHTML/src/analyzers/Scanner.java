
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analyzers;

import java.io.FileReader;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Scanner extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Scanner() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Scanner(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Scanner(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\202\000\002\002\004\000\002\002\003\000\002\003" +
    "\013\000\002\004\021\000\002\005\013\000\002\005\012" +
    "\000\002\006\005\000\002\006\007\000\002\007\004\000" +
    "\002\007\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\006\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\011\012\000\002\012\013\000" +
    "\002\012\012\000\002\021\004\000\002\021\003\000\002" +
    "\060\003\000\002\060\006\000\002\013\005\000\002\014" +
    "\012\000\002\015\012\000\002\016\012\000\002\017\004" +
    "\000\002\017\003\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\022\012\000\002\023\004\000\002" +
    "\023\003\000\002\024\005\000\002\024\005\000\002\025" +
    "\013\000\002\025\012\000\002\026\005\000\002\026\005" +
    "\000\002\027\004\000\002\027\003\000\002\030\012\000" +
    "\002\031\004\000\002\031\003\000\002\032\012\000\002" +
    "\032\012\000\002\033\005\000\002\034\004\000\002\034" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\007\000\002\035\007\000" +
    "\002\035\011\000\002\036\007\000\002\036\012\000\002" +
    "\037\005\000\002\040\005\000\002\040\003\000\002\041" +
    "\003\000\002\041\004\000\002\057\004\000\002\057\003" +
    "\000\002\061\003\000\002\061\003\000\002\061\003\000" +
    "\002\042\011\000\002\043\004\000\002\043\003\000\002" +
    "\044\006\000\002\045\011\000\002\046\010\000\002\046" +
    "\006\000\002\046\006\000\002\046\006\000\002\046\012" +
    "\000\002\046\006\000\002\046\010\000\002\047\005\000" +
    "\002\047\003\000\002\050\005\000\002\051\005\000\002" +
    "\051\003\000\002\052\006\000\002\052\006\000\002\052" +
    "\006\000\002\052\006\000\002\052\006\000\002\052\006" +
    "\000\002\052\006\000\002\052\006\000\002\053\005\000" +
    "\002\053\005\000\002\053\005\000\002\053\005\000\002" +
    "\053\005\000\002\053\005\000\002\054\003\000\002\054" +
    "\003\000\002\054\004\000\002\055\005\000\002\055\005" +
    "\000\002\055\005\000\002\055\004\000\002\055\005\000" +
    "\002\055\005\000\002\055\005\000\002\055\005\000\002" +
    "\055\005\000\002\055\005\000\002\055\005\000\002\055" +
    "\005\000\002\055\005\000\002\055\005\000\002\055\004" +
    "\000\002\055\005\000\002\055\003\000\002\056\003\000" +
    "\002\056\003\000\002\056\003\000\002\056\003\000\002" +
    "\056\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0184\000\004\004\004\001\002\000\004\012\010\001" +
    "\002\000\004\002\007\001\002\000\004\002\000\001\002" +
    "\000\004\002\001\001\002\000\004\006\011\001\002\000" +
    "\004\004\012\001\002\000\004\013\u0179\001\002\000\004" +
    "\004\014\001\002\000\004\015\022\001\002\000\004\004" +
    "\016\001\002\000\004\007\017\001\002\000\004\012\020" +
    "\001\002\000\004\006\021\001\002\000\004\002\uffff\001" +
    "\002\000\006\006\025\032\023\001\002\000\004\047\u0174" +
    "\001\002\000\004\006\u016e\001\002\000\010\004\032\005" +
    "\031\107\041\001\002\000\010\004\ufff0\005\ufff0\107\ufff0" +
    "\001\002\000\010\004\uffee\005\uffee\107\uffee\001\002\000" +
    "\010\004\u016a\005\031\107\041\001\002\000\010\004\ufff5" +
    "\005\ufff5\107\ufff5\001\002\000\022\007\361\016\357\021" +
    "\362\025\360\026\355\027\353\030\354\031\356\001\002" +
    "\000\010\004\ufff7\005\ufff7\107\ufff7\001\002\000\010\004" +
    "\ufff2\005\ufff2\107\ufff2\001\002\000\010\004\ufff3\005\ufff3" +
    "\107\ufff3\001\002\000\010\004\uffef\005\uffef\107\uffef\001" +
    "\002\000\010\004\ufff1\005\ufff1\107\ufff1\001\002\000\010" +
    "\004\ufff8\005\ufff8\107\ufff8\001\002\000\014\046\044\072" +
    "\043\100\046\101\047\103\051\001\002\000\010\004\ufff6" +
    "\005\ufff6\107\ufff6\001\002\000\004\076\222\001\002\000" +
    "\004\076\167\001\002\000\016\046\044\072\043\100\046" +
    "\101\047\103\051\121\165\001\002\000\006\046\156\077" +
    "\155\001\002\000\004\070\141\001\002\000\016\046\uffca" +
    "\072\uffca\100\uffca\101\uffca\103\uffca\121\uffca\001\002\000" +
    "\004\070\056\001\002\000\016\046\uffc8\072\uffc8\100\uffc8" +
    "\101\uffc8\103\uffc8\121\uffc8\001\002\000\016\046\uffc9\072" +
    "\uffc9\100\uffc9\101\uffc9\103\uffc9\121\uffc9\001\002\000\016" +
    "\046\uffcb\072\uffcb\100\uffcb\101\uffcb\103\uffcb\121\uffcb\001" +
    "\002\000\016\046\uffc7\072\uffc7\100\uffc7\101\uffc7\103\uffc7" +
    "\121\uffc7\001\002\000\022\043\062\044\064\046\060\051" +
    "\067\054\065\065\061\070\066\077\063\001\002\000\042" +
    "\007\uff85\045\uff85\050\uff85\051\uff85\052\uff85\053\uff85\055" +
    "\uff85\056\uff85\057\uff85\060\uff85\061\uff85\062\uff85\063\uff85" +
    "\064\uff85\071\uff85\075\uff85\001\002\000\004\076\140\001" +
    "\002\000\022\043\062\044\064\046\060\051\067\054\065" +
    "\065\061\070\066\077\063\001\002\000\044\007\uff82\045" +
    "\uff82\050\uff82\051\uff82\052\uff82\053\uff82\055\uff82\056\uff82" +
    "\057\uff82\060\uff82\061\uff82\062\uff82\063\uff82\064\uff82\071" +
    "\uff82\074\uff82\075\uff82\001\002\000\044\007\uff84\045\uff84" +
    "\050\uff84\051\uff84\052\uff84\053\uff84\055\uff84\056\uff84\057" +
    "\uff84\060\uff84\061\uff84\062\uff84\063\uff84\064\uff84\071\uff84" +
    "\074\uff84\075\uff84\001\002\000\044\007\uff81\045\uff81\050" +
    "\uff81\051\uff81\052\uff81\053\uff81\055\uff81\056\uff81\057\uff81" +
    "\060\uff81\061\uff81\062\uff81\063\uff81\064\uff81\071\uff81\074" +
    "\uff81\075\uff81\001\002\000\044\007\uff83\045\uff83\050\uff83" +
    "\051\uff83\052\uff83\053\uff83\055\uff83\056\uff83\057\uff83\060" +
    "\uff83\061\uff83\062\uff83\063\uff83\064\uff83\071\uff83\074\uff83" +
    "\075\uff83\001\002\000\022\043\062\044\064\046\060\051" +
    "\067\054\065\065\061\070\066\077\063\001\002\000\022" +
    "\043\062\044\064\046\060\051\067\054\065\065\061\070" +
    "\066\077\063\001\002\000\036\007\071\050\100\051\104" +
    "\052\073\053\072\055\077\056\105\057\106\060\074\061" +
    "\101\062\103\063\076\064\075\071\102\001\002\000\022" +
    "\043\062\044\064\046\060\051\067\054\065\065\061\070" +
    "\066\077\063\001\002\000\022\043\062\044\064\046\060" +
    "\051\067\054\065\065\061\070\066\077\063\001\002\000" +
    "\022\043\062\044\064\046\060\051\067\054\065\065\061" +
    "\070\066\077\063\001\002\000\022\043\062\044\064\046" +
    "\060\051\067\054\065\065\061\070\066\077\063\001\002" +
    "\000\022\043\062\044\064\046\060\051\067\054\065\065" +
    "\061\070\066\077\063\001\002\000\022\043\062\044\064" +
    "\046\060\051\067\054\065\065\061\070\066\077\063\001" +
    "\002\000\022\043\062\044\064\046\060\051\067\054\065" +
    "\065\061\070\066\077\063\001\002\000\022\043\062\044" +
    "\064\046\060\051\067\054\065\065\061\070\066\077\063" +
    "\001\002\000\022\043\062\044\064\046\060\051\067\054" +
    "\065\065\061\070\066\077\063\001\002\000\004\066\113" +
    "\001\002\000\022\043\062\044\064\046\060\051\067\054" +
    "\065\065\061\070\066\077\063\001\002\000\022\043\062" +
    "\044\064\046\060\051\067\054\065\065\061\070\066\077" +
    "\063\001\002\000\022\043\062\044\064\046\060\051\067" +
    "\054\065\065\061\070\066\077\063\001\002\000\022\043" +
    "\062\044\064\046\060\051\067\054\065\065\061\070\066" +
    "\077\063\001\002\000\042\007\071\045\uff8f\050\100\051" +
    "\104\052\073\053\uff8f\055\uff8f\056\uff8f\057\uff8f\060\uff8f" +
    "\061\uff8f\062\uff8f\063\uff8f\064\uff8f\071\uff8f\075\uff8f\001" +
    "\002\000\042\007\071\045\uff91\050\100\051\104\052\073" +
    "\053\uff91\055\uff91\056\uff91\057\uff91\060\uff91\061\uff91\062" +
    "\uff91\063\uff91\064\uff91\071\uff91\075\uff91\001\002\000\042" +
    "\007\071\045\uff8a\050\uff8a\051\uff8a\052\073\053\uff8a\055" +
    "\uff8a\056\uff8a\057\uff8a\060\uff8a\061\uff8a\062\uff8a\063\uff8a" +
    "\064\uff8a\071\uff8a\075\uff8a\001\002\000\042\007\071\045" +
    "\uff8c\050\100\051\104\052\073\053\uff8c\055\uff8c\056\uff8c" +
    "\057\uff8c\060\uff8c\061\uff8c\062\uff8c\063\uff8c\064\uff8c\071" +
    "\uff8c\075\uff8c\001\002\000\010\100\046\101\047\103\051" +
    "\001\002\000\012\067\uffbb\100\uffbb\101\uffbb\103\uffbb\001" +
    "\002\000\012\067\122\100\046\101\047\103\051\001\002" +
    "\000\012\067\uffba\100\uffba\101\uffba\103\uffba\001\002\000" +
    "\012\067\uffb9\100\uffb9\101\uffb9\103\uffb9\001\002\000\012" +
    "\067\uffb8\100\uffb8\101\uffb8\103\uffb8\001\002\000\012\067" +
    "\uffbc\100\uffbc\101\uffbc\103\uffbc\001\002\000\020\046\uffb3" +
    "\067\uffb3\072\uffb3\100\uffb3\101\uffb3\103\uffb3\121\uffb3\001" +
    "\002\000\042\007\071\045\uff8d\050\100\051\104\052\073" +
    "\053\uff8d\055\uff8d\056\uff8d\057\uff8d\060\uff8d\061\uff8d\062" +
    "\uff8d\063\uff8d\064\uff8d\071\uff8d\075\uff8d\001\002\000\042" +
    "\007\071\045\uff8b\050\uff8b\051\uff8b\052\073\053\uff8b\055" +
    "\uff8b\056\uff8b\057\uff8b\060\uff8b\061\uff8b\062\uff8b\063\uff8b" +
    "\064\uff8b\071\uff8b\075\uff8b\001\002\000\042\007\071\045" +
    "\uff90\050\100\051\104\052\073\053\uff90\055\uff90\056\uff90" +
    "\057\uff90\060\uff90\061\uff90\062\uff90\063\uff90\064\uff90\071" +
    "\uff90\075\uff90\001\002\000\042\007\071\045\uff93\050\100" +
    "\051\104\052\073\053\uff93\055\077\056\105\057\106\060" +
    "\074\061\101\062\103\063\uff93\064\uff93\071\uff93\075\uff93" +
    "\001\002\000\042\007\071\045\uff95\050\100\051\104\052" +
    "\073\053\uff95\055\077\056\105\057\106\060\074\061\101" +
    "\062\103\063\076\064\uff95\071\uff95\075\uff95\001\002\000" +
    "\042\007\071\045\uff8e\050\100\051\104\052\073\053\uff8e" +
    "\055\uff8e\056\uff8e\057\uff8e\060\uff8e\061\uff8e\062\uff8e\063" +
    "\uff8e\064\uff8e\071\uff8e\075\uff8e\001\002\000\042\007\uff88" +
    "\045\uff88\050\uff88\051\uff88\052\uff88\053\uff88\055\uff88\056" +
    "\uff88\057\uff88\060\uff88\061\uff88\062\uff88\063\uff88\064\uff88" +
    "\071\uff88\075\uff88\001\002\000\042\007\071\045\uff94\050" +
    "\100\051\104\052\073\053\uff94\055\077\056\105\057\106" +
    "\060\074\061\101\062\103\063\076\064\uff94\071\uff94\075" +
    "\uff94\001\002\000\042\007\uff89\045\uff89\050\uff89\051\uff89" +
    "\052\uff89\053\uff89\055\uff89\056\uff89\057\uff89\060\uff89\061" +
    "\uff89\062\uff89\063\uff89\064\uff89\071\uff89\075\uff89\001\002" +
    "\000\042\007\071\045\uff87\050\uff87\051\uff87\052\073\053" +
    "\uff87\055\uff87\056\uff87\057\uff87\060\uff87\061\uff87\062\uff87" +
    "\063\uff87\064\uff87\071\uff87\075\uff87\001\002\000\036\007" +
    "\071\050\100\051\104\052\073\053\072\055\077\056\105" +
    "\057\106\060\074\061\101\062\103\063\076\064\075\071" +
    "\136\001\002\000\042\007\uff86\045\uff86\050\uff86\051\uff86" +
    "\052\uff86\053\uff86\055\uff86\056\uff86\057\uff86\060\uff86\061" +
    "\uff86\062\uff86\063\uff86\064\uff86\071\uff86\075\uff86\001\002" +
    "\000\042\007\071\045\uff92\050\100\051\104\052\073\053" +
    "\uff92\055\077\056\105\057\106\060\074\061\101\062\103" +
    "\063\uff92\064\uff92\071\uff92\075\uff92\001\002\000\044\007" +
    "\uff80\045\uff80\050\uff80\051\uff80\052\uff80\053\uff80\055\uff80" +
    "\056\uff80\057\uff80\060\uff80\061\uff80\062\uff80\063\uff80\064" +
    "\uff80\071\uff80\074\uff80\075\uff80\001\002\000\022\043\062" +
    "\044\064\046\060\051\067\054\065\065\061\070\066\077" +
    "\063\001\002\000\036\007\071\050\100\051\104\052\073" +
    "\053\072\055\077\056\105\057\106\060\074\061\101\062" +
    "\103\063\076\064\075\071\143\001\002\000\004\066\144" +
    "\001\002\000\010\100\046\101\047\103\051\001\002\000" +
    "\012\067\150\100\046\101\047\103\051\001\002\000\020" +
    "\046\uffb7\067\uffb7\072\uffb7\100\uffb7\101\uffb7\103\uffb7\121" +
    "\uffb7\001\002\000\004\067\154\001\002\000\022\046\uffb5" +
    "\067\uffb5\072\uffb5\100\uffb5\101\uffb5\102\151\103\uffb5\121" +
    "\uffb5\001\002\000\004\066\152\001\002\000\010\100\046" +
    "\101\047\103\051\001\002\000\012\067\uffb4\100\046\101" +
    "\047\103\051\001\002\000\020\046\uffb6\067\uffb6\072\uffb6" +
    "\100\uffb6\101\uffb6\103\uffb6\121\uffb6\001\002\000\012\045" +
    "\uffbe\053\uffbe\071\uffbe\075\uffbe\001\002\000\004\076\164" +
    "\001\002\000\006\045\uffbf\053\uffbf\001\002\000\006\045" +
    "\162\053\161\001\002\000\006\046\156\077\155\001\002" +
    "\000\020\046\uffc1\067\uffc1\072\uffc1\100\uffc1\101\uffc1\103" +
    "\uffc1\121\uffc1\001\002\000\006\045\uffc0\053\uffc0\001\002" +
    "\000\012\045\uffbd\053\uffbd\071\uffbd\075\uffbd\001\002\000" +
    "\010\004\uffcd\005\uffcd\107\uffcd\001\002\000\016\046\uffcc" +
    "\072\uffcc\100\uffcc\101\uffcc\103\uffcc\121\uffcc\001\002\000" +
    "\004\047\170\001\002\000\024\043\062\044\064\046\060" +
    "\051\067\054\065\065\061\070\066\072\171\077\063\001" +
    "\002\000\004\076\174\001\002\000\036\007\071\045\173" +
    "\050\100\051\104\052\073\053\072\055\077\056\105\057" +
    "\106\060\074\061\101\062\103\063\076\064\075\001\002" +
    "\000\016\046\uffc3\072\uffc3\100\uffc3\101\uffc3\103\uffc3\121" +
    "\uffc3\001\002\000\004\053\175\001\002\000\016\035\201" +
    "\106\200\110\204\116\202\123\203\130\177\001\002\000" +
    "\004\045\221\001\002\000\004\070\217\001\002\000\004" +
    "\070\215\001\002\000\004\070\213\001\002\000\004\070" +
    "\211\001\002\000\004\070\207\001\002\000\004\070\205" +
    "\001\002\000\004\071\206\001\002\000\004\045\uff9d\001" +
    "\002\000\004\071\210\001\002\000\004\045\uff9b\001\002" +
    "\000\004\071\212\001\002\000\004\045\uff9a\001\002\000" +
    "\004\071\214\001\002\000\004\045\uff9e\001\002\000\004" +
    "\071\216\001\002\000\004\045\uff9c\001\002\000\004\071" +
    "\220\001\002\000\004\045\uff99\001\002\000\016\046\uffc2" +
    "\072\uffc2\100\uffc2\101\uffc2\103\uffc2\121\uffc2\001\002\000" +
    "\006\047\224\053\223\001\002\000\024\104\312\105\310" +
    "\114\304\115\307\117\305\120\302\122\301\125\311\127" +
    "\303\001\002\000\016\020\227\111\226\112\225\113\232" +
    "\124\230\126\233\001\002\000\004\070\276\001\002\000" +
    "\004\070\273\001\002\000\004\070\266\001\002\000\004" +
    "\070\252\001\002\000\004\045\251\001\002\000\004\070" +
    "\241\001\002\000\004\070\234\001\002\000\006\046\156" +
    "\077\155\001\002\000\004\075\236\001\002\000\006\046" +
    "\156\077\155\001\002\000\004\071\240\001\002\000\004" +
    "\045\uffac\001\002\000\006\046\156\077\155\001\002\000" +
    "\006\071\244\075\243\001\002\000\022\043\062\044\064" +
    "\046\060\051\067\054\065\065\061\070\066\077\063\001" +
    "\002\000\004\045\uffaf\001\002\000\036\007\071\050\100" +
    "\051\104\052\073\053\072\055\077\056\105\057\106\060" +
    "\074\061\101\062\103\063\076\064\075\075\246\001\002" +
    "\000\022\043\062\044\064\046\060\051\067\054\065\065" +
    "\061\070\066\077\063\001\002\000\036\007\071\050\100" +
    "\051\104\052\073\053\072\055\077\056\105\057\106\060" +
    "\074\061\101\062\103\063\076\064\075\071\250\001\002" +
    "\000\004\045\uffae\001\002\000\016\046\uffc6\072\uffc6\100" +
    "\uffc6\101\uffc6\103\uffc6\121\uffc6\001\002\000\004\073\255" +
    "\001\002\000\006\071\264\075\263\001\002\000\006\071" +
    "\uffaa\075\uffaa\001\002\000\014\043\062\044\064\046\060" +
    "\054\065\077\063\001\002\000\006\074\261\075\260\001" +
    "\002\000\006\074\uffa7\075\uffa7\001\002\000\014\043\062" +
    "\044\064\046\060\054\065\077\063\001\002\000\006\071" +
    "\uffa9\075\uffa9\001\002\000\006\074\uffa8\075\uffa8\001\002" +
    "\000\004\073\255\001\002\000\004\045\uffad\001\002\000" +
    "\006\071\uffab\075\uffab\001\002\000\006\046\156\077\155" +
    "\001\002\000\004\075\270\001\002\000\004\077\271\001" +
    "\002\000\004\071\272\001\002\000\004\045\uffb2\001\002" +
    "\000\006\046\156\077\155\001\002\000\004\071\275\001" +
    "\002\000\004\045\uffb1\001\002\000\006\046\156\077\155" +
    "\001\002\000\004\071\300\001\002\000\004\045\uffb0\001" +
    "\002\000\004\070\350\001\002\000\004\070\345\001\002" +
    "\000\004\070\342\001\002\000\004\070\337\001\002\000" +
    "\004\070\334\001\002\000\004\045\333\001\002\000\004" +
    "\070\330\001\002\000\004\070\325\001\002\000\004\070" +
    "\316\001\002\000\004\070\313\001\002\000\006\046\156" +
    "\077\155\001\002\000\004\071\315\001\002\000\004\045" +
    "\uffa6\001\002\000\010\043\321\044\317\046\320\001\002" +
    "\000\004\071\uff97\001\002\000\004\076\324\001\002\000" +
    "\004\071\uff98\001\002\000\004\071\323\001\002\000\004" +
    "\045\uffa1\001\002\000\004\071\uff96\001\002\000\006\046" +
    "\156\077\155\001\002\000\004\071\327\001\002\000\004" +
    "\045\uffa5\001\002\000\006\046\156\077\155\001\002\000" +
    "\004\071\332\001\002\000\004\045\uff9f\001\002\000\016" +
    "\046\uffc5\072\uffc5\100\uffc5\101\uffc5\103\uffc5\121\uffc5\001" +
    "\002\000\006\046\156\077\155\001\002\000\004\071\336" +
    "\001\002\000\004\045\uffa4\001\002\000\004\071\340\001" +
    "\002\000\004\045\341\001\002\000\016\046\uffc4\072\uffc4" +
    "\100\uffc4\101\uffc4\103\uffc4\121\uffc4\001\002\000\006\046" +
    "\156\077\155\001\002\000\004\071\344\001\002\000\004" +
    "\045\uffa0\001\002\000\022\043\062\044\064\046\060\051" +
    "\067\054\065\065\061\070\066\077\063\001\002\000\036" +
    "\007\071\050\100\051\104\052\073\053\072\055\077\056" +
    "\105\057\106\060\074\061\101\062\103\063\076\064\075" +
    "\071\347\001\002\000\004\045\uffa3\001\002\000\022\043" +
    "\062\044\064\046\060\051\067\054\065\065\061\070\066" +
    "\077\063\001\002\000\036\007\071\050\100\051\104\052" +
    "\073\053\072\055\077\056\105\057\106\060\074\061\101" +
    "\062\103\063\076\064\075\071\352\001\002\000\004\045" +
    "\uffa2\001\002\000\004\006\u0164\001\002\000\006\040\u0159" +
    "\041\u0157\001\002\000\004\006\u0150\001\002\000\004\006" +
    "\u014a\001\002\000\006\006\u0134\033\u0133\001\002\000\010" +
    "\034\u0125\036\u0122\037\u0124\001\002\000\004\017\u0110\001" +
    "\002\000\006\006\365\042\363\001\002\000\004\047\u011f" +
    "\001\002\000\004\006\u0119\001\002\000\004\004\367\001" +
    "\002\000\004\004\uffd3\001\002\000\004\022\373\001\002" +
    "\000\004\004\372\001\002\000\004\004\uffd4\001\002\000" +
    "\006\007\374\022\373\001\002\000\004\006\377\001\002" +
    "\000\004\021\375\001\002\000\004\006\376\001\002\000" +
    "\010\004\uffd7\005\uffd7\107\uffd7\001\002\000\004\004\u0100" +
    "\001\002\000\006\023\u0106\024\u0105\001\002\000\004\004" +
    "\u0103\001\002\000\004\004\uffd0\001\002\000\010\007\u0107" +
    "\023\u0106\024\u0105\001\002\000\004\004\uffd1\001\002\000" +
    "\004\006\u0113\001\002\000\004\006\u010a\001\002\000\004" +
    "\022\u0108\001\002\000\004\006\u0109\001\002\000\004\004" +
    "\uffd2\001\002\000\010\004\032\005\031\107\041\001\002" +
    "\000\010\004\u010c\005\031\107\041\001\002\000\022\007" +
    "\u010e\016\357\021\362\025\360\026\355\027\353\030\354" +
    "\031\356\001\002\000\010\004\ufff9\005\ufff9\107\ufff9\001" +
    "\002\000\006\017\u0110\023\u010f\001\002\000\004\006\u0112" +
    "\001\002\000\004\006\u0111\001\002\000\010\004\ufff4\005" +
    "\ufff4\107\ufff4\001\002\000\004\004\uffcf\001\002\000\010" +
    "\004\032\005\031\107\041\001\002\000\010\004\u0115\005" +
    "\031\107\041\001\002\000\022\007\u0116\016\357\021\362" +
    "\025\360\026\355\027\353\030\354\031\356\001\002\000" +
    "\006\017\u0110\024\u0117\001\002\000\004\006\u0118\001\002" +
    "\000\004\004\uffce\001\002\000\004\004\367\001\002\000" +
    "\004\004\u011b\001\002\000\006\007\u011c\022\373\001\002" +
    "\000\004\021\u011d\001\002\000\004\006\u011e\001\002\000" +
    "\010\004\uffd8\005\uffd8\107\uffd8\001\002\000\006\043\u0121" +
    "\044\u0120\001\002\000\004\006\uffd5\001\002\000\004\006" +
    "\uffd6\001\002\000\004\047\u0131\001\002\000\012\006\u012b" +
    "\034\u0125\036\u0122\037\u0124\001\002\000\004\047\u0129\001" +
    "\002\000\004\047\u0127\001\002\000\012\006\uffe1\034\uffe1" +
    "\036\uffe1\037\uffe1\001\002\000\004\077\u0128\001\002\000" +
    "\012\006\uffe0\034\uffe0\036\uffe0\037\uffe0\001\002\000\004" +
    "\054\u012a\001\002\000\012\006\uffde\034\uffde\036\uffde\037" +
    "\uffde\001\002\000\004\004\u012d\001\002\000\012\006\uffe2" +
    "\034\uffe2\036\uffe2\037\uffe2\001\002\000\004\007\u012e\001" +
    "\002\000\004\025\u012f\001\002\000\004\006\u0130\001\002" +
    "\000\010\004\uffe3\005\uffe3\107\uffe3\001\002\000\004\054" +
    "\u0132\001\002\000\012\006\uffdf\034\uffdf\036\uffdf\037\uffdf" +
    "\001\002\000\004\047\u0148\001\002\000\006\004\u0138\005" +
    "\u013a\001\002\000\004\006\u0136\001\002\000\006\004\u0138" +
    "\005\u013a\001\002\000\006\004\u013e\005\u013a\001\002\000" +
    "\004\007\u013b\001\002\000\006\004\uffe9\005\uffe9\001\002" +
    "\000\006\004\uffe8\005\uffe8\001\002\000\004\017\u013c\001" +
    "\002\000\004\006\u013d\001\002\000\006\004\uffe7\005\uffe7" +
    "\001\002\000\004\007\u0140\001\002\000\006\004\uffea\005" +
    "\uffea\001\002\000\006\016\u0141\017\u013c\001\002\000\004" +
    "\006\u0142\001\002\000\010\004\uffec\005\uffec\107\uffec\001" +
    "\002\000\006\004\u0144\005\u013a\001\002\000\004\007\u0145" +
    "\001\002\000\006\016\u0146\017\u013c\001\002\000\004\006" +
    "\u0147\001\002\000\010\004\uffeb\005\uffeb\107\uffeb\001\002" +
    "\000\004\077\u0149\001\002\000\004\006\uffe6\001\002\000" +
    "\010\004\032\005\031\107\041\001\002\000\010\004\u014c" +
    "\005\031\107\041\001\002\000\022\007\u014d\016\357\021" +
    "\362\025\360\026\355\027\353\030\354\031\356\001\002" +
    "\000\006\017\u0110\031\u014e\001\002\000\004\006\u014f\001" +
    "\002\000\010\004\uffed\005\uffed\107\uffed\001\002\000\006" +
    "\004\u0138\005\u013a\001\002\000\006\004\u0152\005\u013a\001" +
    "\002\000\004\007\u0153\001\002\000\006\017\u013c\026\u0154" +
    "\001\002\000\004\006\u0155\001\002\000\010\004\uffe5\005" +
    "\uffe5\107\uffe5\001\002\000\010\006\u015f\040\u0159\041\u0157" +
    "\001\002\000\004\047\u015c\001\002\000\010\006\uffdb\040" +
    "\uffdb\041\uffdb\001\002\000\004\047\u015a\001\002\000\004" +
    "\077\u015b\001\002\000\010\006\uffda\040\uffda\041\uffda\001" +
    "\002\000\004\077\u015d\001\002\000\010\006\uffd9\040\uffd9" +
    "\041\uffd9\001\002\000\010\006\uffdc\040\uffdc\041\uffdc\001" +
    "\002\000\004\004\u0160\001\002\000\004\007\u0161\001\002" +
    "\000\004\030\u0162\001\002\000\004\006\u0163\001\002\000" +
    "\010\004\uffdd\005\uffdd\107\uffdd\001\002\000\006\004\u0138" +
    "\005\u013a\001\002\000\006\004\u0166\005\u013a\001\002\000" +
    "\004\007\u0167\001\002\000\006\017\u013c\027\u0168\001\002" +
    "\000\004\006\u0169\001\002\000\010\004\uffe4\005\uffe4\107" +
    "\uffe4\001\002\000\022\007\u016b\016\357\021\362\025\360" +
    "\026\355\027\353\030\354\031\356\001\002\000\006\015" +
    "\u016c\017\u0110\001\002\000\004\006\u016d\001\002\000\004" +
    "\004\ufffc\001\002\000\010\004\032\005\031\107\041\001" +
    "\002\000\010\004\u0170\005\031\107\041\001\002\000\022" +
    "\007\u0171\016\357\021\362\025\360\026\355\027\353\030" +
    "\354\031\356\001\002\000\006\015\u0172\017\u0110\001\002" +
    "\000\004\006\u0173\001\002\000\004\004\ufffd\001\002\000" +
    "\006\010\u0176\077\u0175\001\002\000\004\006\ufffb\001\002" +
    "\000\004\011\u0177\001\002\000\004\010\u0178\001\002\000" +
    "\004\006\ufffa\001\002\000\004\006\u017a\001\002\000\004" +
    "\004\u017b\001\002\000\004\014\u017c\001\002\000\004\006" +
    "\u017d\001\002\000\006\004\u0138\005\u013a\001\002\000\006" +
    "\004\u017f\005\u013a\001\002\000\004\007\u0180\001\002\000" +
    "\006\014\u0181\017\u013c\001\002\000\004\006\u0182\001\002" +
    "\000\004\004\u0183\001\002\000\004\007\u0184\001\002\000" +
    "\004\013\u0185\001\002\000\004\006\u0186\001\002\000\004" +
    "\004\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0184\000\006\002\004\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\012\001\001\000\002\001" +
    "\001\000\004\005\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\007\027\010\037\011" +
    "\032\012\041\014\034\015\033\016\036\022\025\025\035" +
    "\033\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\010\u010c\011\032\012\041\014\034\015\033\016\036" +
    "\022\025\025\035\033\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\034\044\035\053\036\047\037\052\042\051" +
    "\045\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\035\165\036\047\037\052\042\051" +
    "\045\054\001\001\000\006\040\157\041\156\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\055\067\056\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\055\136\056\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\055\134\056\056\001\001\000\006\055" +
    "\133\056\056\001\001\000\002\001\001\000\006\055\132" +
    "\056\056\001\001\000\006\055\131\056\056\001\001\000" +
    "\006\055\130\056\056\001\001\000\006\055\127\056\056" +
    "\001\001\000\006\055\126\056\056\001\001\000\006\055" +
    "\125\056\056\001\001\000\006\055\124\056\056\001\001" +
    "\000\006\055\123\056\056\001\001\000\006\055\122\056" +
    "\056\001\001\000\002\001\001\000\006\055\111\056\056" +
    "\001\001\000\006\055\110\056\056\001\001\000\006\055" +
    "\107\056\056\001\001\000\006\055\106\056\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\037\115\042\116\045\117\057\114" +
    "\061\113\001\001\000\002\001\001\000\012\037\115\042" +
    "\116\045\117\061\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\055\141\056\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\037\115\042" +
    "\116\045\117\057\144\061\113\001\001\000\016\037\115" +
    "\042\116\043\145\044\146\045\117\061\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\037\115\042\116\045\117\057\152\061" +
    "\113\001\001\000\012\037\115\042\116\045\117\061\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\162" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\055\171\056\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\053\175\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\305\001\001\000\004\046\230\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\234\001\001\000\002\001\001\000\004\041\236\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\241" +
    "\001\001\000\002\001\001\000\006\055\244\056\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\055\246" +
    "\056\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\047\252\050\253\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\051\255\056\256\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\056\261" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\050" +
    "\264\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\266\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\273\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\276\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\313\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\054\321\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\041\325\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\041\330\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\334\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\342\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\055\345" +
    "\056\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\055\350\056\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\023\u0155\024\u0157\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\u0134" +
    "\001\001\000\006\017\u0122\020\u0125\001\001\000\002\001" +
    "\001\000\004\026\363\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\027\367\030\365\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\370\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\031\u0100" +
    "\032\u0101\001\001\000\002\001\001\000\004\032\u0103\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\007\u010a\010\037" +
    "\011\032\012\041\014\034\015\033\016\036\022\025\025" +
    "\035\033\026\001\001\000\024\010\u010c\011\032\012\041" +
    "\014\034\015\033\016\036\022\025\025\035\033\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\007\u0113\010\037\011\032\012\041" +
    "\014\034\015\033\016\036\022\025\025\035\033\026\001" +
    "\001\000\024\010\u010c\011\032\012\041\014\034\015\033" +
    "\016\036\022\025\025\035\033\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\027\u0119\030\365\001\001\000\004\030\370\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\u012b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\u0142\060\u0138\001\001\000\002\001\001\000\006" +
    "\021\u0136\060\u0138\001\001\000\004\060\u013e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\060\u013e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\007\u014a\010" +
    "\037\011\032\012\041\014\034\015\033\016\036\022\025" +
    "\025\035\033\026\001\001\000\024\010\u010c\011\032\012" +
    "\041\014\034\015\033\016\036\022\025\025\035\033\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\021\u0150\060\u0138\001\001" +
    "\000\004\060\u013e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\u015d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\u0164\060\u0138\001\001\000\004\060" +
    "\u013e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\007\u016e" +
    "\010\037\011\032\012\041\014\034\015\033\016\036\022" +
    "\025\025\035\033\026\001\001\000\024\010\u010c\011\032" +
    "\012\041\014\034\015\033\016\036\022\025\025\035\033" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\u017d\060\u0138\001\001\000\004" +
    "\060\u013e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Scanner$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Scanner$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Scanner$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //Lista de Errores
    public ArrayList<Esemanticos> ErroresSintacticos = new ArrayList<Esemanticos> ();

    //Metodo al que se llama automaticamente ante algún error sintáctico
    public void syntax_error(Symbol s)
    {        
        System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        Esemanticos e = new Esemanticos(String.valueOf(s.value),"Sintactico", s.left + 1, s.right, "No se esperaba ese valor");
        ErroresSintacticos.add(e);
    }
 

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");
        Esemanticos e = new Esemanticos(String.valueOf(s.value),"Sintactico", s.left + 1, s.right, "No se esperaba ese valor");
        ErroresSintacticos.add(e);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Scanner$actions {


  private final Scanner parser;

  /** Constructor */
  CUP$Scanner$actions(Scanner parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Scanner$do_action_part00000000(
    int                        CUP$Scanner$act_num,
    java_cup.runtime.lr_parser CUP$Scanner$parser,
    java.util.Stack            CUP$Scanner$stack,
    int                        CUP$Scanner$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Scanner$result;

      /* select the action based on the action number */
      switch (CUP$Scanner$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		RESULT = start_val;
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Scanner$parser.done_parsing();
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= START 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // START ::= open compi close HEADER BODY open div compi close 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("START",1, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-8)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // HEADER ::= open cabecera close open titulo close PARRA open div titulo close open div cabecera close 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("HEADER",2, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-14)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BODY ::= open cuerpo ATRIBUTO_CUERPO close CONTENIDO open div cuerpo close 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("BODY",3, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-8)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BODY ::= open cuerpo close CONTENIDO open div cuerpo close 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("BODY",3, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ATRIBUTO_CUERPO ::= fondo equal cadena 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("ATRIBUTO_CUERPO",4, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ATRIBUTO_CUERPO ::= fondo equal ddq rgb ddq 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("ATRIBUTO_CUERPO",4, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONTENIDO ::= CONTENIDO CONT 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("CONTENIDO",5, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONTENIDO ::= CONT 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("CONTENIDO",5, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONT ::= ESPACIO 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("CONT",6, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONT ::= PARRAFO 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("CONT",6, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONT ::= paragraph 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("CONT",6, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONT ::= open div salto close 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("CONT",6, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONT ::= TEXTOA 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("CONT",6, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONT ::= TEXTOB 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("CONT",6, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONT ::= IMAGEN 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("CONT",6, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONT ::= BOTON 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("CONT",6, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONT ::= TABLA 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("CONT",6, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONT ::= SCRIPTHS 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("CONT",6, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ESPACIO ::= open espacio close CONTENIDO open div espacio close 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("ESPACIO",7, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PARRAFO ::= open parrafo ATRIBUTO_PARRA close PARRA open div parrafo close 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("PARRAFO",8, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-8)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARRAFO ::= open parrafo close PARRA open div parrafo close 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("PARRAFO",8, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARRA ::= PARRA G 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("PARRA",15, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARRA ::= G 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("PARRA",15, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // G ::= paragraph 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("G",46, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // G ::= open div salto close 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("G",46, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ATRIBUTO_PARRA ::= alineacion equal cadena 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("ATRIBUTO_PARRA",9, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TEXTOA ::= open textoa close PARRA open div textoa close 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("TEXTOA",10, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TEXTOB ::= open textob close PARRA open div textob close 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("TEXTOB",11, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IMAGEN ::= open imagen ATRIBUTOS_IMAGEN close open div imagen close 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("IMAGEN",12, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ATRIBUTOS_IMAGEN ::= ATRIBUTOS_IMAGEN ATRI_IMAGE 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS_IMAGEN",13, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ATRIBUTOS_IMAGEN ::= ATRI_IMAGE 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS_IMAGEN",13, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ATRI_IMAGE ::= path equal cadena 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("ATRI_IMAGE",14, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ATRI_IMAGE ::= alto equal numero 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("ATRI_IMAGE",14, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ATRI_IMAGE ::= ancho equal numero 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("ATRI_IMAGE",14, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BOTON ::= open boton ATRIBUTOS_BOTON close open div boton close 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("BOTON",16, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ATRIBUTOS_BOTON ::= ATRIBUTOS_BOTON ATRI_BTN 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS_BOTON",17, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ATRIBUTOS_BOTON ::= ATRI_BTN 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS_BOTON",17, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ATRI_BTN ::= id equal cadena 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("ATRI_BTN",18, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ATRI_BTN ::= texto equal cadena 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("ATRI_BTN",18, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TABLA ::= open tabla ATRIBUTO_TABLA close LISTA_FILAS open div tabla close 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("TABLA",19, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-8)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TABLA ::= open tabla close LISTA_FILAS open div tabla close 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("TABLA",19, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ATRIBUTO_TABLA ::= borde equal true_ 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("ATRIBUTO_TABLA",20, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ATRIBUTO_TABLA ::= borde equal false_ 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("ATRIBUTO_TABLA",20, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LISTA_FILAS ::= LISTA_FILAS FILA 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("LISTA_FILAS",21, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LISTA_FILAS ::= FILA 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("LISTA_FILAS",21, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FILA ::= open fila close LISTA_COLUMNA open div fila close 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("FILA",22, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LISTA_COLUMNA ::= LISTA_COLUMNA COLUMNA 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("LISTA_COLUMNA",23, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LISTA_COLUMNA ::= COLUMNA 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("LISTA_COLUMNA",23, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // COLUMNA ::= open columnac close CONTENIDO open div columnac close 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("COLUMNA",24, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // COLUMNA ::= open columna close CONTENIDO open div columna close 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("COLUMNA",24, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SCRIPTHS ::= beginHS CUERPO_HSC endHS 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("SCRIPTHS",25, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CUERPO_HSC ::= CUERPO_HSC SCRIPT 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("CUERPO_HSC",26, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CUERPO_HSC ::= SCRIPT 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("CUERPO_HSC",26, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SCRIPT ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("SCRIPT",27, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SCRIPT ::= IMPRESION 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("SCRIPT",27, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SCRIPT ::= IF 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("SCRIPT",27, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SCRIPT ::= REPETIR 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("SCRIPT",27, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SCRIPT ::= hashtag identificador equal STRUCT semicolon 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("SCRIPT",27, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SCRIPT ::= hashtag identificador dot SET semicolon 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("SCRIPT",27, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SCRIPT ::= hashtag identificador dot insertar opar cpar semicolon 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("SCRIPT",27, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-6)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= dolar identificador equal EXP semicolon 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("DECLARACION",28, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= dolar identificador equal hashtag identificador dot GET semicolon 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("DECLARACION",28, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IMPRESION ::= echo LISTA_IMPRESION semicolon 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("IMPRESION",29, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LISTA_IMPRESION ::= LISTA_IMPRESION dot VALOR_STRING 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("LISTA_IMPRESION",30, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LISTA_IMPRESION ::= VALOR_STRING 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("LISTA_IMPRESION",30, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VALOR_STRING ::= cadena 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("VALOR_STRING",31, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VALOR_STRING ::= dolar identificador 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("VALOR_STRING",31, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CUERPO_SENTENCIA ::= CUERPO_SENTENCIA SENTENCIA 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("CUERPO_SENTENCIA",45, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CUERPO_SENTENCIA ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("CUERPO_SENTENCIA",45, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIA ::= IMPRESION 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("SENTENCIA",47, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("SENTENCIA",47, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA ::= REPETIR 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("SENTENCIA",47, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // IF ::= if_ opar EXP cpar ollv CUERPO_SENTENCIA IF_OPCION 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("IF",32, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-6)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // IF_OPCION ::= ELSE cllv 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("IF_OPCION",33, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // IF_OPCION ::= cllv 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("IF_OPCION",33, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ELSE ::= cllv else_ ollv CUERPO_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("ELSE",34, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // REPETIR ::= repetir opar EXP cpar ollv CUERPO_SENTENCIA cllv 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("REPETIR",35, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-6)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // STRUCT ::= crearparrafo opar VALOR_STRING comma cadena cpar 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("STRUCT",36, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // STRUCT ::= creartextoa opar VALOR_STRING cpar 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("STRUCT",36, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // STRUCT ::= creartextob opar VALOR_STRING cpar 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("STRUCT",36, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // STRUCT ::= crearimagen opar VALOR_STRING cpar 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("STRUCT",36, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // STRUCT ::= crearimagen opar VALOR_STRING comma EXP comma EXP cpar 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("STRUCT",36, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // STRUCT ::= creartabla opar LIST_ROWS cpar 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("STRUCT",36, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // STRUCT ::= crearboton opar VALOR_STRING comma VALOR_STRING cpar 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("STRUCT",36, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LIST_ROWS ::= LIST_ROWS comma ROW 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("LIST_ROWS",37, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LIST_ROWS ::= ROW 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("LIST_ROWS",37, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ROW ::= ocorch LIST_COLUMN ccorch 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("ROW",38, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LIST_COLUMN ::= LIST_COLUMN comma VALOR 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("LIST_COLUMN",39, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LIST_COLUMN ::= VALOR 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("LIST_COLUMN",39, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SET ::= setcontenido opar VALOR_STRING cpar 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("SET",40, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SET ::= setalineacion opar VALOR_STRING cpar 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("SET",40, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SET ::= setpath opar VALOR_STRING cpar 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("SET",40, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SET ::= setalto opar EXP cpar 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("SET",40, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SET ::= setancho opar EXP cpar 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("SET",40, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SET ::= setborde opar VALOR_BOOLEANO cpar 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("SET",40, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SET ::= settexto opar VALOR_STRING cpar 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("SET",40, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SET ::= clickboton opar VALOR_STRING cpar 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("SET",40, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // GET ::= getcontenido opar cpar 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("GET",41, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // GET ::= getalineacion opar cpar 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("GET",41, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // GET ::= getpath opar cpar 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("GET",41, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // GET ::= getalto opar cpar 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("GET",41, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // GET ::= getancho opar cpar 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("GET",41, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // GET ::= gettexto opar cpar 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("GET",41, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // VALOR_BOOLEANO ::= true_ 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("VALOR_BOOLEANO",42, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // VALOR_BOOLEANO ::= false_ 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("VALOR_BOOLEANO",42, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // VALOR_BOOLEANO ::= dolar identificador 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("VALOR_BOOLEANO",42, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXP ::= EXP or EXP 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("EXP",43, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXP ::= EXP dot EXP 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("EXP",43, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXP ::= EXP and EXP 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("EXP",43, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXP ::= not EXP 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("EXP",43, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXP ::= EXP mayor EXP 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("EXP",43, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXP ::= EXP menor EXP 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("EXP",43, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXP ::= EXP menorque EXP 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("EXP",43, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXP ::= EXP mayorque EXP 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("EXP",43, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXP ::= EXP diferente EXP 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("EXP",43, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXP ::= EXP igualque EXP 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("EXP",43, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXP ::= EXP plus EXP 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("EXP",43, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXP ::= EXP hypen EXP 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("EXP",43, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXP ::= EXP div EXP 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("EXP",43, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXP ::= EXP asterisk EXP 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("EXP",43, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXP ::= hypen EXP 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("EXP",43, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXP ::= opar EXP cpar 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("EXP",43, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXP ::= VALOR 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("EXP",43, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // VALOR ::= cadena 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("VALOR",44, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // VALOR ::= numero 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("VALOR",44, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // VALOR ::= true_ 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("VALOR",44, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // VALOR ::= false_ 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("VALOR",44, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // VALOR ::= dolar identificador 
            {
              Object RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("VALOR",44, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Scanner$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Scanner$do_action(
    int                        CUP$Scanner$act_num,
    java_cup.runtime.lr_parser CUP$Scanner$parser,
    java.util.Stack            CUP$Scanner$stack,
    int                        CUP$Scanner$top)
    throws java.lang.Exception
    {
              return CUP$Scanner$do_action_part00000000(
                               CUP$Scanner$act_num,
                               CUP$Scanner$parser,
                               CUP$Scanner$stack,
                               CUP$Scanner$top);
    }
}

}
