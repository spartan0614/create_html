/* The following code was generated by JFlex 1.6.1 */

package analyzers;
import java_cup.runtime.*;
import java.io.Reader;
import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/analyzers/Lexer.jflex</tt>
 */
public class Parser implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int HSC = 2;
  public static final int TAG = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
    15, 15, 15, 15, 15, 15, 15, 15, 15, 21,  4,  9, 10,  8, 15, 15, 
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 60, 60, 60, 60, 
    21, 17,  3, 14, 47, 60, 50,  7, 54, 55, 18, 48, 58, 49, 59, 20, 
     6,  6,  6,  6,  6,  6,  6,  6,  6,  6, 15, 46, 16, 43, 19, 22, 
    60, 32, 33, 26, 13, 34, 39, 41, 23, 31,  1, 45, 38, 28, 40, 27, 
    29,  1, 35, 25, 36, 37,  1,  1, 42,  1,  1, 56,  5, 57, 60,  2, 
    60, 32, 33, 26, 13, 34, 39, 41, 23, 31,  1, 45, 38, 28, 40, 27, 
    29,  1, 35, 25, 36, 37,  1,  1, 42,  1,  1, 52, 51, 53, 60, 15, 
    15, 15, 15, 15, 15, 11, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
    60, 15, 15, 15, 15, 15, 60, 60, 60, 60, 15, 60, 60, 15, 60, 60, 
    60, 60, 60, 60, 60, 15, 60, 60, 60, 60, 15, 60, 60, 60, 60, 15, 
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
    15, 15, 15, 15, 15, 15, 15, 60, 15, 15, 15, 15, 15, 15, 15, 15, 
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
    15, 15, 15, 15, 15, 15, 15, 60, 15, 15, 15, 15, 15, 15, 15, 15
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\2\1\0"+
    "\2\5\1\0\7\5\1\16\1\17\1\20\1\21\1\22"+
    "\2\2\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\7\1\2\1\33\1\15\1\0\3\2\1\0"+
    "\6\2\1\16\3\0\1\34\2\0\1\35\1\36\1\37"+
    "\1\0\1\3\1\40\1\0\3\5\1\41\1\0\1\41"+
    "\10\5\1\42\1\43\1\44\6\0\1\45\17\0\1\34"+
    "\4\0\2\5\1\0\1\5\1\0\1\5\1\0\2\5"+
    "\1\0\5\5\26\0\1\3\1\46\2\0\1\3\5\0"+
    "\6\5\1\0\1\5\1\0\1\5\1\0\1\5\1\47"+
    "\2\50\1\5\1\51\1\0\5\5\7\0\1\52\1\0"+
    "\1\53\7\0\1\51\1\0\1\54\1\55\6\0\7\5"+
    "\1\0\1\5\1\0\1\5\1\0\2\5\2\56\5\5"+
    "\1\0\1\57\1\60\5\0\1\61\1\62\1\63\2\0"+
    "\1\64\1\65\1\66\7\0\10\5\1\0\3\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\3\5\1\0"+
    "\4\5\3\0\1\67\1\0\1\70\1\0\1\71\1\72"+
    "\1\73\1\0\1\74\1\0\1\75\3\0\1\5\1\74"+
    "\1\5\1\75\4\5\1\0\4\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\2\76\1\5\1\77\1\0\1\5"+
    "\1\100\2\5\1\101\1\102\1\0\1\103\1\104\2\0"+
    "\1\105\1\106\1\107\2\5\1\105\1\106\1\107\1\5"+
    "\1\0\4\5\1\0\1\5\2\110\1\0\2\5\1\0"+
    "\1\5\1\111\1\112\1\113\1\114\2\0\3\5\1\0"+
    "\4\5\1\0\1\5\1\0\2\5\1\0\1\5\2\0"+
    "\3\5\1\0\1\5\1\115\1\116\1\5\2\117\2\120"+
    "\1\0\1\5\1\0\1\5\2\0\3\5\2\121\1\122"+
    "\1\123\1\0\1\5\1\0\1\5\1\124\1\0\1\124"+
    "\1\5\1\125\2\126\1\0\1\5\2\127\2\130";

  private static int [] zzUnpackAction() {
    int [] result = new int[425];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\364\0\u0131\0\u016e"+
    "\0\u01ab\0\u01e8\0\u0225\0\364\0\u0262\0\u029f\0\364\0\u02dc"+
    "\0\u0319\0\u0356\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4"+
    "\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\364\0\364"+
    "\0\364\0\364\0\u066f\0\u06ac\0\364\0\364\0\364\0\364"+
    "\0\364\0\364\0\364\0\364\0\u06e9\0\u0726\0\364\0\364"+
    "\0\u0763\0\u0763\0\u07a0\0\u07dd\0\u081a\0\u081a\0\u0857\0\u0894"+
    "\0\u08d1\0\u090e\0\u094b\0\364\0\u0988\0\u09c5\0\u01e8\0\364"+
    "\0\u0a02\0\u0a3f\0\364\0\364\0\364\0\u0a7c\0\u0ab9\0\364"+
    "\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\364\0\u0bea\0\u01ab\0\u0c27"+
    "\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\364"+
    "\0\364\0\364\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03\0\u0f40"+
    "\0\364\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\u10eb"+
    "\0\u1128\0\u1165\0\u11a2\0\u11df\0\u121c\0\u1259\0\u1296\0\u12d3"+
    "\0\u01e8\0\u1310\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441\0\u147e"+
    "\0\u14bb\0\u14f8\0\u1535\0\u1572\0\u15af\0\u15ec\0\u1629\0\u1666"+
    "\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u1797\0\u17d4\0\u1811\0\u184e"+
    "\0\u188b\0\u18c8\0\u1905\0\u1942\0\u197f\0\u19bc\0\u19f9\0\u1a36"+
    "\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1\0\u1c1e"+
    "\0\u1c5b\0\u1c98\0\u1259\0\364\0\u1cd5\0\u1d12\0\u134d\0\u1d4f"+
    "\0\u1d8c\0\u1dc9\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u1f37"+
    "\0\u1f74\0\u1fb1\0\u1fee\0\u202b\0\u2068\0\u20a5\0\u20e2\0\u211f"+
    "\0\u01ab\0\364\0\u01ab\0\u215c\0\u01ab\0\u2199\0\u21d6\0\u2213"+
    "\0\u2250\0\u228d\0\u22ca\0\u2307\0\u2344\0\u2381\0\u23be\0\u23fb"+
    "\0\u2438\0\u2475\0\364\0\u24b2\0\364\0\u24ef\0\u252c\0\u2569"+
    "\0\u25a6\0\u25e3\0\u2620\0\u265d\0\364\0\u269a\0\364\0\u1cd5"+
    "\0\u26d7\0\u2714\0\u2751\0\u278e\0\u27cb\0\u2808\0\u2845\0\u2882"+
    "\0\u28bf\0\u28fc\0\u2939\0\u2976\0\u29b3\0\u29f0\0\u2a2d\0\u2a6a"+
    "\0\u2aa7\0\u2ae4\0\u2b21\0\u2b5e\0\364\0\u01ab\0\u2b9b\0\u2bd8"+
    "\0\u2c15\0\u2c52\0\u2c8f\0\u2ccc\0\364\0\364\0\u2d09\0\u2d46"+
    "\0\u2d83\0\u2dc0\0\u2dfd\0\364\0\364\0\364\0\u2e3a\0\u2e77"+
    "\0\364\0\u2eb4\0\364\0\u2ef1\0\u2f2e\0\u2f6b\0\u2fa8\0\u2fe5"+
    "\0\u3022\0\u305f\0\u309c\0\u30d9\0\u3116\0\u3153\0\u3190\0\u31cd"+
    "\0\u320a\0\u3247\0\u3284\0\u32c1\0\u32fe\0\u333b\0\u3378\0\u33b5"+
    "\0\u33f2\0\u342f\0\u346c\0\u34a9\0\u34e6\0\u3523\0\u3560\0\u359d"+
    "\0\u35da\0\u3617\0\u3654\0\u3691\0\u36ce\0\u370b\0\u3748\0\u3785"+
    "\0\364\0\u37c2\0\364\0\u37ff\0\364\0\364\0\364\0\u383c"+
    "\0\364\0\u3879\0\364\0\u38b6\0\u38f3\0\u3930\0\u396d\0\u01ab"+
    "\0\u39aa\0\u01ab\0\u39e7\0\u3a24\0\u3a61\0\u3a9e\0\u3adb\0\u3b18"+
    "\0\u3b55\0\u3b92\0\u3bcf\0\u3c0c\0\u3c49\0\u3c86\0\u3cc3\0\u3d00"+
    "\0\u3d3d\0\364\0\u01ab\0\u3d7a\0\u01ab\0\u3db7\0\u3df4\0\u01ab"+
    "\0\u3e31\0\u3e6e\0\364\0\u3eab\0\u3ee8\0\364\0\364\0\u3f25"+
    "\0\u3f62\0\364\0\364\0\364\0\u3f9f\0\u3fdc\0\u01ab\0\u01ab"+
    "\0\u01ab\0\u4019\0\u4056\0\u4093\0\u40d0\0\u410d\0\u414a\0\u4187"+
    "\0\u41c4\0\364\0\u01ab\0\u4201\0\u423e\0\u427b\0\u42b8\0\u42f5"+
    "\0\u01ab\0\u01ab\0\364\0\364\0\u4332\0\u436f\0\u43ac\0\u43e9"+
    "\0\u4426\0\u4463\0\u44a0\0\u44dd\0\u451a\0\u4557\0\u4594\0\u45d1"+
    "\0\u460e\0\u464b\0\u4688\0\u46c5\0\u4702\0\u473f\0\u477c\0\u47b9"+
    "\0\u47f6\0\u4833\0\u4870\0\u48ad\0\u01ab\0\u01ab\0\u48ea\0\364"+
    "\0\u01ab\0\364\0\u01ab\0\u4927\0\u4964\0\u49a1\0\u49de\0\u4a1b"+
    "\0\u4a58\0\u4a95\0\u4ad2\0\u4b0f\0\364\0\u01ab\0\u01ab\0\u01ab"+
    "\0\u4b4c\0\u4b89\0\u4bc6\0\u4c03\0\364\0\u4c40\0\u01ab\0\u4c7d"+
    "\0\u01ab\0\364\0\u01ab\0\u4cba\0\u4cf7\0\364\0\u01ab\0\364"+
    "\0\u01ab";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[425];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\4\1\5\1\6\1\5\1\4\1\5\1\7"+
    "\1\5\1\6\1\4\1\0\1\4\1\5\1\4\1\10"+
    "\1\4\3\5\1\6\2\4\1\0\5\4\1\0\14\4"+
    "\1\5\1\0\3\4\6\5\2\4\2\5\2\4\1\5"+
    "\1\0\1\11\1\5\1\12\1\6\1\5\1\13\1\5"+
    "\1\7\1\5\1\6\1\5\1\0\1\11\1\14\1\5"+
    "\1\15\1\16\1\17\1\20\1\21\1\6\1\22\1\11"+
    "\1\23\1\24\1\25\3\11\1\26\1\27\1\30\1\11"+
    "\1\31\1\32\1\33\2\11\1\34\1\11\1\35\1\11"+
    "\1\36\1\0\1\11\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\5\1\0\2\5\1\12\1\6\1\5\1\55"+
    "\1\5\1\7\1\5\1\6\1\5\1\0\1\5\1\56"+
    "\4\5\1\57\1\60\1\6\2\5\1\61\1\62\1\63"+
    "\2\5\1\64\1\65\1\66\1\67\1\70\1\71\1\5"+
    "\1\72\2\5\1\73\3\5\1\74\1\0\20\5\1\0"+
    "\2\4\3\0\1\4\4\0\1\4\1\0\1\4\1\0"+
    "\1\4\1\0\1\4\4\0\2\4\1\0\5\4\1\0"+
    "\14\4\2\0\3\4\6\0\2\4\2\0\2\4\102\0"+
    "\1\6\111\0\1\75\4\0\1\76\47\0\2\11\3\0"+
    "\1\11\6\0\1\11\11\0\1\11\1\0\5\11\1\0"+
    "\14\11\2\0\1\11\17\0\3\77\1\100\1\0\1\101"+
    "\67\77\6\0\1\13\1\102\140\0\1\103\74\0\1\104"+
    "\74\0\1\105\43\0\1\106\1\0\1\107\73\0\1\110"+
    "\113\0\1\111\33\0\2\11\3\0\1\11\6\0\1\11"+
    "\11\0\1\11\1\0\5\11\1\0\3\11\1\112\10\11"+
    "\2\0\1\11\20\0\2\11\3\0\1\11\6\0\1\11"+
    "\11\0\1\11\1\0\5\11\1\0\4\11\1\113\2\11"+
    "\1\114\4\11\2\0\1\11\66\0\1\115\1\116\25\0"+
    "\2\11\3\0\1\11\6\0\1\11\11\0\1\11\1\0"+
    "\5\11\1\0\10\11\1\117\1\120\2\11\2\0\1\11"+
    "\20\0\2\11\3\0\1\11\6\0\1\11\11\0\1\11"+
    "\1\0\5\11\1\0\7\11\1\121\4\11\2\0\1\11"+
    "\20\0\2\11\3\0\1\11\6\0\1\11\11\0\1\11"+
    "\1\0\1\11\1\122\3\11\1\0\7\11\1\123\4\11"+
    "\2\0\1\11\20\0\2\11\3\0\1\11\6\0\1\11"+
    "\11\0\1\11\1\0\5\11\1\0\3\11\1\124\10\11"+
    "\2\0\1\11\20\0\2\11\3\0\1\11\6\0\1\11"+
    "\11\0\1\11\1\0\5\11\1\0\4\11\1\125\7\11"+
    "\2\0\1\11\20\0\2\11\3\0\1\11\6\0\1\11"+
    "\11\0\1\11\1\0\5\11\1\0\1\11\1\126\12\11"+
    "\2\0\1\11\20\0\2\11\3\0\1\11\6\0\1\11"+
    "\11\0\1\11\1\0\5\11\1\0\3\11\1\127\10\11"+
    "\2\0\1\11\72\0\1\130\103\0\1\131\75\0\1\132"+
    "\17\0\1\55\74\0\1\133\6\0\1\133\14\0\1\133"+
    "\5\0\3\133\4\0\1\133\65\0\1\134\67\0\1\135"+
    "\4\0\1\136\4\0\1\137\67\0\1\140\51\0\1\141"+
    "\16\0\1\142\106\0\1\143\1\0\1\144\57\0\1\145"+
    "\71\0\2\146\101\0\2\147\1\150\1\0\1\151\1\152"+
    "\64\0\1\153\2\0\2\154\1\155\34\0\21\156\1\157"+
    "\1\0\52\156\27\0\1\160\45\0\3\77\1\161\1\0"+
    "\1\101\67\77\4\162\1\0\3\162\5\0\60\162\22\163"+
    "\1\164\52\163\4\107\1\6\2\107\1\0\1\7\64\107"+
    "\44\0\1\165\31\0\2\11\3\0\1\11\6\0\1\11"+
    "\11\0\1\11\1\0\5\11\1\0\5\11\1\166\6\11"+
    "\2\0\1\11\20\0\2\11\3\0\1\11\6\0\1\11"+
    "\11\0\1\11\1\0\5\11\1\0\3\11\1\167\10\11"+
    "\2\0\1\11\20\0\2\11\3\0\1\11\6\0\1\11"+
    "\11\0\1\11\1\0\5\11\1\170\1\171\13\11\2\0"+
    "\1\11\47\0\2\172\44\0\2\11\3\0\1\11\6\0"+
    "\1\11\11\0\1\11\1\172\1\173\4\11\1\0\14\11"+
    "\2\0\1\11\20\0\2\11\3\0\1\11\6\0\1\11"+
    "\11\0\1\11\1\0\5\11\1\174\1\175\13\11\2\0"+
    "\1\11\20\0\2\11\3\0\1\11\6\0\1\11\11\0"+
    "\1\176\1\0\5\11\1\0\14\11\2\0\1\11\20\0"+
    "\2\11\3\0\1\11\6\0\1\11\11\0\1\11\1\177"+
    "\1\200\4\11\1\0\14\11\2\0\1\11\20\0\2\11"+
    "\3\0\1\11\6\0\1\11\11\0\1\11\1\0\4\11"+
    "\1\201\1\0\14\11\2\0\1\11\20\0\2\11\3\0"+
    "\1\11\6\0\1\11\11\0\1\11\1\0\5\11\1\0"+
    "\6\11\1\202\5\11\2\0\1\11\20\0\2\11\3\0"+
    "\1\11\6\0\1\11\11\0\1\11\1\0\5\11\1\0"+
    "\7\11\1\203\4\11\2\0\1\11\20\0\2\11\3\0"+
    "\1\11\6\0\1\11\11\0\1\11\1\0\5\11\1\0"+
    "\5\11\1\204\6\11\2\0\1\11\25\0\1\205\6\0"+
    "\1\205\14\0\1\205\5\0\3\205\4\0\1\205\73\0"+
    "\1\206\62\0\1\207\11\0\1\210\67\0\1\211\75\0"+
    "\1\212\75\0\1\213\1\214\70\0\1\215\72\0\2\174"+
    "\4\0\1\216\62\0\1\217\105\0\1\220\1\221\65\0"+
    "\1\222\103\0\1\223\71\0\1\224\105\0\1\225\67\0"+
    "\1\226\77\0\1\227\72\0\1\230\74\0\1\231\26\0"+
    "\21\156\1\232\74\156\1\232\1\156\1\233\51\156\30\0"+
    "\2\234\52\0\1\235\65\0\22\163\1\236\74\163\1\236"+
    "\1\163\1\237\50\163\32\0\1\240\2\0\1\241\2\0"+
    "\1\242\1\243\2\0\1\244\31\0\2\11\3\0\1\11"+
    "\6\0\1\11\11\0\1\11\1\0\1\11\1\245\2\11"+
    "\1\246\1\0\1\11\1\247\1\250\2\11\1\251\6\11"+
    "\2\0\1\11\20\0\2\11\3\0\1\11\6\0\1\11"+
    "\11\0\1\11\1\0\5\11\1\0\1\11\1\252\12\11"+
    "\2\0\1\11\51\0\1\253\43\0\2\11\3\0\1\11"+
    "\6\0\1\11\11\0\1\11\1\0\1\11\1\254\3\11"+
    "\1\0\14\11\2\0\1\11\61\0\1\255\33\0\2\11"+
    "\3\0\1\11\6\0\1\11\11\0\1\11\1\0\5\11"+
    "\1\0\3\11\1\256\10\11\2\0\1\11\67\0\1\257"+
    "\25\0\2\11\3\0\1\11\6\0\1\11\11\0\1\11"+
    "\1\0\5\11\1\0\11\11\1\260\2\11\2\0\1\11"+
    "\20\0\2\11\3\0\1\11\6\0\1\11\11\0\1\11"+
    "\1\0\2\11\1\261\2\11\1\0\14\11\2\0\1\11"+
    "\61\0\1\262\33\0\2\11\3\0\1\11\6\0\1\11"+
    "\11\0\1\11\1\0\5\11\1\0\3\11\1\263\10\11"+
    "\2\0\1\11\20\0\2\11\3\0\1\11\6\0\1\11"+
    "\11\0\1\11\1\0\5\11\1\0\3\11\1\264\10\11"+
    "\2\0\1\11\20\0\2\11\3\0\1\11\6\0\1\11"+
    "\11\0\1\11\1\0\5\11\1\0\3\11\1\265\10\11"+
    "\2\0\1\11\20\0\2\11\3\0\1\11\6\0\1\11"+
    "\11\0\1\11\1\266\1\267\4\11\1\0\14\11\2\0"+
    "\1\11\20\0\2\11\3\0\1\11\6\0\1\11\11\0"+
    "\1\11\1\0\1\11\1\270\2\11\1\271\1\0\1\11"+
    "\1\272\3\11\1\273\6\11\2\0\1\11\25\0\1\274"+
    "\6\0\1\274\14\0\1\274\5\0\3\274\4\0\1\274"+
    "\71\0\1\275\65\0\1\276\104\0\1\277\71\0\1\300"+
    "\75\0\1\301\74\0\1\302\60\0\1\303\116\0\1\304"+
    "\56\0\1\305\70\0\1\306\62\0\1\307\112\0\1\310"+
    "\101\0\1\311\101\0\1\312\75\0\1\313\72\0\1\314"+
    "\72\0\1\315\47\0\1\316\117\0\1\317\64\0\2\266"+
    "\43\0\21\156\1\232\1\156\1\6\51\156\6\0\1\320"+
    "\66\0\22\163\1\236\1\163\1\6\50\163\33\0\1\321"+
    "\101\0\1\322\102\0\1\323\1\0\1\324\57\0\1\325"+
    "\103\0\1\326\33\0\2\11\3\0\1\11\6\0\1\11"+
    "\11\0\1\11\1\0\2\11\1\327\2\11\1\0\14\11"+
    "\2\0\1\11\20\0\2\11\3\0\1\11\6\0\1\11"+
    "\11\0\1\11\1\0\5\11\1\0\1\11\1\330\12\11"+
    "\2\0\1\11\20\0\2\11\3\0\1\11\6\0\1\11"+
    "\11\0\1\11\1\0\5\11\1\0\7\11\1\331\1\11"+
    "\1\332\2\11\2\0\1\11\20\0\2\11\3\0\1\11"+
    "\6\0\1\11\11\0\1\11\1\0\2\11\1\333\2\11"+
    "\1\0\14\11\2\0\1\11\20\0\2\11\3\0\1\11"+
    "\6\0\1\11\11\0\1\11\1\0\5\11\1\0\3\11"+
    "\1\334\10\11\2\0\1\11\20\0\2\11\3\0\1\11"+
    "\6\0\1\11\11\0\1\11\1\0\5\11\1\0\4\11"+
    "\1\335\7\11\2\0\1\11\73\0\2\336\20\0\2\11"+
    "\3\0\1\11\6\0\1\11\11\0\1\11\1\0\5\11"+
    "\1\0\14\11\1\0\1\336\1\337\62\0\1\340\32\0"+
    "\2\11\3\0\1\11\6\0\1\11\11\0\1\11\1\0"+
    "\5\11\1\0\4\11\1\341\7\11\2\0\1\11\61\0"+
    "\1\342\33\0\2\11\3\0\1\11\6\0\1\11\11\0"+
    "\1\11\1\0\5\11\1\0\3\11\1\343\10\11\2\0"+
    "\1\11\20\0\2\11\3\0\1\11\6\0\1\11\11\0"+
    "\1\11\1\0\5\11\1\0\5\11\1\344\6\11\2\0"+
    "\1\11\61\0\1\345\33\0\2\11\3\0\1\11\6\0"+
    "\1\11\11\0\1\11\1\0\5\11\1\0\3\11\1\346"+
    "\10\11\2\0\1\11\20\0\2\11\3\0\1\11\6\0"+
    "\1\11\11\0\1\11\1\0\2\11\1\347\2\11\1\0"+
    "\14\11\2\0\1\11\20\0\2\11\3\0\1\11\6\0"+
    "\1\11\11\0\1\11\1\0\5\11\1\0\1\11\1\350"+
    "\12\11\2\0\1\11\20\0\2\11\3\0\1\11\6\0"+
    "\1\11\11\0\1\11\1\0\5\11\1\0\7\11\1\351"+
    "\1\11\1\352\2\11\2\0\1\11\20\0\2\11\3\0"+
    "\1\11\6\0\1\11\11\0\1\11\1\0\5\11\1\0"+
    "\3\11\1\353\10\11\2\0\1\11\25\0\1\354\6\0"+
    "\1\354\14\0\1\354\5\0\3\354\4\0\1\354\60\0"+
    "\1\355\77\0\2\356\71\0\1\357\72\0\1\360\77\0"+
    "\1\361\77\0\1\362\76\0\1\363\65\0\1\364\103\0"+
    "\1\365\102\0\1\366\56\0\1\367\110\0\1\370\66\0"+
    "\1\371\67\0\1\372\74\0\1\373\111\0\1\374\70\0"+
    "\1\375\66\0\2\376\4\0\1\377\62\0\1\u0100\105\0"+
    "\1\u0101\103\0\1\u0102\23\0\2\11\3\0\1\11\6\0"+
    "\1\11\11\0\1\11\1\0\5\11\1\0\11\11\1\u0103"+
    "\2\11\2\0\1\11\20\0\2\11\3\0\1\11\6\0"+
    "\1\11\11\0\1\11\1\0\5\11\1\0\5\11\1\u0104"+
    "\6\11\2\0\1\11\20\0\2\11\3\0\1\11\6\0"+
    "\1\11\11\0\1\11\1\0\5\11\1\376\1\u0105\4\11"+
    "\1\u0106\6\11\2\0\1\11\20\0\2\11\3\0\1\11"+
    "\6\0\1\11\11\0\1\11\1\0\1\11\1\u0107\3\11"+
    "\1\0\14\11\2\0\1\11\20\0\2\11\3\0\1\11"+
    "\6\0\1\11\11\0\1\11\1\0\5\11\1\0\4\11"+
    "\1\u0108\7\11\2\0\1\11\20\0\2\11\3\0\1\11"+
    "\6\0\1\11\11\0\1\11\1\0\5\11\1\0\13\11"+
    "\1\u0109\2\0\1\11\20\0\2\11\3\0\1\11\6\0"+
    "\1\11\11\0\1\11\1\0\4\11\1\u010a\1\u010b\1\u010c"+
    "\1\11\1\u010d\2\11\1\u010e\6\11\2\0\1\11\60\0"+
    "\1\u010f\34\0\2\11\3\0\1\11\6\0\1\11\11\0"+
    "\1\11\1\0\5\11\1\0\2\11\1\u0110\11\11\2\0"+
    "\1\11\63\0\1\u0111\31\0\2\11\3\0\1\11\6\0"+
    "\1\11\11\0\1\11\1\0\5\11\1\0\5\11\1\u0112"+
    "\6\11\2\0\1\11\57\0\1\u0113\35\0\2\11\3\0"+
    "\1\11\6\0\1\11\11\0\1\11\1\0\5\11\1\0"+
    "\1\11\1\u0114\12\11\2\0\1\11\20\0\2\11\3\0"+
    "\1\11\6\0\1\11\11\0\1\11\1\0\5\11\1\u0115"+
    "\1\u0116\13\11\2\0\1\11\20\0\2\11\3\0\1\11"+
    "\6\0\1\11\11\0\1\11\1\0\5\11\1\0\11\11"+
    "\1\u0117\2\11\2\0\1\11\20\0\2\11\3\0\1\11"+
    "\6\0\1\11\11\0\1\11\1\0\5\11\1\0\5\11"+
    "\1\u0118\6\11\2\0\1\11\20\0\2\11\3\0\1\11"+
    "\6\0\1\11\11\0\1\11\1\0\5\11\1\u0119\1\u011a"+
    "\4\11\1\u011b\6\11\2\0\1\11\20\0\2\11\3\0"+
    "\1\11\6\0\1\11\11\0\1\11\1\0\1\11\1\u011c"+
    "\3\11\1\0\14\11\2\0\1\11\20\0\2\11\3\0"+
    "\1\11\6\0\1\11\11\0\1\11\1\0\5\11\1\0"+
    "\13\11\1\u011d\2\0\1\11\25\0\1\u011e\6\0\1\u011e"+
    "\14\0\1\u011e\5\0\3\u011e\4\0\1\u011e\75\0\1\u011f"+
    "\66\0\1\u0120\65\0\1\u0121\110\0\1\u0122\75\0\1\u0123"+
    "\62\0\2\u0124\70\0\1\u0125\101\0\1\u0126\1\u0127\77\0"+
    "\1\u0128\57\0\1\u0129\115\0\1\u012a\57\0\1\u012b\70\0"+
    "\1\u012c\62\0\1\u012d\123\0\1\u012e\31\0\2\11\3\0"+
    "\1\11\6\0\1\11\11\0\1\11\1\0\5\11\1\0"+
    "\5\11\1\u012f\6\11\2\0\1\11\20\0\2\11\3\0"+
    "\1\11\6\0\1\11\11\0\1\u0130\1\0\5\11\1\0"+
    "\14\11\2\0\1\11\20\0\2\11\3\0\1\11\6\0"+
    "\1\11\11\0\1\11\1\0\5\11\1\0\11\11\1\u0131"+
    "\2\11\2\0\1\11\20\0\2\11\3\0\1\11\6\0"+
    "\1\11\11\0\1\11\1\0\2\11\1\u0132\2\11\1\0"+
    "\14\11\2\0\1\11\20\0\2\11\3\0\1\11\6\0"+
    "\1\11\11\0\1\u0133\1\0\5\11\1\0\14\11\2\0"+
    "\1\11\20\0\2\11\3\0\1\11\6\0\1\u0134\11\0"+
    "\1\11\1\0\5\11\1\0\14\11\2\0\1\11\20\0"+
    "\2\11\3\0\1\11\6\0\1\11\11\0\1\11\1\0"+
    "\5\11\1\0\5\11\1\u0135\6\11\2\0\1\11\20\0"+
    "\2\11\3\0\1\11\6\0\1\11\11\0\1\11\1\0"+
    "\5\11\1\0\1\11\1\u0136\12\11\2\0\1\11\53\0"+
    "\1\u0137\41\0\2\11\3\0\1\11\6\0\1\11\11\0"+
    "\1\11\1\0\3\11\1\u0138\1\11\1\0\14\11\2\0"+
    "\1\11\20\0\2\11\3\0\1\11\6\0\1\11\11\0"+
    "\1\11\1\0\2\11\1\u0139\2\11\1\0\14\11\2\0"+
    "\1\11\20\0\2\11\3\0\1\11\6\0\1\11\11\0"+
    "\1\11\1\0\5\11\1\0\1\11\1\u013a\1\11\1\u013b"+
    "\10\11\2\0\1\11\52\0\1\u013c\42\0\2\11\3\0"+
    "\1\11\6\0\1\11\11\0\1\11\1\0\2\11\1\u013d"+
    "\2\11\1\0\14\11\2\0\1\11\57\0\1\u013e\35\0"+
    "\2\11\3\0\1\11\6\0\1\11\11\0\1\11\1\0"+
    "\5\11\1\0\1\11\1\u013f\12\11\2\0\1\11\51\0"+
    "\1\u0140\43\0\2\11\3\0\1\11\6\0\1\11\11\0"+
    "\1\11\1\0\1\11\1\u0141\3\11\1\0\14\11\2\0"+
    "\1\11\62\0\1\u0142\32\0\2\11\3\0\1\11\6\0"+
    "\1\11\11\0\1\11\1\0\5\11\1\0\4\11\1\u0143"+
    "\7\11\2\0\1\11\20\0\2\11\3\0\1\11\6\0"+
    "\1\11\11\0\1\11\1\0\5\11\1\0\5\11\1\u0144"+
    "\6\11\2\0\1\11\20\0\2\11\3\0\1\11\6\0"+
    "\1\11\11\0\1\u0145\1\0\5\11\1\0\14\11\2\0"+
    "\1\11\67\0\1\u0146\25\0\2\11\3\0\1\11\6\0"+
    "\1\11\11\0\1\11\1\0\5\11\1\0\11\11\1\u0147"+
    "\2\11\2\0\1\11\20\0\2\11\3\0\1\11\6\0"+
    "\1\11\11\0\1\11\1\0\2\11\1\u0148\2\11\1\0"+
    "\14\11\2\0\1\11\20\0\2\11\3\0\1\11\6\0"+
    "\1\11\11\0\1\u0149\1\0\5\11\1\0\14\11\2\0"+
    "\1\11\20\0\2\11\3\0\1\11\6\0\1\11\11\0"+
    "\1\11\1\0\5\11\1\0\5\11\1\u014a\6\11\2\0"+
    "\1\11\25\0\1\u014b\6\0\1\u014b\14\0\1\u014b\5\0"+
    "\3\u014b\4\0\1\u014b\65\0\1\u014c\77\0\1\u014d\64\0"+
    "\1\u014e\74\0\1\u014f\103\0\1\u0150\74\0\1\u0151\65\0"+
    "\1\u0152\103\0\1\u0153\65\0\1\u0154\42\0\2\11\3\0"+
    "\1\11\6\0\1\11\11\0\1\11\1\0\5\11\1\0"+
    "\3\11\1\u0155\10\11\2\0\1\11\20\0\2\11\3\0"+
    "\1\11\6\0\1\11\11\0\1\11\1\0\5\11\1\0"+
    "\3\11\1\u0156\10\11\2\0\1\11\20\0\2\11\3\0"+
    "\1\11\6\0\1\11\11\0\1\11\1\0\2\11\1\u0157"+
    "\2\11\1\0\14\11\2\0\1\11\20\0\2\11\3\0"+
    "\1\11\6\0\1\11\11\0\1\11\1\0\5\11\1\0"+
    "\3\11\1\u0158\10\11\2\0\1\11\20\0\2\11\3\0"+
    "\1\11\6\0\1\11\11\0\1\11\1\0\2\11\1\u0159"+
    "\2\11\1\0\14\11\2\0\1\11\20\0\2\11\3\0"+
    "\1\11\6\0\1\11\11\0\1\11\1\0\5\11\1\0"+
    "\4\11\1\u015a\7\11\2\0\1\11\57\0\1\u015b\35\0"+
    "\2\11\3\0\1\11\6\0\1\11\11\0\1\11\1\0"+
    "\5\11\1\0\1\11\1\u015c\12\11\2\0\1\11\20\0"+
    "\2\11\3\0\1\11\6\0\1\11\11\0\1\11\1\0"+
    "\5\11\1\0\5\11\1\u015d\6\11\2\0\1\11\20\0"+
    "\2\11\3\0\1\11\6\0\1\11\11\0\1\11\1\0"+
    "\5\11\1\0\2\11\1\u015e\11\11\2\0\1\11\20\0"+
    "\2\11\3\0\1\11\6\0\1\11\11\0\1\11\1\0"+
    "\5\11\1\0\13\11\1\u015f\2\0\1\11\63\0\1\u0160"+
    "\31\0\2\11\3\0\1\11\6\0\1\11\11\0\1\11"+
    "\1\0\5\11\1\0\5\11\1\u0161\6\11\2\0\1\11"+
    "\62\0\1\u0162\32\0\2\11\3\0\1\11\6\0\1\11"+
    "\11\0\1\11\1\0\5\11\1\0\4\11\1\u0163\7\11"+
    "\2\0\1\11\55\0\2\u0164\36\0\2\11\3\0\1\11"+
    "\6\0\1\11\11\0\1\11\1\0\5\11\1\u0164\1\u0165"+
    "\13\11\2\0\1\11\20\0\2\11\3\0\1\11\6\0"+
    "\1\11\11\0\1\11\1\0\5\11\1\0\3\11\1\u0166"+
    "\10\11\2\0\1\11\61\0\1\u0167\33\0\2\11\3\0"+
    "\1\11\6\0\1\11\11\0\1\11\1\0\5\11\1\0"+
    "\3\11\1\u0168\10\11\2\0\1\11\20\0\2\11\3\0"+
    "\1\11\6\0\1\11\11\0\1\11\1\0\2\11\1\u0169"+
    "\2\11\1\0\14\11\2\0\1\11\20\0\2\11\3\0"+
    "\1\11\6\0\1\11\11\0\1\11\1\0\2\11\1\u016a"+
    "\2\11\1\0\14\11\2\0\1\11\51\0\1\u016b\102\0"+
    "\1\u016c\104\0\1\u016d\64\0\1\u016e\35\0\2\11\3\0"+
    "\1\11\6\0\1\11\11\0\1\11\1\0\5\11\1\0"+
    "\11\11\1\u016f\2\11\2\0\1\11\20\0\2\11\3\0"+
    "\1\11\6\0\1\11\11\0\1\11\1\0\5\11\1\0"+
    "\1\11\1\u0170\12\11\2\0\1\11\20\0\2\11\3\0"+
    "\1\11\6\0\1\11\11\0\1\11\1\0\5\11\1\0"+
    "\4\11\1\u0171\7\11\2\0\1\11\70\0\1\u0172\24\0"+
    "\2\11\3\0\1\11\6\0\1\11\11\0\1\11\1\0"+
    "\5\11\1\0\12\11\1\u0173\1\11\2\0\1\11\20\0"+
    "\2\11\3\0\1\11\6\0\1\11\11\0\1\11\1\0"+
    "\2\11\1\u0174\2\11\1\0\14\11\2\0\1\11\20\0"+
    "\2\11\3\0\1\11\6\0\1\11\11\0\1\11\1\0"+
    "\5\11\1\0\7\11\1\u0175\4\11\2\0\1\11\20\0"+
    "\2\11\3\0\1\11\6\0\1\11\11\0\1\11\1\0"+
    "\5\11\1\0\5\11\1\u0176\6\11\2\0\1\11\52\0"+
    "\1\u0177\42\0\2\11\3\0\1\11\6\0\1\11\11\0"+
    "\1\11\1\0\2\11\1\u0178\2\11\1\0\14\11\2\0"+
    "\1\11\52\0\1\u0179\42\0\2\11\3\0\1\11\6\0"+
    "\1\11\11\0\1\11\1\0\2\11\1\u017a\2\11\1\0"+
    "\14\11\2\0\1\11\20\0\2\11\3\0\1\11\6\0"+
    "\1\11\11\0\1\11\1\0\5\11\1\0\11\11\1\u017b"+
    "\2\11\2\0\1\11\57\0\1\u017c\35\0\2\11\3\0"+
    "\1\11\6\0\1\11\11\0\1\11\1\0\5\11\1\0"+
    "\1\11\1\u017d\12\11\2\0\1\11\55\0\2\u017e\67\0"+
    "\1\u017f\43\0\2\11\3\0\1\11\6\0\1\11\11\0"+
    "\1\11\1\0\5\11\1\u017e\1\u0180\13\11\2\0\1\11"+
    "\20\0\2\11\3\0\1\11\6\0\1\11\11\0\1\11"+
    "\1\0\1\11\1\u0181\3\11\1\0\14\11\2\0\1\11"+
    "\20\0\2\11\3\0\1\11\6\0\1\11\11\0\1\11"+
    "\1\0\5\11\1\0\1\11\1\u0182\12\11\2\0\1\11"+
    "\61\0\1\u0183\33\0\2\11\3\0\1\11\6\0\1\11"+
    "\11\0\1\11\1\0\5\11\1\0\3\11\1\u0184\10\11"+
    "\2\0\1\11\20\0\2\11\3\0\1\11\6\0\1\11"+
    "\11\0\1\11\1\0\5\11\1\0\11\11\1\u0185\2\11"+
    "\2\0\1\11\20\0\2\11\3\0\1\11\6\0\1\11"+
    "\11\0\1\11\1\0\5\11\1\0\1\11\1\u0186\12\11"+
    "\2\0\1\11\20\0\2\11\3\0\1\11\6\0\1\11"+
    "\11\0\1\11\1\0\2\11\1\u0187\2\11\1\0\14\11"+
    "\2\0\1\11\67\0\1\u0188\25\0\2\11\3\0\1\11"+
    "\6\0\1\11\11\0\1\11\1\0\5\11\1\0\11\11"+
    "\1\u0189\2\11\2\0\1\11\67\0\1\u018a\25\0\2\11"+
    "\3\0\1\11\6\0\1\11\11\0\1\11\1\0\5\11"+
    "\1\0\11\11\1\u018b\2\11\2\0\1\11\20\0\2\11"+
    "\3\0\1\11\6\0\1\11\11\0\1\11\1\0\5\11"+
    "\1\u018c\1\u018d\13\11\2\0\1\11\51\0\1\u018e\43\0"+
    "\2\11\3\0\1\11\6\0\1\11\11\0\1\11\1\0"+
    "\1\11\1\u018f\3\11\1\0\14\11\2\0\1\11\34\0"+
    "\1\u0190\115\0\2\u0191\36\0\2\11\3\0\1\11\6\0"+
    "\1\u0192\11\0\1\11\1\0\5\11\1\0\14\11\2\0"+
    "\1\11\20\0\2\11\3\0\1\11\6\0\1\11\11\0"+
    "\1\11\1\0\5\11\1\u0191\1\u0193\13\11\2\0\1\11"+
    "\20\0\2\11\3\0\1\11\6\0\1\11\11\0\1\11"+
    "\1\0\5\11\1\0\10\11\1\u0194\3\11\2\0\1\11"+
    "\67\0\1\u0195\25\0\2\11\3\0\1\11\6\0\1\11"+
    "\11\0\1\11\1\0\5\11\1\0\11\11\1\u0196\2\11"+
    "\2\0\1\11\20\0\2\11\3\0\1\11\6\0\1\11"+
    "\11\0\1\11\1\0\5\11\1\0\1\11\1\u0197\1\u0198"+
    "\11\11\2\0\1\11\34\0\1\u0199\60\0\2\11\3\0"+
    "\1\11\6\0\1\u019a\11\0\1\11\1\0\5\11\1\0"+
    "\14\11\2\0\1\11\55\0\2\u019b\36\0\2\11\3\0"+
    "\1\11\6\0\1\11\11\0\1\11\1\0\5\11\1\u019b"+
    "\1\u019c\13\11\2\0\1\11\52\0\1\u019d\74\0\1\u019e"+
    "\42\0\2\11\3\0\1\11\6\0\1\11\11\0\1\11"+
    "\1\0\2\11\1\u019f\2\11\1\0\14\11\2\0\1\11"+
    "\20\0\2\11\3\0\1\11\6\0\1\11\11\0\1\11"+
    "\1\0\2\11\1\u01a0\2\11\1\0\14\11\2\0\1\11"+
    "\20\0\2\11\3\0\1\11\6\0\1\11\11\0\1\11"+
    "\1\0\2\11\1\u01a1\2\11\1\0\14\11\2\0\1\11"+
    "\52\0\1\u01a2\42\0\2\11\3\0\1\11\6\0\1\11"+
    "\11\0\1\11\1\0\2\11\1\u01a3\2\11\1\0\14\11"+
    "\2\0\1\11\52\0\1\u01a4\42\0\2\11\3\0\1\11"+
    "\6\0\1\11\11\0\1\11\1\0\2\11\1\u01a5\2\11"+
    "\1\0\14\11\2\0\1\11\67\0\1\u01a6\25\0\2\11"+
    "\3\0\1\11\6\0\1\11\11\0\1\11\1\0\5\11"+
    "\1\0\11\11\1\u01a7\2\11\2\0\1\11\67\0\1\u01a8"+
    "\25\0\2\11\3\0\1\11\6\0\1\11\11\0\1\11"+
    "\1\0\5\11\1\0\11\11\1\u01a9\2\11\2\0\1\11"+
    "\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19764];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\1\2\11\5\1\1\11\2\1\1\11\3\1"+
    "\1\0\2\1\1\0\10\1\4\11\2\1\10\11\2\1"+
    "\2\11\1\0\3\1\1\0\6\1\1\11\3\0\1\11"+
    "\2\0\3\11\1\0\1\1\1\11\1\0\3\1\1\11"+
    "\1\0\11\1\3\11\6\0\1\11\17\0\1\1\4\0"+
    "\2\1\1\0\1\1\1\0\1\1\1\0\2\1\1\0"+
    "\5\1\26\0\1\1\1\11\2\0\1\1\5\0\6\1"+
    "\1\0\1\1\1\0\1\1\1\0\2\1\1\11\3\1"+
    "\1\0\5\1\7\0\1\11\1\0\1\11\7\0\1\11"+
    "\1\0\1\11\1\1\6\0\7\1\1\0\1\1\1\0"+
    "\1\1\1\0\2\1\1\11\6\1\1\0\2\11\5\0"+
    "\3\11\2\0\1\11\1\1\1\11\7\0\10\1\1\0"+
    "\3\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\3\1\1\0\4\1\3\0\1\11\1\0\1\11\1\0"+
    "\3\11\1\0\1\11\1\0\1\11\3\0\10\1\1\0"+
    "\4\1\1\0\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\3\1\1\0\4\1\1\11\1\1\1\0\2\11\2\0"+
    "\3\11\6\1\1\0\4\1\1\0\1\1\1\11\1\1"+
    "\1\0\2\1\1\0\3\1\2\11\2\0\3\1\1\0"+
    "\4\1\1\0\1\1\1\0\2\1\1\0\1\1\2\0"+
    "\3\1\1\0\4\1\1\11\1\1\1\11\1\1\1\0"+
    "\1\1\1\0\1\1\2\0\3\1\1\11\3\1\1\0"+
    "\1\1\1\0\1\1\1\11\1\0\3\1\1\11\1\1"+
    "\1\0\1\1\1\11\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[425];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public ArrayList<Esemanticos> ErroresLexicos = new ArrayList<Esemanticos> ();
    
    //Generar un java_cup.symbol para guardar el tipo de token encontrado
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }
    
    //Generar un symbol para el tipo de token encontrado junto con su valor
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Parser(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return symbol(sym.paragraph, yytext());
            }
          case 89: break;
          case 2: 
            { System.err.println("Este es un error lexico: "+yytext()+", en la linea: "+yyline+", en la columna: "+yychar);
                Esemanticos e = new Esemanticos(String.valueOf(yytext()),"Lexico",(int)yyline+1,(int)yychar, "Caracter Invalido");
                ErroresLexicos.add(e);
            }
          case 90: break;
          case 3: 
            { /* Ignore */
            }
          case 91: break;
          case 4: 
            { yybegin(TAG); return symbol(sym.open, yytext());
            }
          case 92: break;
          case 5: 
            { return symbol(sym.identificador, yytext());
            }
          case 93: break;
          case 6: 
            { return symbol(sym.ddq, yytext());
            }
          case 94: break;
          case 7: 
            { return symbol(sym.entero, yytext());
            }
          case 95: break;
          case 8: 
            { return symbol(sym.hashtag, yytext());
            }
          case 96: break;
          case 9: 
            { return symbol(sym.menor, yytext());
            }
          case 97: break;
          case 10: 
            { return symbol(sym.not, yytext());
            }
          case 98: break;
          case 11: 
            { return symbol(sym.asterisk, yytext());
            }
          case 99: break;
          case 12: 
            { return symbol(sym.mayor, yytext());
            }
          case 100: break;
          case 13: 
            { return symbol(sym.div, yytext());
            }
          case 101: break;
          case 14: 
            { return symbol(sym.equal, yytext());
            }
          case 102: break;
          case 15: 
            { return symbol(sym.semicolon, yytext());
            }
          case 103: break;
          case 16: 
            { return symbol(sym.dolar, yytext());
            }
          case 104: break;
          case 17: 
            { return symbol(sym.plus, yytext());
            }
          case 105: break;
          case 18: 
            { return symbol(sym.hypen, yytext());
            }
          case 106: break;
          case 19: 
            { return symbol(sym.ollv, yytext());
            }
          case 107: break;
          case 20: 
            { return symbol(sym.cllv, yytext());
            }
          case 108: break;
          case 21: 
            { return symbol(sym.opar, yytext());
            }
          case 109: break;
          case 22: 
            { return symbol(sym.cpar, yytext());
            }
          case 110: break;
          case 23: 
            { return symbol(sym.ocorch, yytext());
            }
          case 111: break;
          case 24: 
            { return symbol(sym.ccorch, yytext());
            }
          case 112: break;
          case 25: 
            { return symbol(sym.comma, yytext());
            }
          case 113: break;
          case 26: 
            { return symbol(sym.dot, yytext());
            }
          case 114: break;
          case 27: 
            { yybegin(YYINITIAL); return symbol(sym.close, yytext());
            }
          case 115: break;
          case 28: 
            { return symbol(sym.cadena, yytext());
            }
          case 116: break;
          case 29: 
            { return symbol(sym.menorque, yytext());
            }
          case 117: break;
          case 30: 
            { return symbol(sym.diferente, yytext());
            }
          case 118: break;
          case 31: 
            { return symbol(sym.mayorque, yytext());
            }
          case 119: break;
          case 32: 
            { yybegin(YYINITIAL); return symbol(sym.endHS, yytext());
            }
          case 120: break;
          case 33: 
            { return symbol(sym.if_, yytext());
            }
          case 121: break;
          case 34: 
            { return symbol(sym.igualque, yytext());
            }
          case 122: break;
          case 35: 
            { return symbol(sym.and, yytext());
            }
          case 123: break;
          case 36: 
            { return symbol(sym.or, yytext());
            }
          case 124: break;
          case 37: 
            { return symbol(sym.id, yytext());
            }
          case 125: break;
          case 38: 
            { yybegin(HSC); return symbol(sym.beginHS, yytext());
            }
          case 126: break;
          case 39: 
            { return symbol(sym.echo, yytext());
            }
          case 127: break;
          case 40: 
            { return symbol(sym.else_, yytext());
            }
          case 128: break;
          case 41: 
            { return symbol(sym.true_, yytext());
            }
          case 129: break;
          case 42: 
            { return symbol(sym.path, yytext());
            }
          case 130: break;
          case 43: 
            { return symbol(sym.alto, yytext());
            }
          case 131: break;
          case 44: 
            { return symbol(sym.fila, yytext());
            }
          case 132: break;
          case 45: 
            { return symbol(sym.decimal, yytext());
            }
          case 133: break;
          case 46: 
            { return symbol(sym.false_, yytext());
            }
          case 134: break;
          case 47: 
            { return symbol(sym.salto, yytext());
            }
          case 135: break;
          case 48: 
            { return symbol(sym.compi, yytext());
            }
          case 136: break;
          case 49: 
            { return symbol(sym.ancho, yytext());
            }
          case 137: break;
          case 50: 
            { return symbol(sym.borde, yytext());
            }
          case 138: break;
          case 51: 
            { return symbol(sym.boton, yytext());
            }
          case 139: break;
          case 52: 
            { return symbol(sym.tabla, yytext());
            }
          case 140: break;
          case 53: 
            { return symbol(sym.texto, yytext());
            }
          case 141: break;
          case 54: 
            { return symbol(sym.fondo, yytext());
            }
          case 142: break;
          case 55: 
            { return symbol(sym.cuerpo, yytext());
            }
          case 143: break;
          case 56: 
            { return symbol(sym.imagen, yytext());
            }
          case 144: break;
          case 57: 
            { return symbol(sym.titulo, yytext());
            }
          case 145: break;
          case 58: 
            { return symbol(sym.textoa, yytext());
            }
          case 146: break;
          case 59: 
            { return symbol(sym.textob, yytext());
            }
          case 147: break;
          case 60: 
            { return symbol(sym.setpath, yytext());
            }
          case 148: break;
          case 61: 
            { return symbol(sym.setalto, yytext());
            }
          case 149: break;
          case 62: 
            { return symbol(sym.repetir, yytext());
            }
          case 150: break;
          case 63: 
            { return symbol(sym.getpath, yytext());
            }
          case 151: break;
          case 64: 
            { return symbol(sym.getalto, yytext());
            }
          case 152: break;
          case 65: 
            { return symbol(sym.rgb, yytext());
            }
          case 153: break;
          case 66: 
            { return symbol(sym.columna, yytext());
            }
          case 154: break;
          case 67: 
            { return symbol(sym.parrafo, yytext());
            }
          case 155: break;
          case 68: 
            { return symbol(sym.espacio, yytext());
            }
          case 156: break;
          case 69: 
            { return symbol(sym.setancho, yytext());
            }
          case 157: break;
          case 70: 
            { return symbol(sym.setborde, yytext());
            }
          case 158: break;
          case 71: 
            { return symbol(sym.settexto, yytext());
            }
          case 159: break;
          case 72: 
            { return symbol(sym.insertar, yytext());
            }
          case 160: break;
          case 73: 
            { return symbol(sym.getancho, yytext());
            }
          case 161: break;
          case 74: 
            { return symbol(sym.gettexto, yytext());
            }
          case 162: break;
          case 75: 
            { return symbol(sym.columnac, yytext());
            }
          case 163: break;
          case 76: 
            { return symbol(sym.cabecera, yytext());
            }
          case 164: break;
          case 77: 
            { return symbol(sym.crearboton, yytext());
            }
          case 165: break;
          case 78: 
            { return symbol(sym.creartabla, yytext());
            }
          case 166: break;
          case 79: 
            { return symbol(sym.clickboton, yytext());
            }
          case 167: break;
          case 80: 
            { return symbol(sym.alineacion, yytext());
            }
          case 168: break;
          case 81: 
            { return symbol(sym.crearimagen, yytext());
            }
          case 169: break;
          case 82: 
            { return symbol(sym.creartextoa, yytext());
            }
          case 170: break;
          case 83: 
            { return symbol(sym.creartextob, yytext());
            }
          case 171: break;
          case 84: 
            { return symbol(sym.setcontenido, yytext());
            }
          case 172: break;
          case 85: 
            { return symbol(sym.crearparrafo, yytext());
            }
          case 173: break;
          case 86: 
            { return symbol(sym.getcontenido, yytext());
            }
          case 174: break;
          case 87: 
            { return symbol(sym.setalineacion, yytext());
            }
          case 175: break;
          case 88: 
            { return symbol(sym.getalineacion, yytext());
            }
          case 176: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
