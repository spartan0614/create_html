//                             CODIGO USUARIO
package analyzers;
import rootcode.*;
import java.io.FileReader;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.ArrayList;

//                  CÓDIGO PARSER, VARIABLES Y MÉTODOS
parser code
{:
    public String resultado ="";

    //Lista de variables Globaless
    public LinkedList<Variable> lista_variables = new LinkedList<Variable> ();

    //Lista de Errores
    public ArrayList<Esemanticos> ErroresSintacticos = new ArrayList<Esemanticos> ();

    public int getValor(String valor){
        if(valor.indexOf('.') == -1){  
            return Integer.parseInt(valor);
        }else{                          
            return (int) Double.parseDouble(valor);
        }
    }

    public String getTipo(String valor){
        if(valor.equals("false")){
            return "Booleano";
        }else if(valor.equals("true")){
            return "Booleano";
        }else if(valor.indexOf('"') >= 0){  //contiene comillas dobles 
            return "Cadena";
        }else if(valor.indexOf('.') >= 0){  //contiene un punto decimal
            return "Decimal";
        }else{
            return "Entero";
        }
    }

    //Metodo al que se llama automaticamente ante algún error sintáctico
    public void syntax_error(Symbol s)
    {        
        System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        Esemanticos e = new Esemanticos(String.valueOf(s.value),"Sintactico", s.left + 1, s.right, "No se esperaba ese valor");
        ErroresSintacticos.add(e);
    }
 

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");
        Esemanticos e = new Esemanticos(String.valueOf(s.value),"Sintactico", s.left + 1, s.right, "No se esperaba ese valor");
        ErroresSintacticos.add(e);
    }
:}

//                  CÓDIGO PARA ACCIONES GRAMATICALES
action code
{::}

//              TERMINALES (tokens retornados por el Scanner). 
terminal String open, paragraph, close, div, ddq, rgb, compi, cabecera, titulo, cuerpo, parrafo, salto, crearparrafo,
                tabla, fila, columnac, columna, imagen, textoa, textob, boton, espacio, fondo, alineacion, path, getcontenido,
                alto, ancho, id, texto, borde, true_, false_, semicolon, dolar, equal, plus, hypen, asterisk, dot, numero,
                menor, mayor, menorque, mayorque, diferente, igualque, and, or, not, ollv, cllv, opar, cpar, hashtag, 
                ocorch, ccorch, comma, identificador, cadena, echo, if_, else_, repetir, setcontenido, 
                setalineacion,  getpath, beginHS, getalineacion, creartextoa, creartextob, crearimagen, insertar, clickboton,
                getancho, setpath, setalto, endHS, setancho, getalto, creartabla,setborde, crearboton, settexto, gettexto 
                ;


//                              NO TERMINALES
non terminal String     S, START, HEADER, BODY, ATRIBUTO_CUERPO, CONTENIDO, CONT, ESPACIO, PARRAFO,
                        ATRIBUTO_PARRA, TEXTOA, TEXTOB, IMAGEN, ATRIBUTOS_IMAGEN, ATRI_IMAGE, PARRA,
                        BOTON, ATRIBUTOS_BOTON, ATRI_BTN, TABLA, ATRIBUTO_TABLA, LISTA_FILAS, FILA,
                        LISTA_COLUMNA, COLUMNA, SCRIPTHS, CUERPO_HSC, SCRIPT, DECLARACION, IMPRESION,
                        LISTA_IMPRESION, VALOR_STRING, IF, IF_OPCION, ELSE, REPETIR, STRUCT, LIST_ROWS,
                        ROW, LIST_COLUMN, SET, GET, VALOR_BOOLEANO, EXP, VALOR, CUERPO_SENTENCIA, G,
                        SENTENCIA
                        ;


//                 --     PRECEDENCIA DE OPERADORES     --
precedence left or, dot;
precedence left and;
precedence left not;
precedence left menor, mayor, menorque, mayorque, diferente, igualque;
precedence left plus, hypen;
precedence left asterisk, div;

//                          --    GRAMATICA    --

start with S;

S                   ::= START:a                                                                 {:  resultado =  a; :}
                    ;

START               ::= open:a compi close:b HEADER:c BODY:d open:e div:f compi close:g         {: 
                                                                                                    RESULT = a + "HTML" + b + "\n" +
                                                                                                            c + "\n" +
                                                                                                            d + "\n" +
                                                                                                            e + f + "HTML" + g; 
                                                                                                :}
                    ;

HEADER              ::= open:a cabecera close:b open:c titulo close:d PARRA:p open:e div:f titulo close:g open:h div:i cabecera close:j  
                                                                                                {:
                                                                                                    RESULT = a + "HEAD" + b + "\n" +
                                                                                                            "  " + c + "TITLE" + d + p + e + f + "TITLE" + g + "\n" +
                                                                                                            h + i + "HEAD" + j;
                                                                                                :}
                    ;

BODY                ::= open:a cuerpo ATRIBUTO_CUERPO:b close:c CONTENIDO:d open:e div:f cuerpo close:g 
                                                                                                {:
                                                                                                    RESULT = a + "BODY" + " " + b + c + "\n" +
                                                                                                            d + "\n" +
                                                                                                            e + f + "BODY" + g;
                                                                                                :}
                    |   open:a cuerpo close:b CONTENIDO:c open:d div:e cuerpo close:f           {:
                                                                                                    RESULT = a + "BODY" + b + "\n" +
                                                                                                            c + "\n" +
                                                                                                            d + e + "BODY" + f;
                                                                                                :}
                    ;

ATRIBUTO_CUERPO     ::= fondo equal:a cadena:b                                                  {: RESULT = "bgcolor" + a + b; :}                                                              
                    |   fondo equal:a ddq:b rgb:c ddq:d                                         {: RESULT = "bgcolor" + a + b + c + d; :}
                    ;

CONTENIDO           ::= CONTENIDO:a CONT:b                                                      {: RESULT = a + " " + b; :}
                    |   CONT:a                                                                  {: RESULT = a; :}
                    ;

CONT                ::= ESPACIO:a                                                               {: RESULT = a; :}
                    |   PARRAFO:a                                                               {: RESULT = a; :}
                    |   paragraph:a                                                             {: RESULT = a; :}
                    |   open:a div salto close:c                                                {: RESULT = a + "br" + c + "\n";  :}
                    |   TEXTOA:a                                                                {: RESULT = a; :}
                    |   TEXTOB:a                                                                {: RESULT = a; :}
                    |   IMAGEN:a                                                                {: RESULT = a; :}
                    |   BOTON:a                                                                 {: RESULT = a; :}
                    |   TABLA:a                                                                 {: RESULT = a; :}
                    |   SCRIPTHS
                    |   error close
                    ;

ESPACIO             ::= open:a espacio close:b CONTENIDO:c open:d div:e espacio close:f         {:
                                                                                                    RESULT = a + "DIV" + b + "\n" +
                                                                                                            c + "\n" +
                                                                                                            d + e + "DIV" + f + "\n";
                                                                                                :}                     
                    ;

PARRAFO             ::= open:a parrafo ATRIBUTO_PARRA:b close:c PARRA:d open:e div:f parrafo close:g    
                                                                                                {:
                                                                                                    RESULT = a + "p" + " " + b + c + "\n" +
                                                                                                            d + "\n" +
                                                                                                            e + f + "p" + g + "\n";
                                                                                                :}
                    |   open:a parrafo close:b PARRA:c open:d div:e parrafo close:f             {:  
                                                                                                    RESULT = a + "p" + b + "\n" +
                                                                                                            c + "\n" +
                                                                                                            d + e + "p" + f + "\n";
                                                                                                :}
                    ;

PARRA               ::= PARRA:a G:b                                                             {: RESULT = a + " " + b; :}
                    |   G:a                                                                     {: RESULT = a; :}
                    ;

G                   ::= paragraph:a                                                             {: RESULT = a;  :}                                                                   
                    |   open:a div salto close:c                                                {: RESULT = a + "br" + c + "\n"; :}
                    ;
                    
ATRIBUTO_PARRA      ::= alineacion equal:a cadena:b                                             {: RESULT = "align" + a + b; :}
                    ;

TEXTOA              ::= open:a textoa close:b PARRA:c open:d div:e textoa close:f               {: RESULT = a + "h1" + b + c + d + e + "h1" + f; :}
                    ;

TEXTOB              ::= open:a textob close:b PARRA:c open:d div:e textob close:f               {: RESULT = a + "h2" + b + c + d + e + "h2" + f; :}
                    ;

IMAGEN              ::= open:a imagen ATRIBUTOS_IMAGEN:b close:c open div imagen close          {: RESULT = a + "img" + b + c; :}
                    ;

ATRIBUTOS_IMAGEN    ::= ATRIBUTOS_IMAGEN:a ATRI_IMAGE:b                                         {: RESULT = a + " " + b; :}
                    |   ATRI_IMAGE:a                                                            {: RESULT = a; :}
                    ;

ATRI_IMAGE          ::= path equal:a cadena:b                                                   {: RESULT = "src" + a + b; :}
                    |   alto equal:a numero:b                                                   {: RESULT = "height" + a + "\"" + b + "\""; :}
                    |   ancho equal:a numero:b                                                  {: RESULT = "width" + a + "\"" + b + "\""; :}
                    ;

BOTON               ::= open:a boton ATRIBUTOS_BOTON:b close:c open div boton close             {: RESULT = a + "input type=\"button\"" + " " + b + c; :}
                    ;

ATRIBUTOS_BOTON     ::= ATRIBUTOS_BOTON:a ATRI_BTN:b                                            {: RESULT = a + " " + b; :}
                    |   ATRI_BTN:a                                                              {: RESULT = a; :}
                    ;

ATRI_BTN            ::= id equal:a cadena:b                                                     {: RESULT = "name" + a + b; :}
                    |   texto equal:a cadena:b                                                  {: RESULT = "value" + a + b; :}
                    ;

TABLA               ::= open:a tabla ATRIBUTO_TABLA:b close:c LISTA_FILAS:d open:e div:f tabla close:g        
                                                                                                {: 
                                                                                                    RESULT = a + "TABLE" + " " + b + c + "\n" +
                                                                                                            d + "\n" +
                                                                                                            e + f + "TABLE" + g;
                                                                                                :}
                    |   open:a tabla close:b LISTA_FILAS:c open:d div:e tabla close:f           {:  
                                                                                                    RESULT = a + "TABLE" + b + "\n" +
                                                                                                            c + "\n" +
                                                                                                            d + e + "TABLE" + f + "\n";
                                                                                                :}
                    ;

ATRIBUTO_TABLA      ::= borde equal true_                                                       {: RESULT = "border = \"1\""; :}
                    |   borde equal false_                                                      {: RESULT = ""; :}
                    ;

LISTA_FILAS         ::= LISTA_FILAS:a FILA:b                                                    {: RESULT = a + b; :}
                    |   FILA:a                                                                  {: RESULT = a; :}
                    ;

FILA                ::= open:a fila close:b LISTA_COLUMNA:c open:d div:e fila close:f           {:  
                                                                                                    RESULT = a + "tr" + b + "\n" +
                                                                                                            c + "\n" +
                                                                                                            d + e + "tr" + f + "\n";
                                                                                                :}
                    ;

LISTA_COLUMNA       ::= LISTA_COLUMNA:a COLUMNA:b                                               {: RESULT = a + b; :}
                    |   COLUMNA:a                                                               {: RESULT = a; :}
                    ;

COLUMNA             ::= open:a columnac close:b CONTENIDO:c open:d div:e columnac close:f       {: 
                                                                                                    RESULT = a + "th" + b + c + d + e + "th" + f + "\n";
                                                                                                :} 
                    |   open:a columna close:b CONTENIDO:c open:d div:e columna close:f         {:  
                                                                                                    RESULT = a + "td" + b + c + d + e + "td" + f + "\n";
                                                                                                :}
                    ;

/***********************************************************************************************************************************************************/

SCRIPTHS            ::= beginHS CUERPO_HSC endHS
                    ;

CUERPO_HSC          ::= CUERPO_HSC SCRIPT
                    |   SCRIPT
                    ;

SCRIPT              ::= DECLARACION
                    |   IMPRESION
                    |   IF
                    |   REPETIR
                    |   hashtag identificador equal STRUCT semicolon
                    |   hashtag identificador dot SET semicolon
                    |   hashtag identificador dot insertar opar cpar semicolon
                    |   error semicolon
                    ;

DECLARACION         ::= dolar identificador:a equal EXP:b semicolon                             {:
                                                                                                    String tipo = getTipo(b);
                                                                                                    Variable v = new Variable(tipo,a, b);
                                                                                                    lista_variables.add(v);
                                                                                                :}
                    |   dolar identificador equal hashtag identificador dot GET semicolon       {::}
                    ;

IMPRESION           ::= echo LISTA_IMPRESION semicolon
                    ;

LISTA_IMPRESION     ::= LISTA_IMPRESION dot VALOR_STRING
                    |   VALOR_STRING
                    ;

VALOR_STRING        ::= cadena
                    |   dolar identificador
                    ;

CUERPO_SENTENCIA    ::= CUERPO_SENTENCIA SENTENCIA
                    |   SENTENCIA
                    ;

SENTENCIA           ::= IMPRESION
                    |   IF
                    |   REPETIR
                    ;

IF                  ::= if_ opar EXP cpar ollv CUERPO_SENTENCIA IF_OPCION
                    ;

IF_OPCION           ::= ELSE cllv
                    |   cllv
                    ;

ELSE                ::= cllv else_ ollv CUERPO_SENTENCIA
                    ;

REPETIR             ::= repetir opar EXP cpar ollv CUERPO_SENTENCIA cllv
                    ;

STRUCT              ::= crearparrafo opar VALOR_STRING comma cadena cpar
                    |   creartextoa opar VALOR_STRING cpar 
                    |   creartextob opar VALOR_STRING cpar 
                    |   crearimagen opar VALOR_STRING cpar 
                    |   crearimagen opar VALOR_STRING comma EXP comma EXP cpar 
                    |   creartabla opar LIST_ROWS cpar 
                    |   crearboton opar VALOR_STRING comma VALOR_STRING cpar 
                    ;

LIST_ROWS           ::= LIST_ROWS comma ROW
                    |   ROW
                    ;

ROW                 ::= ocorch LIST_COLUMN ccorch
                    ;

LIST_COLUMN         ::= LIST_COLUMN comma VALOR
                    |   VALOR
                    ;

SET                 ::= setcontenido opar VALOR_STRING cpar
                    |   setalineacion opar VALOR_STRING cpar
                    |   setpath opar VALOR_STRING cpar
                    |   setalto opar EXP cpar
                    |   setancho opar EXP cpar
                    |   setborde opar VALOR_BOOLEANO cpar
                    |   settexto opar VALOR_STRING cpar
                    |   clickboton opar VALOR_STRING cpar
                    ;

GET                 ::= getcontenido opar cpar
                    |   getalineacion opar cpar
                    |   getpath opar cpar
                    |   getalto opar cpar
                    |   getancho opar cpar
                    |   gettexto opar cpar
                    ;

VALOR_BOOLEANO      ::= true_
                    |   false_
                    |   dolar identificador 
                    ;

EXP                 ::= EXP:a or  EXP:b                 {:
                                                            boolean val1 = Boolean.parseBoolean(a);
                                                            boolean val2 = Boolean.parseBoolean(b);
                                                            boolean r = val1 || val2;
                                                            RESULT = Boolean.toString(r);
                                                        :}
                    |   EXP:a dot EXP:b                 {:
                                                            String concat = a + b;
                                                            RESULT = concat;
                                                        :}
                    |   EXP:a and EXP:b                 {:
                                                            boolean val1 = Boolean.parseBoolean(a);
                                                            boolean val2 = Boolean.parseBoolean(b);
                                                            boolean r = val1 && val2;
                                                            RESULT = Boolean.toString(r);
                                                        :}
                    |   not EXP:a                       {:
                                                            boolean val = Boolean.parseBoolean(a);
                                                            boolean r = !val;
                                                            RESULT = Boolean.toString(r);
                                                        :}
                    |   EXP:a mayor EXP:b               {:
                                                            String tipo1 = getTipo(a);
                                                            String tipo2 = getTipo(b);
                                                            if(tipo1.equals("Entero") && tipo2.equals("Entero")){
                                                                int num1 = Integer.valueOf(a);
                                                                int num2 = Integer.valueOf(b);
                                                                boolean r = num1 > num2;
                                                                RESULT = Boolean.toString(r);
                                                            }else if(tipo1.equals("Decimal") && tipo2.equals("Decimal")){
                                                                double num1 = Double.parseDouble(a);
                                                                double num2 = Double.parseDouble(b);
                                                                boolean r = num1 > num2; 
                                                                RESULT = Boolean.toString(r);  
                                                            }else if(tipo1.equals("Decimal") && tipo2.equals("Entero")){
                                                                double num1 = Double.parseDouble(a);
                                                                int num2 = Integer.valueOf(b);
                                                                boolean r = num1 > num2;
                                                                RESULT = Boolean.toString(r);
                                                            }else if(tipo1.equals("Entero") && tipo2.equals("Decimal")){
                                                                int num1 = Integer.valueOf(a);
                                                                double num2 = Double.parseDouble(b);
                                                                boolean r = num1 > num2;
                                                                RESULT = Boolean.toString(r);
                                                            }
                                                        :}
                    |   EXP:a menor EXP:b               {:
                                                            String tipo1 = getTipo(a);
                                                            String tipo2 = getTipo(b);
                                                            if(tipo1.equals("Entero") && tipo2.equals("Entero")){
                                                                int num1 = Integer.valueOf(a);
                                                                int num2 = Integer.valueOf(b);
                                                                boolean r = num1 < num2;
                                                                RESULT = Boolean.toString(r);
                                                            }else if(tipo1.equals("Decimal") && tipo2.equals("Decimal")){
                                                                double num1 = Double.parseDouble(a);
                                                                double num2 = Double.parseDouble(b);
                                                                boolean r = num1 < num2; 
                                                                RESULT = Boolean.toString(r);  
                                                            }else if(tipo1.equals("Decimal") && tipo2.equals("Entero")){
                                                                double num1 = Double.parseDouble(a);
                                                                int num2 = Integer.valueOf(b);
                                                                boolean r = num1 < num2;
                                                                RESULT = Boolean.toString(r);
                                                            }else if(tipo1.equals("Entero") && tipo2.equals("Decimal")){
                                                                int num1 = Integer.valueOf(a);
                                                                double num2 = Double.parseDouble(b);
                                                                boolean r = num1 < num2;
                                                                RESULT = Boolean.toString(r);
                                                            }
                                                        :}
                    |   EXP:a menorque EXP:b            {:
                                                            String tipo1 = getTipo(a);
                                                            String tipo2 = getTipo(b);
                                                            if(tipo1.equals("Entero") && tipo2.equals("Entero")){
                                                                int num1 = Integer.valueOf(a);
                                                                int num2 = Integer.valueOf(b);
                                                                boolean r = num1 <= num2;
                                                                RESULT = Boolean.toString(r);
                                                            }else if(tipo1.equals("Decimal") && tipo2.equals("Decimal")){
                                                                double num1 = Double.parseDouble(a);
                                                                double num2 = Double.parseDouble(b);
                                                                boolean r = num1 <= num2; 
                                                                RESULT = Boolean.toString(r);  
                                                            }else if(tipo1.equals("Decimal") && tipo2.equals("Entero")){
                                                                double num1 = Double.parseDouble(a);
                                                                int num2 = Integer.valueOf(b);
                                                                boolean r = num1 <= num2;
                                                                RESULT = Boolean.toString(r);
                                                            }else if(tipo1.equals("Entero") && tipo2.equals("Decimal")){
                                                                int num1 = Integer.valueOf(a);
                                                                double num2 = Double.parseDouble(b);
                                                                boolean r = num1 <= num2;
                                                                RESULT = Boolean.toString(r);
                                                            }
                                                        :}
                    |   EXP:a mayorque EXP:b            {:
                                                            String tipo1 = getTipo(a);
                                                            String tipo2 = getTipo(b);
                                                            if(tipo1.equals("Entero") && tipo2.equals("Entero")){
                                                                int num1 = Integer.valueOf(a);
                                                                int num2 = Integer.valueOf(b);
                                                                boolean r = num1 >= num2;
                                                                RESULT = Boolean.toString(r);
                                                            }else if(tipo1.equals("Decimal") && tipo2.equals("Decimal")){
                                                                double num1 = Double.parseDouble(a);
                                                                double num2 = Double.parseDouble(b);
                                                                boolean r = num1 >= num2; 
                                                                RESULT = Boolean.toString(r);  
                                                            }else if(tipo1.equals("Decimal") && tipo2.equals("Entero")){
                                                                double num1 = Double.parseDouble(a);
                                                                int num2 = Integer.valueOf(b);
                                                                boolean r = num1 >= num2;
                                                                RESULT = Boolean.toString(r);
                                                            }else if(tipo1.equals("Entero") && tipo2.equals("Decimal")){
                                                                int num1 = Integer.valueOf(a);
                                                                double num2 = Double.parseDouble(b);
                                                                boolean r = num1 >= num2;
                                                                RESULT = Boolean.toString(r);
                                                            }
                                                        :}
                    |   EXP:a diferente EXP:b           {:
                                                            String tipo1 = getTipo(a);
                                                            String tipo2 = getTipo(b);
                                                            if(tipo1.equals("Entero") && tipo2.equals("Entero")){
                                                                int num1 = Integer.valueOf(a);
                                                                int num2 = Integer.valueOf(b);
                                                                boolean r = num1 > num2;
                                                                RESULT = Boolean.toString(r);
                                                            }else if(tipo1.equals("Decimal") && tipo2.equals("Decimal")){
                                                                double num1 = Double.parseDouble(a);
                                                                double num2 = Double.parseDouble(b);
                                                                boolean r = num1 > num2; 
                                                                RESULT = Boolean.toString(r);  
                                                            }else if(tipo1.equals("Decimal") && tipo2.equals("Entero")){
                                                                double num1 = Double.parseDouble(a);
                                                                int num2 = Integer.valueOf(b);
                                                                boolean r = num1 > num2;
                                                                RESULT = Boolean.toString(r);
                                                            }else if(tipo1.equals("Entero") && tipo2.equals("Decimal")){
                                                                int num1 = Integer.valueOf(a);
                                                                double num2 = Double.parseDouble(b);
                                                                boolean r = num1 > num2;
                                                                RESULT = Boolean.toString(r);
                                                            }
                                                        :}
                    |   EXP:a igualque EXP:b            {:
                                                            String tipo1 = getTipo(a);
                                                            String tipo2 = getTipo(b);
                                                            if(tipo1.equals("Entero") && tipo2.equals("Entero")){
                                                                int num1 = Integer.valueOf(a);
                                                                int num2 = Integer.valueOf(b);
                                                                boolean r = num1 > num2;
                                                                RESULT = Boolean.toString(r);
                                                            }else if(tipo1.equals("Decimal") && tipo2.equals("Decimal")){
                                                                double num1 = Double.parseDouble(a);
                                                                double num2 = Double.parseDouble(b);
                                                                boolean r = num1 > num2; 
                                                                RESULT = Boolean.toString(r);  
                                                            }else if(tipo1.equals("Decimal") && tipo2.equals("Entero")){
                                                                double num1 = Double.parseDouble(a);
                                                                int num2 = Integer.valueOf(b);
                                                                boolean r = num1 > num2;
                                                                RESULT = Boolean.toString(r);
                                                            }else if(tipo1.equals("Entero") && tipo2.equals("Decimal")){
                                                                int num1 = Integer.valueOf(a);
                                                                double num2 = Double.parseDouble(b);
                                                                boolean r = num1 > num2;
                                                                RESULT = Boolean.toString(r);
                                                            }
                                                        :}
                    |   EXP:a plus EXP:b                {:
                                                            String tipo1 = getTipo(a);
                                                            String tipo2 = getTipo(b);
                                                            if(tipo1.equals("Entero") && tipo2.equals("Entero")){   //Tipo Entero
                                                                int num1 = Integer.valueOf(a);
                                                                int num2 = Integer.valueOf(b);
                                                                int sum = num1 + num2;
                                                                RESULT = String.valueOf(sum);
                                                            }else if(tipo1.equals("Decimal") && tipo2.equals("Decimal")){   //Tipo Decimal
                                                                double num1 = Double.parseDouble(a);
                                                                double num2 = Double.parseDouble(b);
                                                                double sum = num1 + num2;
                                                                RESULT = String.valueOf(sum);
                                                            }else{  //Tipo entero (truncar valores)
                                                                int num1 = getValor(a);
                                                                int num2 = getValor(b);
                                                                int sum = num1 + num2;
                                                                RESULT = String.valueOf(sum);
                                                            }                         
                                                        :}
                    |   EXP:a hypen EXP:b               {:
                                                            String tipo1 = getTipo(a);
                                                            String tipo2 = getTipo(b);
                                                            if(tipo1.equals("Entero") && tipo2.equals("Entero")){   //Tipo Entero
                                                                int num1 = Integer.valueOf(a);
                                                                int num2 = Integer.valueOf(b);
                                                                int sum = num1 - num2;
                                                                RESULT = String.valueOf(sum);
                                                            }else if(tipo1.equals("Decimal") && tipo2.equals("Decimal")){   //Tipo Decimal
                                                                double num1 = Double.parseDouble(a);
                                                                double num2 = Double.parseDouble(b);
                                                                double sum = num1 - num2;
                                                                RESULT = String.valueOf(sum);
                                                            }else{  //Tipo entero (truncar valores)
                                                                int num1 = getValor(a);
                                                                int num2 = getValor(b);
                                                                int sum = num1 - num2;
                                                                RESULT = String.valueOf(sum);
                                                            }             
                                                        :}
                    |   EXP:a div EXP:b                 {:
                                                            String tipo1 = getTipo(a);
                                                            String tipo2 = getTipo(b);
                                                            if(tipo1.equals("Entero") && tipo2.equals("Entero")){   //Tipo Entero
                                                                int num1 = Integer.valueOf(a);
                                                                int num2 = Integer.valueOf(b);
                                                                int sum = num1 / num2;
                                                                RESULT = String.valueOf(sum);
                                                            }else if(tipo1.equals("Decimal") && tipo2.equals("Decimal")){   //Tipo Decimal
                                                                double num1 = Double.parseDouble(a);
                                                                double num2 = Double.parseDouble(b);
                                                                double sum = num1 / num2;
                                                                RESULT = String.valueOf(sum);
                                                            }else{  //Tipo entero (truncar valores)
                                                                int num1 = getValor(a);
                                                                int num2 = getValor(b);
                                                                int sum = num1 / num2;
                                                                RESULT = String.valueOf(sum);
                                                            }             
                                                        :}
                    |   EXP:a asterisk EXP:b            {:
                                                            String tipo1 = getTipo(a);
                                                            String tipo2 = getTipo(b);
                                                            if(tipo1.equals("Entero") && tipo2.equals("Entero")){   //Tipo Entero
                                                                int num1 = Integer.valueOf(a);
                                                                int num2 = Integer.valueOf(b);
                                                                int sum = num1 * num2;
                                                                RESULT = String.valueOf(sum);
                                                            }else if(tipo1.equals("Decimal") && tipo2.equals("Decimal")){   //Tipo Decimal
                                                                double num1 = Double.parseDouble(a);
                                                                double num2 = Double.parseDouble(b);
                                                                double sum = num1 * num2;
                                                                RESULT = String.valueOf(sum);
                                                            }else{  //Tipo entero (truncar valores)
                                                                int num1 = getValor(a);
                                                                int num2 = getValor(b);
                                                                int sum = num1 * num2;
                                                                RESULT = String.valueOf(sum);
                                                            }             
                                                        :}
                    |   hypen EXP:a                     {:
                                                            String tipo1 = getTipo(a);
                                                            if(tipo1.equals("Entero")){
                                                                int num1 = Integer.valueOf(a);
                                                                num1 = -1*num1;
                                                                RESULT = String.valueOf(num1);
                                                            }else if(tipo1.equals("Decimal")){
                                                                double num1 = Double.parseDouble(a);
                                                                double num = -1*num1;
                                                                RESULT = String.valueOf(num);
                                                            }
                                                        :}
                    |   opar EXP:a cpar                 {:
                                                            RESULT = a;
                                                        :}
                    |   VALOR:a                         {:
                                                            RESULT = a;
                                                        :}
                    ;

VALOR               ::= cadena:a                        {: RESULT = a; :}
                    |   numero:a                        {: RESULT = a; :}
                    |   true_:a                         {: RESULT = a; :}
                    |   false_:a                        {: RESULT = a; :}
                    |   dolar identificador:a           {: 
                                                            for(Variable aux: lista_variables){
                                                                if(aux.nombre.equals(a)){
                                                                    RESULT = aux.valor;
                                                                    break;
                                                                }
                                                            }
                                                        :}
                    ;