
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analyzers;

import rootcode.*;
import java.io.FileReader;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Scanner extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Scanner() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Scanner(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Scanner(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\207\000\002\002\004\000\002\002\003\000\002\003" +
    "\013\000\002\004\021\000\002\005\013\000\002\005\012" +
    "\000\002\006\005\000\002\006\007\000\002\007\004\000" +
    "\002\007\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\006\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\004\000\002\011\012\000" +
    "\002\012\013\000\002\012\012\000\002\021\004\000\002" +
    "\021\003\000\002\060\003\000\002\060\006\000\002\013" +
    "\005\000\002\014\012\000\002\015\012\000\002\016\012" +
    "\000\002\017\004\000\002\017\003\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\022\012\000\002" +
    "\023\004\000\002\023\003\000\002\024\005\000\002\024" +
    "\005\000\002\025\013\000\002\025\012\000\002\026\005" +
    "\000\002\026\005\000\002\027\004\000\002\027\003\000" +
    "\002\030\012\000\002\031\004\000\002\031\003\000\002" +
    "\032\012\000\002\032\012\000\002\033\005\000\002\034" +
    "\004\000\002\034\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\007\000" +
    "\002\035\007\000\002\035\011\000\002\035\004\000\002" +
    "\036\007\000\002\036\012\000\002\037\005\000\002\040" +
    "\005\000\002\040\003\000\002\041\003\000\002\041\004" +
    "\000\002\041\006\000\002\057\004\000\002\057\003\000" +
    "\002\061\003\000\002\061\003\000\002\061\003\000\002" +
    "\061\011\000\002\042\011\000\002\043\004\000\002\043" +
    "\003\000\002\044\006\000\002\045\011\000\002\046\010" +
    "\000\002\046\006\000\002\046\006\000\002\046\006\000" +
    "\002\046\006\000\002\046\012\000\002\046\006\000\002" +
    "\046\010\000\002\047\005\000\002\047\003\000\002\050" +
    "\005\000\002\051\005\000\002\051\003\000\002\052\006" +
    "\000\002\052\006\000\002\052\006\000\002\052\006\000" +
    "\002\052\006\000\002\052\006\000\002\052\006\000\002" +
    "\052\006\000\002\053\005\000\002\053\005\000\002\053" +
    "\005\000\002\053\005\000\002\053\005\000\002\053\005" +
    "\000\002\054\003\000\002\054\003\000\002\054\004\000" +
    "\002\055\005\000\002\055\005\000\002\055\005\000\002" +
    "\055\004\000\002\055\005\000\002\055\005\000\002\055" +
    "\005\000\002\055\005\000\002\055\005\000\002\055\005" +
    "\000\002\055\005\000\002\055\005\000\002\055\005\000" +
    "\002\055\005\000\002\055\004\000\002\055\005\000\002" +
    "\055\003\000\002\056\003\000\002\056\003\000\002\056" +
    "\003\000\002\056\003\000\002\056\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0194\000\004\004\004\001\002\000\004\012\010\001" +
    "\002\000\004\002\007\001\002\000\004\002\000\001\002" +
    "\000\004\002\001\001\002\000\004\006\011\001\002\000" +
    "\004\004\012\001\002\000\004\013\u0189\001\002\000\004" +
    "\004\014\001\002\000\004\015\022\001\002\000\004\004" +
    "\016\001\002\000\004\007\017\001\002\000\004\012\020" +
    "\001\002\000\004\006\021\001\002\000\004\002\uffff\001" +
    "\002\000\006\006\025\032\023\001\002\000\004\047\u0184" +
    "\001\002\000\004\006\u017e\001\002\000\012\003\034\004" +
    "\032\005\031\107\042\001\002\000\012\003\ufff0\004\ufff0" +
    "\005\ufff0\107\ufff0\001\002\000\012\003\uffee\004\uffee\005" +
    "\uffee\107\uffee\001\002\000\012\003\034\004\u017a\005\031" +
    "\107\042\001\002\000\012\003\ufff5\004\ufff5\005\ufff5\107" +
    "\ufff5\001\002\000\022\007\u0101\016\377\021\u0102\025\u0100" +
    "\026\374\027\373\030\375\031\376\001\002\000\012\003" +
    "\ufff7\004\ufff7\005\ufff7\107\ufff7\001\002\000\004\006\372" +
    "\001\002\000\012\003\ufff2\004\ufff2\005\ufff2\107\ufff2\001" +
    "\002\000\012\003\ufff3\004\ufff3\005\ufff3\107\ufff3\001\002" +
    "\000\012\003\uffef\004\uffef\005\uffef\107\uffef\001\002\000" +
    "\012\003\ufff1\004\ufff1\005\ufff1\107\ufff1\001\002\000\012" +
    "\003\ufff8\004\ufff8\005\ufff8\107\ufff8\001\002\000\016\003" +
    "\056\046\045\072\044\100\046\101\050\103\052\001\002" +
    "\000\012\003\ufff6\004\ufff6\005\ufff6\107\ufff6\001\002\000" +
    "\004\076\240\001\002\000\004\076\227\001\002\000\010" +
    "\046\172\072\174\077\171\001\002\000\020\003\056\046" +
    "\045\072\044\100\046\101\050\103\052\121\167\001\002" +
    "\000\004\070\153\001\002\000\020\003\uffc9\046\uffc9\072" +
    "\uffc9\100\uffc9\101\uffc9\103\uffc9\121\uffc9\001\002\000\004" +
    "\070\061\001\002\000\020\003\uffc7\046\uffc7\072\uffc7\100" +
    "\uffc7\101\uffc7\103\uffc7\121\uffc7\001\002\000\020\003\uffca" +
    "\046\uffca\072\uffca\100\uffca\101\uffca\103\uffca\121\uffca\001" +
    "\002\000\020\003\uffc8\046\uffc8\072\uffc8\100\uffc8\101\uffc8" +
    "\103\uffc8\121\uffc8\001\002\000\004\045\060\001\002\000" +
    "\020\003\uffc6\046\uffc6\072\uffc6\100\uffc6\101\uffc6\103\uffc6" +
    "\121\uffc6\001\002\000\020\003\uffc2\046\uffc2\072\uffc2\100" +
    "\uffc2\101\uffc2\103\uffc2\121\uffc2\001\002\000\022\043\065" +
    "\044\067\046\063\051\072\054\070\065\064\070\071\077" +
    "\066\001\002\000\044\007\uff80\045\uff80\050\uff80\051\uff80" +
    "\052\uff80\053\uff80\055\uff80\056\uff80\057\uff80\060\uff80\061" +
    "\uff80\062\uff80\063\uff80\064\uff80\071\uff80\074\uff80\075\uff80" +
    "\001\002\000\004\076\152\001\002\000\022\043\065\044" +
    "\067\046\063\051\072\054\070\065\064\070\071\077\066" +
    "\001\002\000\044\007\uff7d\045\uff7d\050\uff7d\051\uff7d\052" +
    "\uff7d\053\uff7d\055\uff7d\056\uff7d\057\uff7d\060\uff7d\061\uff7d" +
    "\062\uff7d\063\uff7d\064\uff7d\071\uff7d\074\uff7d\075\uff7d\001" +
    "\002\000\044\007\uff7f\045\uff7f\050\uff7f\051\uff7f\052\uff7f" +
    "\053\uff7f\055\uff7f\056\uff7f\057\uff7f\060\uff7f\061\uff7f\062" +
    "\uff7f\063\uff7f\064\uff7f\071\uff7f\074\uff7f\075\uff7f\001\002" +
    "\000\044\007\uff7c\045\uff7c\050\uff7c\051\uff7c\052\uff7c\053" +
    "\uff7c\055\uff7c\056\uff7c\057\uff7c\060\uff7c\061\uff7c\062\uff7c" +
    "\063\uff7c\064\uff7c\071\uff7c\074\uff7c\075\uff7c\001\002\000" +
    "\044\007\uff7e\045\uff7e\050\uff7e\051\uff7e\052\uff7e\053\uff7e" +
    "\055\uff7e\056\uff7e\057\uff7e\060\uff7e\061\uff7e\062\uff7e\063" +
    "\uff7e\064\uff7e\071\uff7e\074\uff7e\075\uff7e\001\002\000\022" +
    "\043\065\044\067\046\063\051\072\054\070\065\064\070" +
    "\071\077\066\001\002\000\022\043\065\044\067\046\063" +
    "\051\072\054\070\065\064\070\071\077\066\001\002\000" +
    "\036\007\074\050\103\051\105\052\076\053\075\055\102" +
    "\056\110\057\111\060\077\061\104\062\106\063\101\064" +
    "\100\071\107\001\002\000\022\043\065\044\067\046\063" +
    "\051\072\054\070\065\064\070\071\077\066\001\002\000" +
    "\022\043\065\044\067\046\063\051\072\054\070\065\064" +
    "\070\071\077\066\001\002\000\022\043\065\044\067\046" +
    "\063\051\072\054\070\065\064\070\071\077\066\001\002" +
    "\000\022\043\065\044\067\046\063\051\072\054\070\065" +
    "\064\070\071\077\066\001\002\000\022\043\065\044\067" +
    "\046\063\051\072\054\070\065\064\070\071\077\066\001" +
    "\002\000\022\043\065\044\067\046\063\051\072\054\070" +
    "\065\064\070\071\077\066\001\002\000\022\043\065\044" +
    "\067\046\063\051\072\054\070\065\064\070\071\077\066" +
    "\001\002\000\022\043\065\044\067\046\063\051\072\054" +
    "\070\065\064\070\071\077\066\001\002\000\022\043\065" +
    "\044\067\046\063\051\072\054\070\065\064\070\071\077" +
    "\066\001\002\000\022\043\065\044\067\046\063\051\072" +
    "\054\070\065\064\070\071\077\066\001\002\000\022\043" +
    "\065\044\067\046\063\051\072\054\070\065\064\070\071" +
    "\077\066\001\002\000\004\066\114\001\002\000\022\043" +
    "\065\044\067\046\063\051\072\054\070\065\064\070\071" +
    "\077\066\001\002\000\022\043\065\044\067\046\063\051" +
    "\072\054\070\065\064\070\071\077\066\001\002\000\044" +
    "\007\074\045\uff8a\050\103\051\105\052\076\053\uff8a\055" +
    "\uff8a\056\uff8a\057\uff8a\060\uff8a\061\uff8a\062\uff8a\063\uff8a" +
    "\064\uff8a\071\uff8a\074\uff8a\075\uff8a\001\002\000\044\007" +
    "\074\045\uff8c\050\103\051\105\052\076\053\uff8c\055\uff8c" +
    "\056\uff8c\057\uff8c\060\uff8c\061\uff8c\062\uff8c\063\uff8c\064" +
    "\uff8c\071\uff8c\074\uff8c\075\uff8c\001\002\000\012\072\115" +
    "\100\046\101\050\103\052\001\002\000\004\076\125\001" +
    "\002\000\014\067\uffb6\072\uffb6\100\uffb6\101\uffb6\103\uffb6" +
    "\001\002\000\014\067\uffb8\072\uffb8\100\uffb8\101\uffb8\103" +
    "\uffb8\001\002\000\014\067\124\072\115\100\046\101\050" +
    "\103\052\001\002\000\014\067\uffb7\072\uffb7\100\uffb7\101" +
    "\uffb7\103\uffb7\001\002\000\014\067\uffb5\072\uffb5\100\uffb5" +
    "\101\uffb5\103\uffb5\001\002\000\014\067\uffb9\072\uffb9\100" +
    "\uffb9\101\uffb9\103\uffb9\001\002\000\022\003\uffaf\046\uffaf" +
    "\067\uffaf\072\uffaf\100\uffaf\101\uffaf\103\uffaf\121\uffaf\001" +
    "\002\000\004\053\126\001\002\000\004\114\127\001\002" +
    "\000\004\070\130\001\002\000\004\071\131\001\002\000" +
    "\004\045\132\001\002\000\014\067\uffb4\072\uffb4\100\uffb4" +
    "\101\uffb4\103\uffb4\001\002\000\044\007\074\045\uff87\050" +
    "\103\051\105\052\076\053\uff87\055\uff87\056\uff87\057\uff87" +
    "\060\uff87\061\uff87\062\uff87\063\uff87\064\uff87\071\uff87\074" +
    "\uff87\075\uff87\001\002\000\044\007\074\045\uff85\050\uff85" +
    "\051\uff85\052\076\053\uff85\055\uff85\056\uff85\057\uff85\060" +
    "\uff85\061\uff85\062\uff85\063\uff85\064\uff85\071\uff85\074\uff85" +
    "\075\uff85\001\002\000\044\007\074\045\uff88\050\103\051" +
    "\105\052\076\053\uff88\055\uff88\056\uff88\057\uff88\060\uff88" +
    "\061\uff88\062\uff88\063\uff88\064\uff88\071\uff88\074\uff88\075" +
    "\uff88\001\002\000\044\007\074\045\uff86\050\uff86\051\uff86" +
    "\052\076\053\uff86\055\uff86\056\uff86\057\uff86\060\uff86\061" +
    "\uff86\062\uff86\063\uff86\064\uff86\071\uff86\074\uff86\075\uff86" +
    "\001\002\000\044\007\074\045\uff8b\050\103\051\105\052" +
    "\076\053\uff8b\055\uff8b\056\uff8b\057\uff8b\060\uff8b\061\uff8b" +
    "\062\uff8b\063\uff8b\064\uff8b\071\uff8b\074\uff8b\075\uff8b\001" +
    "\002\000\044\007\074\045\uff8e\050\103\051\105\052\076" +
    "\053\uff8e\055\102\056\110\057\111\060\077\061\104\062" +
    "\106\063\uff8e\064\uff8e\071\uff8e\074\uff8e\075\uff8e\001\002" +
    "\000\044\007\074\045\uff90\050\103\051\105\052\076\053" +
    "\uff90\055\102\056\110\057\111\060\077\061\104\062\106" +
    "\063\101\064\uff90\071\uff90\074\uff90\075\uff90\001\002\000" +
    "\044\007\074\045\uff89\050\103\051\105\052\076\053\uff89" +
    "\055\uff89\056\uff89\057\uff89\060\uff89\061\uff89\062\uff89\063" +
    "\uff89\064\uff89\071\uff89\074\uff89\075\uff89\001\002\000\044" +
    "\007\uff83\045\uff83\050\uff83\051\uff83\052\uff83\053\uff83\055" +
    "\uff83\056\uff83\057\uff83\060\uff83\061\uff83\062\uff83\063\uff83" +
    "\064\uff83\071\uff83\074\uff83\075\uff83\001\002\000\044\007" +
    "\074\045\uff8f\050\103\051\105\052\076\053\uff8f\055\102" +
    "\056\110\057\111\060\077\061\104\062\106\063\101\064" +
    "\uff8f\071\uff8f\074\uff8f\075\uff8f\001\002\000\044\007\uff84" +
    "\045\uff84\050\uff84\051\uff84\052\uff84\053\uff84\055\uff84\056" +
    "\uff84\057\uff84\060\uff84\061\uff84\062\uff84\063\uff84\064\uff84" +
    "\071\uff84\074\uff84\075\uff84\001\002\000\044\007\074\045" +
    "\uff82\050\uff82\051\uff82\052\076\053\uff82\055\uff82\056\uff82" +
    "\057\uff82\060\uff82\061\uff82\062\uff82\063\uff82\064\uff82\071" +
    "\uff82\074\uff82\075\uff82\001\002\000\036\007\074\050\103" +
    "\051\105\052\076\053\075\055\102\056\110\057\111\060" +
    "\077\061\104\062\106\063\101\064\100\071\150\001\002" +
    "\000\044\007\uff81\045\uff81\050\uff81\051\uff81\052\uff81\053" +
    "\uff81\055\uff81\056\uff81\057\uff81\060\uff81\061\uff81\062\uff81" +
    "\063\uff81\064\uff81\071\uff81\074\uff81\075\uff81\001\002\000" +
    "\044\007\074\045\uff8d\050\103\051\105\052\076\053\uff8d" +
    "\055\102\056\110\057\111\060\077\061\104\062\106\063" +
    "\uff8d\064\uff8d\071\uff8d\074\uff8d\075\uff8d\001\002\000\044" +
    "\007\uff7b\045\uff7b\050\uff7b\051\uff7b\052\uff7b\053\uff7b\055" +
    "\uff7b\056\uff7b\057\uff7b\060\uff7b\061\uff7b\062\uff7b\063\uff7b" +
    "\064\uff7b\071\uff7b\074\uff7b\075\uff7b\001\002\000\022\043" +
    "\065\044\067\046\063\051\072\054\070\065\064\070\071" +
    "\077\066\001\002\000\036\007\074\050\103\051\105\052" +
    "\076\053\075\055\102\056\110\057\111\060\077\061\104" +
    "\062\106\063\101\064\100\071\155\001\002\000\004\066" +
    "\156\001\002\000\012\072\115\100\046\101\050\103\052" +
    "\001\002\000\014\067\162\072\115\100\046\101\050\103" +
    "\052\001\002\000\022\003\uffb3\046\uffb3\067\uffb3\072\uffb3" +
    "\100\uffb3\101\uffb3\103\uffb3\121\uffb3\001\002\000\004\067" +
    "\166\001\002\000\024\003\uffb1\046\uffb1\067\uffb1\072\uffb1" +
    "\100\uffb1\101\uffb1\102\163\103\uffb1\121\uffb1\001\002\000" +
    "\004\066\164\001\002\000\012\072\115\100\046\101\050" +
    "\103\052\001\002\000\014\067\uffb0\072\115\100\046\101" +
    "\050\103\052\001\002\000\022\003\uffb2\046\uffb2\067\uffb2" +
    "\072\uffb2\100\uffb2\101\uffb2\103\uffb2\121\uffb2\001\002\000" +
    "\012\003\uffcc\004\uffcc\005\uffcc\107\uffcc\001\002\000\020" +
    "\003\uffcb\046\uffcb\072\uffcb\100\uffcb\101\uffcb\103\uffcb\121" +
    "\uffcb\001\002\000\012\045\uffbc\053\uffbc\071\uffbc\075\uffbc" +
    "\001\002\000\004\076\226\001\002\000\006\045\uffbd\053" +
    "\uffbd\001\002\000\004\076\201\001\002\000\006\045\177" +
    "\053\176\001\002\000\010\046\172\072\174\077\171\001" +
    "\002\000\022\003\uffbf\046\uffbf\067\uffbf\072\uffbf\100\uffbf" +
    "\101\uffbf\103\uffbf\121\uffbf\001\002\000\006\045\uffbe\053" +
    "\uffbe\001\002\000\004\053\202\001\002\000\016\035\206" +
    "\106\205\110\211\116\207\123\210\130\204\001\002\000" +
    "\012\045\uffba\053\uffba\071\uffba\075\uffba\001\002\000\004" +
    "\070\224\001\002\000\004\070\222\001\002\000\004\070" +
    "\220\001\002\000\004\070\216\001\002\000\004\070\214" +
    "\001\002\000\004\070\212\001\002\000\004\071\213\001" +
    "\002\000\012\045\uff98\053\uff98\071\uff98\075\uff98\001\002" +
    "\000\004\071\215\001\002\000\012\045\uff96\053\uff96\071" +
    "\uff96\075\uff96\001\002\000\004\071\217\001\002\000\012" +
    "\045\uff95\053\uff95\071\uff95\075\uff95\001\002\000\004\071" +
    "\221\001\002\000\012\045\uff99\053\uff99\071\uff99\075\uff99" +
    "\001\002\000\004\071\223\001\002\000\012\045\uff97\053" +
    "\uff97\071\uff97\075\uff97\001\002\000\004\071\225\001\002" +
    "\000\012\045\uff94\053\uff94\071\uff94\075\uff94\001\002\000" +
    "\012\045\uffbb\053\uffbb\071\uffbb\075\uffbb\001\002\000\004" +
    "\047\230\001\002\000\024\043\065\044\067\046\063\051" +
    "\072\054\070\065\064\070\071\072\231\077\066\001\002" +
    "\000\004\076\234\001\002\000\036\007\074\045\233\050" +
    "\103\051\105\052\076\053\075\055\102\056\110\057\111" +
    "\060\077\061\104\062\106\063\101\064\100\001\002\000" +
    "\020\003\uffc1\046\uffc1\072\uffc1\100\uffc1\101\uffc1\103\uffc1" +
    "\121\uffc1\001\002\000\004\053\235\001\002\000\016\035" +
    "\206\106\205\110\211\116\207\123\210\130\204\001\002" +
    "\000\004\045\237\001\002\000\020\003\uffc0\046\uffc0\072" +
    "\uffc0\100\uffc0\101\uffc0\103\uffc0\121\uffc0\001\002\000\006" +
    "\047\242\053\241\001\002\000\024\104\331\105\327\114" +
    "\324\115\326\117\321\120\322\122\320\125\330\127\323" +
    "\001\002\000\016\020\245\111\244\112\243\113\251\124" +
    "\246\126\250\001\002\000\004\070\315\001\002\000\004" +
    "\070\312\001\002\000\004\070\304\001\002\000\004\070" +
    "\270\001\002\000\004\045\267\001\002\000\004\070\262" +
    "\001\002\000\004\070\252\001\002\000\010\046\172\072" +
    "\174\077\171\001\002\000\006\071\255\075\254\001\002" +
    "\000\022\043\065\044\067\046\063\051\072\054\070\065" +
    "\064\070\071\077\066\001\002\000\004\045\uffaa\001\002" +
    "\000\036\007\074\050\103\051\105\052\076\053\075\055" +
    "\102\056\110\057\111\060\077\061\104\062\106\063\101" +
    "\064\100\075\257\001\002\000\022\043\065\044\067\046" +
    "\063\051\072\054\070\065\064\070\071\077\066\001\002" +
    "\000\036\007\074\050\103\051\105\052\076\053\075\055" +
    "\102\056\110\057\111\060\077\061\104\062\106\063\101" +
    "\064\100\071\261\001\002\000\004\045\uffa9\001\002\000" +
    "\010\046\172\072\174\077\171\001\002\000\004\075\264" +
    "\001\002\000\010\046\172\072\174\077\171\001\002\000" +
    "\004\071\266\001\002\000\004\045\uffa7\001\002\000\020" +
    "\003\uffc5\046\uffc5\072\uffc5\100\uffc5\101\uffc5\103\uffc5\121" +
    "\uffc5\001\002\000\004\073\273\001\002\000\006\071\302" +
    "\075\301\001\002\000\006\071\uffa5\075\uffa5\001\002\000" +
    "\022\043\065\044\067\046\063\051\072\054\070\065\064" +
    "\070\071\077\066\001\002\000\006\074\277\075\276\001" +
    "\002\000\040\007\074\050\103\051\105\052\076\053\075" +
    "\055\102\056\110\057\111\060\077\061\104\062\106\063" +
    "\101\064\100\074\uffa2\075\uffa2\001\002\000\022\043\065" +
    "\044\067\046\063\051\072\054\070\065\064\070\071\077" +
    "\066\001\002\000\006\071\uffa4\075\uffa4\001\002\000\040" +
    "\007\074\050\103\051\105\052\076\053\075\055\102\056" +
    "\110\057\111\060\077\061\104\062\106\063\101\064\100" +
    "\074\uffa3\075\uffa3\001\002\000\004\073\273\001\002\000" +
    "\004\045\uffa8\001\002\000\006\071\uffa6\075\uffa6\001\002" +
    "\000\010\046\172\072\174\077\171\001\002\000\006\071" +
    "\307\075\306\001\002\000\010\046\172\072\174\077\171" +
    "\001\002\000\004\045\uffad\001\002\000\004\071\311\001" +
    "\002\000\004\045\uffae\001\002\000\010\046\172\072\174" +
    "\077\171\001\002\000\004\071\314\001\002\000\004\045" +
    "\uffac\001\002\000\010\046\172\072\174\077\171\001\002" +
    "\000\004\071\317\001\002\000\004\045\uffab\001\002\000" +
    "\004\070\367\001\002\000\004\070\364\001\002\000\004" +
    "\070\361\001\002\000\004\070\356\001\002\000\004\070" +
    "\353\001\002\000\004\045\352\001\002\000\004\070\347" +
    "\001\002\000\004\070\344\001\002\000\004\070\335\001" +
    "\002\000\004\070\332\001\002\000\010\046\172\072\174" +
    "\077\171\001\002\000\004\071\334\001\002\000\004\045" +
    "\uffa1\001\002\000\010\043\340\044\336\046\337\001\002" +
    "\000\004\071\uff92\001\002\000\004\076\343\001\002\000" +
    "\004\071\uff93\001\002\000\004\071\342\001\002\000\004" +
    "\045\uff9c\001\002\000\004\071\uff91\001\002\000\010\046" +
    "\172\072\174\077\171\001\002\000\004\071\346\001\002" +
    "\000\004\045\uffa0\001\002\000\010\046\172\072\174\077" +
    "\171\001\002\000\004\071\351\001\002\000\004\045\uff9a" +
    "\001\002\000\020\003\uffc4\046\uffc4\072\uffc4\100\uffc4\101" +
    "\uffc4\103\uffc4\121\uffc4\001\002\000\004\071\354\001\002" +
    "\000\004\045\355\001\002\000\020\003\uffc3\046\uffc3\072" +
    "\uffc3\100\uffc3\101\uffc3\103\uffc3\121\uffc3\001\002\000\010" +
    "\046\172\072\174\077\171\001\002\000\004\071\360\001" +
    "\002\000\004\045\uff9b\001\002\000\022\043\065\044\067" +
    "\046\063\051\072\054\070\065\064\070\071\077\066\001" +
    "\002\000\036\007\074\050\103\051\105\052\076\053\075" +
    "\055\102\056\110\057\111\060\077\061\104\062\106\063" +
    "\101\064\100\071\363\001\002\000\004\045\uff9e\001\002" +
    "\000\010\046\172\072\174\077\171\001\002\000\004\071" +
    "\366\001\002\000\004\045\uff9f\001\002\000\022\043\065" +
    "\044\067\046\063\051\072\054\070\065\064\070\071\077" +
    "\066\001\002\000\036\007\074\050\103\051\105\052\076" +
    "\053\075\055\102\056\110\057\111\060\077\061\104\062" +
    "\106\063\101\064\100\071\371\001\002\000\004\045\uff9d" +
    "\001\002\000\012\003\uffed\004\uffed\005\uffed\107\uffed\001" +
    "\002\000\004\006\u0174\001\002\000\004\006\u016e\001\002" +
    "\000\006\040\u0163\041\u0162\001\002\000\004\006\u015a\001" +
    "\002\000\006\006\u0144\033\u0143\001\002\000\010\034\u0135" +
    "\036\u0132\037\u0134\001\002\000\004\017\u0120\001\002\000" +
    "\006\006\u0105\042\u0103\001\002\000\004\047\u012f\001\002" +
    "\000\004\006\u0129\001\002\000\004\004\u0107\001\002\000" +
    "\004\004\uffd2\001\002\000\004\022\u010b\001\002\000\004" +
    "\004\u010a\001\002\000\004\004\uffd3\001\002\000\006\007" +
    "\u010c\022\u010b\001\002\000\004\006\u010f\001\002\000\004" +
    "\021\u010d\001\002\000\004\006\u010e\001\002\000\012\003" +
    "\uffd6\004\uffd6\005\uffd6\107\uffd6\001\002\000\004\004\u0110" +
    "\001\002\000\006\023\u0116\024\u0115\001\002\000\004\004" +
    "\uffcf\001\002\000\004\004\u0113\001\002\000\010\007\u0117" +
    "\023\u0116\024\u0115\001\002\000\004\004\uffd0\001\002\000" +
    "\004\006\u0123\001\002\000\004\006\u011a\001\002\000\004" +
    "\022\u0118\001\002\000\004\006\u0119\001\002\000\004\004" +
    "\uffd1\001\002\000\012\003\034\004\032\005\031\107\042" +
    "\001\002\000\012\003\034\004\u011c\005\031\107\042\001" +
    "\002\000\022\007\u011e\016\377\021\u0102\025\u0100\026\374" +
    "\027\373\030\375\031\376\001\002\000\012\003\ufff9\004" +
    "\ufff9\005\ufff9\107\ufff9\001\002\000\006\017\u0120\023\u011f" +
    "\001\002\000\004\006\u0122\001\002\000\004\006\u0121\001" +
    "\002\000\012\003\ufff4\004\ufff4\005\ufff4\107\ufff4\001\002" +
    "\000\004\004\uffce\001\002\000\012\003\034\004\032\005" +
    "\031\107\042\001\002\000\012\003\034\004\u0125\005\031" +
    "\107\042\001\002\000\022\007\u0126\016\377\021\u0102\025" +
    "\u0100\026\374\027\373\030\375\031\376\001\002\000\006" +
    "\017\u0120\024\u0127\001\002\000\004\006\u0128\001\002\000" +
    "\004\004\uffcd\001\002\000\004\004\u0107\001\002\000\004" +
    "\004\u012b\001\002\000\006\007\u012c\022\u010b\001\002\000" +
    "\004\021\u012d\001\002\000\004\006\u012e\001\002\000\012" +
    "\003\uffd7\004\uffd7\005\uffd7\107\uffd7\001\002\000\006\043" +
    "\u0131\044\u0130\001\002\000\004\006\uffd4\001\002\000\004" +
    "\006\uffd5\001\002\000\004\047\u0141\001\002\000\012\006" +
    "\u013b\034\u0135\036\u0132\037\u0134\001\002\000\004\047\u0139" +
    "\001\002\000\004\047\u0137\001\002\000\012\006\uffe0\034" +
    "\uffe0\036\uffe0\037\uffe0\001\002\000\004\077\u0138\001\002" +
    "\000\012\006\uffdf\034\uffdf\036\uffdf\037\uffdf\001\002\000" +
    "\004\054\u013a\001\002\000\012\006\uffdd\034\uffdd\036\uffdd" +
    "\037\uffdd\001\002\000\004\004\u013d\001\002\000\012\006" +
    "\uffe1\034\uffe1\036\uffe1\037\uffe1\001\002\000\004\007\u013e" +
    "\001\002\000\004\025\u013f\001\002\000\004\006\u0140\001" +
    "\002\000\012\003\uffe2\004\uffe2\005\uffe2\107\uffe2\001\002" +
    "\000\004\054\u0142\001\002\000\012\006\uffde\034\uffde\036" +
    "\uffde\037\uffde\001\002\000\004\047\u0158\001\002\000\006" +
    "\004\u0148\005\u014a\001\002\000\004\006\u0146\001\002\000" +
    "\006\004\u0148\005\u014a\001\002\000\006\004\u014e\005\u014a" +
    "\001\002\000\004\007\u014b\001\002\000\006\004\uffe8\005" +
    "\uffe8\001\002\000\006\004\uffe7\005\uffe7\001\002\000\004" +
    "\017\u014c\001\002\000\004\006\u014d\001\002\000\006\004" +
    "\uffe6\005\uffe6\001\002\000\004\007\u0150\001\002\000\006" +
    "\004\uffe9\005\uffe9\001\002\000\006\016\u0151\017\u014c\001" +
    "\002\000\004\006\u0152\001\002\000\012\003\uffeb\004\uffeb" +
    "\005\uffeb\107\uffeb\001\002\000\006\004\u0154\005\u014a\001" +
    "\002\000\004\007\u0155\001\002\000\006\016\u0156\017\u014c" +
    "\001\002\000\004\006\u0157\001\002\000\012\003\uffea\004" +
    "\uffea\005\uffea\107\uffea\001\002\000\004\077\u0159\001\002" +
    "\000\004\006\uffe5\001\002\000\012\003\034\004\032\005" +
    "\031\107\042\001\002\000\012\003\034\004\u015c\005\031" +
    "\107\042\001\002\000\022\007\u015d\016\377\021\u0102\025" +
    "\u0100\026\374\027\373\030\375\031\376\001\002\000\006" +
    "\017\u0120\031\u015e\001\002\000\004\006\u015f\001\002\000" +
    "\012\003\uffec\004\uffec\005\uffec\107\uffec\001\002\000\010" +
    "\006\uffda\040\uffda\041\uffda\001\002\000\010\006\u0169\040" +
    "\u0163\041\u0162\001\002\000\004\047\u0166\001\002\000\004" +
    "\047\u0164\001\002\000\004\077\u0165\001\002\000\010\006" +
    "\uffd9\040\uffd9\041\uffd9\001\002\000\004\077\u0167\001\002" +
    "\000\010\006\uffd8\040\uffd8\041\uffd8\001\002\000\010\006" +
    "\uffdb\040\uffdb\041\uffdb\001\002\000\004\004\u016a\001\002" +
    "\000\004\007\u016b\001\002\000\004\030\u016c\001\002\000" +
    "\004\006\u016d\001\002\000\012\003\uffdc\004\uffdc\005\uffdc" +
    "\107\uffdc\001\002\000\006\004\u0148\005\u014a\001\002\000" +
    "\006\004\u0170\005\u014a\001\002\000\004\007\u0171\001\002" +
    "\000\006\017\u014c\026\u0172\001\002\000\004\006\u0173\001" +
    "\002\000\012\003\uffe4\004\uffe4\005\uffe4\107\uffe4\001\002" +
    "\000\006\004\u0148\005\u014a\001\002\000\006\004\u0176\005" +
    "\u014a\001\002\000\004\007\u0177\001\002\000\006\017\u014c" +
    "\027\u0178\001\002\000\004\006\u0179\001\002\000\012\003" +
    "\uffe3\004\uffe3\005\uffe3\107\uffe3\001\002\000\022\007\u017b" +
    "\016\377\021\u0102\025\u0100\026\374\027\373\030\375\031" +
    "\376\001\002\000\006\015\u017c\017\u0120\001\002\000\004" +
    "\006\u017d\001\002\000\004\004\ufffc\001\002\000\012\003" +
    "\034\004\032\005\031\107\042\001\002\000\012\003\034" +
    "\004\u0180\005\031\107\042\001\002\000\022\007\u0181\016" +
    "\377\021\u0102\025\u0100\026\374\027\373\030\375\031\376" +
    "\001\002\000\006\015\u0182\017\u0120\001\002\000\004\006" +
    "\u0183\001\002\000\004\004\ufffd\001\002\000\006\010\u0186" +
    "\077\u0185\001\002\000\004\006\ufffb\001\002\000\004\011" +
    "\u0187\001\002\000\004\010\u0188\001\002\000\004\006\ufffa" +
    "\001\002\000\004\006\u018a\001\002\000\004\004\u018b\001" +
    "\002\000\004\014\u018c\001\002\000\004\006\u018d\001\002" +
    "\000\006\004\u0148\005\u014a\001\002\000\006\004\u018f\005" +
    "\u014a\001\002\000\004\007\u0190\001\002\000\006\014\u0191" +
    "\017\u014c\001\002\000\004\006\u0192\001\002\000\004\004" +
    "\u0193\001\002\000\004\007\u0194\001\002\000\004\013\u0195" +
    "\001\002\000\004\006\u0196\001\002\000\004\004\ufffe\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0194\000\006\002\004\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\012\001\001\000\002\001" +
    "\001\000\004\005\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\007\027\010\040\011" +
    "\032\012\042\014\035\015\034\016\037\022\025\025\036" +
    "\033\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\010\u011c\011\032\012\042\014\035\015\034\016\037" +
    "\022\025\025\036\033\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\034\046\035\053\036\050" +
    "\037\054\042\052\045\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\040\174\041\172" +
    "\001\001\000\014\035\167\036\050\037\054\042\052\045" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\055\072\056\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\055\150\056\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\055\146\056\061\001\001\000\006\055\145" +
    "\056\061\001\001\000\002\001\001\000\006\055\144\056" +
    "\061\001\001\000\006\055\143\056\061\001\001\000\006" +
    "\055\142\056\061\001\001\000\006\055\141\056\061\001" +
    "\001\000\006\055\140\056\061\001\001\000\006\055\137" +
    "\056\061\001\001\000\006\055\136\056\061\001\001\000" +
    "\006\055\135\056\061\001\001\000\006\055\134\056\061" +
    "\001\001\000\006\055\133\056\061\001\001\000\006\055" +
    "\132\056\061\001\001\000\002\001\001\000\006\055\112" +
    "\056\061\001\001\000\006\055\111\056\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\037\120\042\115" +
    "\045\121\057\117\061\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\037\120\042\115" +
    "\045\121\061\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\055\153\056\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\037\120" +
    "\042\115\045\121\057\156\061\116\001\001\000\016\037" +
    "\120\042\115\043\157\044\160\045\121\061\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\037\120\042\115\045\121\057\164" +
    "\061\116\001\001\000\012\037\120\042\115\045\121\061" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\177" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\055\231\056\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\053\235\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\052\324\001\001\000\004\046\246" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\252\001\001\000\002\001" +
    "\001\000\006\055\255\056\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\055\257\056\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\262\001\001" +
    "\000\002\001\001\000\004\041\264\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\047\270" +
    "\050\271\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\051\273\055\274\056\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\055\277\056\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\302\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\304\001" +
    "\001\000\002\001\001\000\004\041\307\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\312\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\315\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\041\332\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\340\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\344\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\041\347\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\356\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\055\361\056\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\041\364\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\055\367\056\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\u0160\024\u015f\001\001\000" +
    "\002\001\001\000\004\013\u0144\001\001\000\006\017\u0132" +
    "\020\u0135\001\001\000\002\001\001\000\004\026\u0103\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\027\u0107" +
    "\030\u0105\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\u0108\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\031\u0111\032\u0110\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\u0113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\007\u011a\010\040\011\032\012\042\014\035" +
    "\015\034\016\037\022\025\025\036\033\026\001\001\000" +
    "\024\010\u011c\011\032\012\042\014\035\015\034\016\037" +
    "\022\025\025\036\033\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\007" +
    "\u0123\010\040\011\032\012\042\014\035\015\034\016\037" +
    "\022\025\025\036\033\026\001\001\000\024\010\u011c\011" +
    "\032\012\042\014\035\015\034\016\037\022\025\025\036" +
    "\033\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\027\u0129\030\u0105" +
    "\001\001\000\004\030\u0108\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\u013b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\u0152\060\u0148\001" +
    "\001\000\002\001\001\000\006\021\u0146\060\u0148\001\001" +
    "\000\004\060\u014e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\060\u014e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\007\u015a\010\040\011\032\012\042\014" +
    "\035\015\034\016\037\022\025\025\036\033\026\001\001" +
    "\000\024\010\u011c\011\032\012\042\014\035\015\034\016" +
    "\037\022\025\025\036\033\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\u0167\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\021\u016e\060\u0148\001\001" +
    "\000\004\060\u014e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\u0174" +
    "\060\u0148\001\001\000\004\060\u014e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\007\u017e\010\040\011\032\012\042" +
    "\014\035\015\034\016\037\022\025\025\036\033\026\001" +
    "\001\000\024\010\u011c\011\032\012\042\014\035\015\034" +
    "\016\037\022\025\025\036\033\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\u018d\060\u0148\001\001\000\004\060\u014e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Scanner$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Scanner$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Scanner$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado ="";
    public String consola = "";

    //Lista de variables Globaless
    public LinkedList<Variable> lista_variables = new LinkedList<Variable> ();

    //Lista de Objetos
    public LinkedList<Objeto> lista_objetos = new LinkedList<Objeto> ();

    //Lista de Errores
    public ArrayList<Esemanticos> ErroresSintacticos = new ArrayList<Esemanticos> ();

    //Lista de Impresiones
    public LinkedList<String> lista_impresion = new LinkedList<String> ();

    public int getValor(String valor){
        if(valor.indexOf('.') == -1){  
            return Integer.parseInt(valor);
        }else{                          
            return (int) Double.parseDouble(valor);
        }
    }

    public String getTipo(String valor){
        if(valor.equals("false")){
            return "Booleano";
        }else if(valor.equals("true")){
            return "Booleano";
        }else if(valor.indexOf('"') >= 0){  //contiene comillas dobles 
            return "Cadena";
        }else if(valor.indexOf('.') >= 0){  //contiene un punto decimal
            return "Decimal";
        }else{
            return "Entero";
        }
    }

    public void definirFuncion(String id, String definicion){
        String[] parts = definicion.split("-");
        parts[0] = parts[0].toLowerCase();
        switch(parts[0]) {
            case "crearparrafo":
                Objeto ob1 = new Objeto("parrafo", id, parts[1]);
                lista_objetos.add(ob1);
                break;
            case "creartextoa":
                Objeto ob2 = new Objeto("textoa", id, parts[1]);
                lista_objetos.add(ob2);
                break;
            case "creartextob":
                Objeto ob3 = new Objeto("textob", id, parts[1]);
                lista_objetos.add(ob3);
                break;
            case "crearimagen":
                Objeto ob4 = new Objeto("imagen", id, parts[1]);
                lista_objetos.add(ob4);
                break;
            case "creartabla":
                Objeto ob5 = new Objeto("tabla", id, parts[1]);
                lista_objetos.add(ob5);
                break;
            case "crearboton":
                Objeto ob6 = new Objeto("boton", id, parts[1]);
                lista_objetos.add(ob6);
                break;
        }
    }

    public String getValorAtributo(String objeto, String atributo){
        for(int i = 0; i < lista_objetos.size(); i++){
            if(lista_objetos.get(i).nombre.equals(objeto)){
                switch(lista_objetos.get(i).tipo) {
                    case "parrafo":
                        if(atributo.toLowerCase().equals("getcontenido")){
                            String cadena = lista_objetos.get(i).valor;
                            String[] parts = cadena.split(",");
                            return parts[0];
                        }else if(atributo.toLowerCase().equals("getalineacion")){
                            String cadena = lista_objetos.get(i).valor;
                            String[] parts = cadena.split(",");
                            return parts[1];
                        }
                        break;
                    case "textoa":
                        if(atributo.toLowerCase().equals("getcontenido")){
                            return lista_objetos.get(i).valor;
                        }
                        break;
                    case "textob":
                        if(atributo.toLowerCase().equals("getcontenido")){
                             return lista_objetos.get(i).valor;
                        }
                        break;
                    case "imagen":
                        if(atributo.toLowerCase().equals("getpath")){
                            String cadena = lista_objetos.get(i).valor;
                            String[] parts = cadena.split(",");
                            return parts[0];
                        }else if(atributo.toLowerCase().equals("getalto")){
                            String cadena = lista_objetos.get(i).valor;
                            String[] parts = cadena.split(",");
                            return parts[1];
                        }else if(atributo.toLowerCase().equals("getancho")){
                            String cadena = lista_objetos.get(i).valor;
                            String[] parts = cadena.split(",");
                            return parts[2];
                        }
                        break;
                    case "boton":
                        if(atributo.toLowerCase().equals("gettexto")){
                            String cadena = lista_objetos.get(i).valor;
                            String[] parts = cadena.split(",");
                            return parts[1];
                        }
                        break;
                }
            }
        }
        return "";
    }
    
    /* #################################################################################################################
       ############################################        SET VALORES        ##########################################
       #################################################################################################################*/

    public String setContenidoParrafo(String actual, String nuevo){
        if(actual.indexOf('@') >= 0){   //Hay alineacion, se debe separar
            String[] parts = actual.split("@");
            String nuevo_valor = nuevo + "@" + parts[1];
            return nuevo_valor;
        }else{
            return nuevo;
        }
    }

    public String setAlineacionParrafo(String actual, String nuevo){
        if(actual.indexOf('@') >= 0){   //Hay alineacion
            String[] parts = actual.split("@");
            String nuevo_valor = parts[0] + "@" + nuevo;
            return nuevo_valor;
        }else{  //No hay alineación, solo se agrega
            return actual + "@" + nuevo;
        }
    }
    
    public String setPathImagen(String actual, String nuevo){
        if(actual.indexOf(',') >= 0){   //Hay tamaños
            String[] parts = actual.split(",");
            return nuevo + "," + parts[1] + "," + parts[2];
        }else{      //No hay tamaños
            return nuevo;
        }
    }

    public String setAltoImagen(String actual, String nuevo){
        if(actual.indexOf(',') >= 0){   //Hay tamaños
            String[] parts = actual.split(",");
            parts[1] = nuevo;
            return parts[0] + "," + nuevo + "," + parts[2];
        }else{      //No hay tamaños
            return "";
        }
            
    }

    public String setAnchoImagen(String actual, String nuevo){
        if(actual.indexOf(',') >= 0){   //Hay tamaños
            String[] parts = actual.split(",");
            parts[2] = nuevo;
            return parts[0] + "," + parts[1] + "," + nuevo;
        }else{      //No hay tamaños
            return "";
        }
    }
    
    /* #################################################################################################################
       ####################################        CREANDO ELEMENTOS HTML        #######################################
       #################################################################################################################*/

    public String CrearParrafo(String cadena){
        if(cadena.indexOf('@') >= 0){   //Contiene alineacion
            String[] parts = cadena.split("@");
            return "<p align=" + parts[1] + ">" + parts[0].replace("\"", "") + "</p>";
        }else{                          //No contiene una alineacion
            return "<p>" + cadena.replace("\"", "") + "</p>";
        }
    }

    public String CrearTextoA(String cadena){
        return "<h1>" + cadena.replace("\"", "") + "</h1>\n";
    }

    public String CrearTextoB(String cadena){
        return "<h2>" + cadena.replace("\"", "") + "</h2>\n";
    }

    public String CrearImagen(String cadena){
        if(cadena.indexOf(',') >= 0){  //Contiene una coma
            String[] parts = cadena.split(",");
            return "<img src=" + parts[0] + "height=\"" + parts[1] + "\" width=\"" + parts[2] + "\">\n";
        }else{
            return "<img src=" + cadena + ">\n";
        } 
    }

    public String CrearTabla(String cadena){
        if(cadena.indexOf('-') >= 0){
            String[] p = cadena.split("-");
            String tabla = "";
            tabla += "<TABLE border = \"1\">\n";
            for(int i = 0; i < p[0].length(); i++){
                char c = p[0].charAt(i);
                if(c == '['){   //Inicia una fila
                    tabla += "<tr>\n<td>";
                }else if(c == ']'){ //Termina una fila
                    tabla += "</td>\n</tr>\n";
                }else if(c == '"'){    
                    //Ignorar
                }else if(c == ','){ //Nueva columna
                    tabla += "</td>\n<td>";
                }else{
                    tabla += String.valueOf(c);
                }
            }
            tabla += "</TABLE>\n";
            return tabla;
        }else{
            String tabla = "";
            tabla += "<TABLE>\n";
            for(int i = 0; i < cadena.length(); i++){
                char c = cadena.charAt(i);
                if(c == '['){   //Inicia una fila
                    tabla += "<tr>\n<td>";
                }else if(c == ']'){ //Termina una fila
                    tabla += "</td>\n</tr>\n";
                }else if(c == '"'){    
                    //Ignorar
                }else if(c == ','){ //Nueva columna
                    tabla += "</td>\n<td>";
                }else{
                    tabla += String.valueOf(c);
                }
            }
            tabla += "</TABLE>\n";
            return tabla;
        }
    }

    public String CrearBoton(String cadena){
        if(cadena.indexOf('-') >= 0){
            String[] p = cadena.split("-");
            String[] parts = p[0].split(",");
            return "<input type=\"button\" name=" + parts[0] + " value=" + parts[1] + " onclick='alert(" + p[1] + ")'" +">"; 
             
        }else{
            String[] parts = cadena.split(",");
            return "<input type=\"button\" name=" + parts[0] + " value=" + parts[1] + ">"; 
        }
    }

    //Metodo al que se llama automaticamente ante algún error sintáctico
    public void syntax_error(Symbol s)
    {        
        System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        Esemanticos e = new Esemanticos(String.valueOf(s.value),"Sintactico", s.left + 1, s.right, "No se esperaba ese valor");
        ErroresSintacticos.add(e);
    }
 

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");
        Esemanticos e = new Esemanticos(String.valueOf(s.value),"Sintactico", s.left + 1, s.right, "No se esperaba ese valor");
        ErroresSintacticos.add(e);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Scanner$actions {


  private final Scanner parser;

  /** Constructor */
  CUP$Scanner$actions(Scanner parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Scanner$do_action_part00000000(
    int                        CUP$Scanner$act_num,
    java_cup.runtime.lr_parser CUP$Scanner$parser,
    java.util.Stack            CUP$Scanner$stack,
    int                        CUP$Scanner$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Scanner$result;

      /* select the action based on the action number */
      switch (CUP$Scanner$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		RESULT = start_val;
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Scanner$parser.done_parsing();
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= START 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		  resultado =  a; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // START ::= open compi close HEADER BODY open div compi close 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 
                                                                                                    RESULT = a + "HTML" + b + "\n" +
                                                                                                            c + "\n" +
                                                                                                            d + "\n" +
                                                                                                            e + f + "HTML" + g; 
                                                                                                
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("START",1, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-8)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // HEADER ::= open cabecera close open titulo close PARRA open div titulo close open div cabecera close 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-14)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-14)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-14)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-12)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-12)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-12)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-11)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-11)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-11)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-9)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-9)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-9)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-8)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-6)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-6)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		
                                                                                                    RESULT = a + "HEAD" + b + "\n" +
                                                                                                            "  " + c + "TITLE" + d + p + e + f + "TITLE" + g + "\n" +
                                                                                                            h + i + "HEAD" + j;
                                                                                                
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("HEADER",2, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-14)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BODY ::= open cuerpo ATRIBUTO_CUERPO close CONTENIDO open div cuerpo close 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		
                                                                                                    RESULT = a + "BODY" + " " + b + c + "\n" +
                                                                                                            d + "\n" +
                                                                                                            e + f + "BODY" + g;
                                                                                                
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("BODY",3, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-8)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BODY ::= open cuerpo close CONTENIDO open div cuerpo close 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		
                                                                                                    RESULT = a + "BODY" + b + "\n" +
                                                                                                            c + "\n" +
                                                                                                            d + e + "BODY" + f;
                                                                                                
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("BODY",3, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ATRIBUTO_CUERPO ::= fondo equal cadena 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 
                                                                                                    String X = b.replace("\"", "");
                                                                                                    String color;
                                                                                                    switch(X.toLowerCase()) {
                                                                                                        case "rojo":
                                                                                                            color = "red";
                                                                                                            break;
                                                                                                        case "amarillo":
                                                                                                            color = "yellow";
                                                                                                            break;
                                                                                                        case "azul":
                                                                                                            color = "blue";
                                                                                                            break;
                                                                                                        case "verde":
                                                                                                            color = "green";
                                                                                                            break;
                                                                                                        case "gris":
                                                                                                            color = "gray";
                                                                                                            break;
                                                                                                        case "negro":
                                                                                                            color = "black";
                                                                                                            break;
                                                                                                        case "rosado":
                                                                                                            color = "pink";
                                                                                                            break;
                                                                                                        default:
                                                                                                            color = "white";
                                                                                                            break;
                                                                                                    }
                                                                                                    RESULT = "bgcolor" + a + "\"" + color + "\""; 
                                                                                                
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("ATRIBUTO_CUERPO",4, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ATRIBUTO_CUERPO ::= fondo equal ddq rgb ddq 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = "bgcolor" + a + b + c + d; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("ATRIBUTO_CUERPO",4, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONTENIDO ::= CONTENIDO CONT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a + " " + b; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("CONTENIDO",5, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONTENIDO ::= CONT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("CONTENIDO",5, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONT ::= ESPACIO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("CONT",6, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONT ::= PARRAFO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("CONT",6, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONT ::= paragraph 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("CONT",6, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONT ::= open div salto close 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a + "br" + c + "\n";  
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("CONT",6, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONT ::= TEXTOA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("CONT",6, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONT ::= TEXTOB 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("CONT",6, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONT ::= IMAGEN 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("CONT",6, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONT ::= BOTON 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("CONT",6, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONT ::= TABLA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("CONT",6, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONT ::= SCRIPTHS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("CONT",6, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CONT ::= error close 
            {
              String RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("CONT",6, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ESPACIO ::= open espacio close CONTENIDO open div espacio close 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		
                                                                                                    RESULT = a + "DIV" + b + "\n" +
                                                                                                            c + "\n" +
                                                                                                            d + e + "DIV" + f + "\n";
                                                                                                
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("ESPACIO",7, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARRAFO ::= open parrafo ATRIBUTO_PARRA close PARRA open div parrafo close 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		
                                                                                                    RESULT = a + "p" + " " + b + c + "\n" +
                                                                                                            d + "\n" +
                                                                                                            e + f + "p" + g + "\n";
                                                                                                
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("PARRAFO",8, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-8)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARRAFO ::= open parrafo close PARRA open div parrafo close 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		  
                                                                                                    RESULT = a + "p" + b + "\n" +
                                                                                                            c + "\n" +
                                                                                                            d + e + "p" + f + "\n";
                                                                                                
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("PARRAFO",8, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARRA ::= PARRA G 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a + " " + b; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("PARRA",15, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PARRA ::= G 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("PARRA",15, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // G ::= paragraph 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a;  
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("G",46, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // G ::= open div salto close 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a + "br" + c + "\n"; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("G",46, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ATRIBUTO_PARRA ::= alineacion equal cadena 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 
                                                                                                    String X = b.replace("\"", "");
                                                                                                    String ali;
                                                                                                    switch(X.toLowerCase()) {
                                                                                                        case "izquierda":
                                                                                                            ali = "left";
                                                                                                            break;
                                                                                                        case "derecha":
                                                                                                            ali = "right";
                                                                                                            break;
                                                                                                        case "centrado":
                                                                                                            ali = "center";
                                                                                                            break;
                                                                                                        case "justificado":
                                                                                                            ali = "justify";
                                                                                                            break;
                                                                                                        default:
                                                                                                            ali = "center";
                                                                                                            break;
                                                                                                    }

                                                                                                    RESULT = "align" + a + "\"" + ali + "\""; 
                                                                                                
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("ATRIBUTO_PARRA",9, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TEXTOA ::= open textoa close PARRA open div textoa close 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a + "h1" + b + c + d + e + "h1" + f; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("TEXTOA",10, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TEXTOB ::= open textob close PARRA open div textob close 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a + "h2" + b + c + d + e + "h2" + f; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("TEXTOB",11, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IMAGEN ::= open imagen ATRIBUTOS_IMAGEN close open div imagen close 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).value;
		 RESULT = a + "img " + b + c; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("IMAGEN",12, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ATRIBUTOS_IMAGEN ::= ATRIBUTOS_IMAGEN ATRI_IMAGE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a + " " + b; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS_IMAGEN",13, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ATRIBUTOS_IMAGEN ::= ATRI_IMAGE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS_IMAGEN",13, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ATRI_IMAGE ::= path equal cadena 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = "src" + a + b; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("ATRI_IMAGE",14, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ATRI_IMAGE ::= alto equal numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = "height" + a + "\"" + b + "\""; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("ATRI_IMAGE",14, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ATRI_IMAGE ::= ancho equal numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = "width" + a + "\"" + b + "\""; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("ATRI_IMAGE",14, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BOTON ::= open boton ATRIBUTOS_BOTON close open div boton close 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).value;
		 RESULT = a + "input type=\"button\"" + " " + b + c; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("BOTON",16, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ATRIBUTOS_BOTON ::= ATRIBUTOS_BOTON ATRI_BTN 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a + " " + b; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS_BOTON",17, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ATRIBUTOS_BOTON ::= ATRI_BTN 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS_BOTON",17, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ATRI_BTN ::= id equal cadena 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = "name" + a + b; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("ATRI_BTN",18, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ATRI_BTN ::= texto equal cadena 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = "value" + a + b; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("ATRI_BTN",18, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TABLA ::= open tabla ATRIBUTO_TABLA close LISTA_FILAS open div tabla close 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 
                                                                                                    RESULT = a + "TABLE" + " " + b + c + "\n" +
                                                                                                            d + "\n" +
                                                                                                            e + f + "TABLE" + g;
                                                                                                
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("TABLA",19, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-8)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TABLA ::= open tabla close LISTA_FILAS open div tabla close 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		  
                                                                                                    RESULT = a + "TABLE" + b + "\n" +
                                                                                                            c + "\n" +
                                                                                                            d + e + "TABLE" + f + "\n";
                                                                                                
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("TABLA",19, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ATRIBUTO_TABLA ::= borde equal true_ 
            {
              String RESULT =null;
		 RESULT = "border = \"1\""; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("ATRIBUTO_TABLA",20, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ATRIBUTO_TABLA ::= borde equal false_ 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("ATRIBUTO_TABLA",20, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LISTA_FILAS ::= LISTA_FILAS FILA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a + b; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("LISTA_FILAS",21, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LISTA_FILAS ::= FILA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("LISTA_FILAS",21, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FILA ::= open fila close LISTA_COLUMNA open div fila close 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		  
                                                                                                    RESULT = "\n" + a + "tr" + b + "\n" +
                                                                                                            c +
                                                                                                            d + e + "tr" + f;
                                                                                                
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("FILA",22, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LISTA_COLUMNA ::= LISTA_COLUMNA COLUMNA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a + b; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("LISTA_COLUMNA",23, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LISTA_COLUMNA ::= COLUMNA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("LISTA_COLUMNA",23, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // COLUMNA ::= open columnac close CONTENIDO open div columnac close 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 
                                                                                                    RESULT = "\n" + a + "th" + b + c + d + e + "th" + f;
                                                                                                
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("COLUMNA",24, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // COLUMNA ::= open columna close CONTENIDO open div columna close 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		  
                                                                                                    RESULT = "\n" + a + "td" + b + c + d + e + "td" + f;
                                                                                                
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("COLUMNA",24, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SCRIPTHS ::= beginHS CUERPO_HSC endHS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		 RESULT = a; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("SCRIPTHS",25, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CUERPO_HSC ::= CUERPO_HSC SCRIPT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a + " " + b; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("CUERPO_HSC",26, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CUERPO_HSC ::= SCRIPT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("CUERPO_HSC",26, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SCRIPT ::= DECLARACION 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("SCRIPT",27, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SCRIPT ::= IMPRESION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 
                                                                                        RESULT = "";
                                                                                        consola += a + "\n"; 
                                                                                    
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("SCRIPT",27, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SCRIPT ::= IF 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("SCRIPT",27, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SCRIPT ::= REPETIR 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("SCRIPT",27, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SCRIPT ::= hashtag identificador equal STRUCT semicolon 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		
                                                                                        RESULT = "";
                                                                                        definirFuncion(a,b);
                                                                                    
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("SCRIPT",27, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SCRIPT ::= hashtag identificador dot SET semicolon 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		
                                                                                        RESULT = "";
                                                                                        String[] parts = b.split("@");    
                                                                                        String tipoSet = parts[0].toLowerCase();
                                                                                        String valor = parts[1];        
                                                                                        for(int i = 0; i < lista_objetos.size(); i++){
                                                                                            if(lista_objetos.get(i).nombre.equals(a)){
                                                                                                if(lista_objetos.get(i).tipo.equals("parrafo")){
                                                                                                    if(tipoSet.equals("setcontenido")){
                                                                                                        lista_objetos.get(i).valor = setContenidoParrafo(lista_objetos.get(i).valor, valor);
                                                                                                    }else if(tipoSet.equals("setalineacion")){
                                                                                                        lista_objetos.get(i).valor = setAlineacionParrafo(lista_objetos.get(i).valor, valor);
                                                                                                    }
                                                                                                }else if(lista_objetos.get(i).tipo.equals("textoa")){
                                                                                                    lista_objetos.get(i).valor = valor;            
                                                                                                }else if(lista_objetos.get(i).tipo.equals("textob")){
                                                                                                    lista_objetos.get(i).valor = valor;
                                                                                                }else if(lista_objetos.get(i).tipo.equals("imagen")){
                                                                                                    if(tipoSet.equals("setpath")){
                                                                                                        lista_objetos.get(i).valor = setPathImagen(lista_objetos.get(i).valor, valor);
                                                                                                    }else if(tipoSet.equals("setalto")){
                                                                                                        lista_objetos.get(i).valor = setAltoImagen(lista_objetos.get(i).valor, valor);
                                                                                                    }else if(tipoSet.equals("setancho")){
                                                                                                        lista_objetos.get(i).valor = setAnchoImagen(lista_objetos.get(i).valor, valor);
                                                                                                    }
                                                                                                }else if(lista_objetos.get(i).tipo.equals("tabla")){
                                                                                                    lista_objetos.get(i).valor += "-true";
                                                                                                }else if(lista_objetos.get(i).tipo.equals("boton")){
                                                                                                    lista_objetos.get(i).valor += "-" + valor;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("SCRIPT",27, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SCRIPT ::= hashtag identificador dot insertar opar cpar semicolon 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).value;
		
                                                                                        int creado = 0;
                                                                                        for(int i = 0; i < lista_objetos.size(); i++){
                                                                                            if(lista_objetos.get(i).nombre.equals(a)){
                                                                                                if(lista_objetos.get(i).tipo.equals("parrafo")){
                                                                                                    RESULT = CrearParrafo(lista_objetos.get(i).valor);
                                                                                                    creado = 1;
                                                                                                }else if(lista_objetos.get(i).tipo.equals("textoa")){
                                                                                                    RESULT = "<h1>" + lista_objetos.get(i).valor.replace("\"", "") + "</h1>\n";
                                                                                                    creado = 1;
                                                                                                }else if(lista_objetos.get(i).tipo.equals("textob")){
                                                                                                    RESULT = "<h2>" + lista_objetos.get(i).valor.replace("\"", "") + "</h2>\n";
                                                                                                    creado = 1;
                                                                                                }else if(lista_objetos.get(i).tipo.equals("imagen")){
                                                                                                    RESULT = CrearImagen(lista_objetos.get(i).valor);
                                                                                                    creado = 1;
                                                                                                }else if(lista_objetos.get(i).tipo.equals("tabla")){
                                                                                                    RESULT = CrearTabla(lista_objetos.get(i).valor);
                                                                                                    creado = 1;
                                                                                                }else if(lista_objetos.get(i).tipo.equals("boton")){
                                                                                                    RESULT = CrearBoton(lista_objetos.get(i).valor);
                                                                                                    creado = 1;
                                                                                                }
                                                                                            }
                                                                                            if(creado == 1){ break; }
                                                                                        }
                                                                                    
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("SCRIPT",27, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-6)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SCRIPT ::= error semicolon 
            {
              String RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("SCRIPT",27, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= dolar identificador equal EXP semicolon 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		
                                                                                                    String tipo = getTipo(b);
                                                                                                    int encontrado = 0;
                                                                                                    for(Variable aux: lista_variables){
                                                                                                        if(aux.nombre.equals(a)){
                                                                                                            aux.tipo = tipo;
                                                                                                            aux.valor = b;
                                                                                                            encontrado = 1;
                                                                                                        }
                                                                                                        if(encontrado == 1){ break; }
                                                                                                    } 

                                                                                                    if(encontrado == 0){
                                                                                                        Variable v = new Variable(tipo,a, b, String.valueOf(aleft),String.valueOf(aright));
                                                                                                        lista_variables.add(v);
                                                                                                    }
                                                                                                
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("DECLARACION",28, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= dolar identificador equal hashtag identificador dot GET semicolon 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		
                                                                                                    String valor = getValorAtributo(b,c);
                                                                                                    String tipo = getTipo(valor);
                                                                                                    int encontrado = 0;
                                                                                                    for(Variable aux: lista_variables){
                                                                                                        if(aux.nombre.equals(a)){
                                                                                                            aux.tipo = tipo;
                                                                                                            aux.valor = valor;
                                                                                                            encontrado = 1;
                                                                                                        }
                                                                                                        if(encontrado == 1){ break; }
                                                                                                    } 
                                                                                                    
                                                                                                    if(encontrado == 0){
                                                                                                        Variable v = new Variable(tipo,a,valor,String.valueOf(aleft),String.valueOf(aright));
                                                                                                        lista_variables.add(v);
                                                                                                    }
                                                                                                
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("DECLARACION",28, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IMPRESION ::= echo LISTA_IMPRESION semicolon 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		 RESULT = a;  
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("IMPRESION",29, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LISTA_IMPRESION ::= LISTA_IMPRESION dot VALOR_STRING 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a + b.replace("\"", ""); 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("LISTA_IMPRESION",30, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LISTA_IMPRESION ::= VALOR_STRING 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a.replace("\"", ""); 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("LISTA_IMPRESION",30, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VALOR_STRING ::= cadena 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("VALOR_STRING",31, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VALOR_STRING ::= dolar identificador 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		  
                                                                                                    for(Variable aux: lista_variables){
                                                                                                        if(aux.nombre.equals(a)){
                                                                                                            RESULT = aux.valor;
                                                                                                            break;
                                                                                                        }
                                                                                                    }
                                                                                                
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("VALOR_STRING",31, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VALOR_STRING ::= hashtag identificador dot GET 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		
                                                                                                    String valor = getValorAtributo(b,c);
                                                                                                    RESULT = valor;
                                                                                                
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("VALOR_STRING",31, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CUERPO_SENTENCIA ::= CUERPO_SENTENCIA SENTENCIA 
            {
              String RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("CUERPO_SENTENCIA",45, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CUERPO_SENTENCIA ::= SENTENCIA 
            {
              String RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("CUERPO_SENTENCIA",45, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA ::= IMPRESION 
            {
              String RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("SENTENCIA",47, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA ::= IF 
            {
              String RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("SENTENCIA",47, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIA ::= REPETIR 
            {
              String RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("SENTENCIA",47, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA ::= hashtag identificador dot insertar opar cpar semicolon 
            {
              String RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("SENTENCIA",47, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-6)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // IF ::= if_ opar EXP cpar ollv CUERPO_SENTENCIA IF_OPCION 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("IF",32, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-6)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // IF_OPCION ::= ELSE cllv 
            {
              String RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("IF_OPCION",33, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // IF_OPCION ::= cllv 
            {
              String RESULT =null;

              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("IF_OPCION",33, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ELSE ::= cllv else_ ollv CUERPO_SENTENCIA 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("ELSE",34, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // REPETIR ::= repetir opar EXP cpar ollv CUERPO_SENTENCIA cllv 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("REPETIR",35, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-6)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // STRUCT ::= crearparrafo opar VALOR_STRING comma VALOR_STRING cpar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		 RESULT = a + "-" + b + "@" + d; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("STRUCT",36, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // STRUCT ::= crearparrafo opar VALOR_STRING cpar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		 RESULT = a + "-" + b; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("STRUCT",36, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // STRUCT ::= creartextoa opar VALOR_STRING cpar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		 RESULT = a + "-" + b; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("STRUCT",36, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // STRUCT ::= creartextob opar VALOR_STRING cpar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		 RESULT = a + "-" + b; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("STRUCT",36, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // STRUCT ::= crearimagen opar VALOR_STRING cpar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		 RESULT = a + "-" + b; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("STRUCT",36, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // STRUCT ::= crearimagen opar VALOR_STRING comma EXP comma EXP cpar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		 RESULT = a + "-" + b + c + d + e + f; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("STRUCT",36, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-7)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // STRUCT ::= creartabla opar LIST_ROWS cpar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		 RESULT = a + "-" + b; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("STRUCT",36, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // STRUCT ::= crearboton opar VALOR_STRING comma VALOR_STRING cpar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		 RESULT = a + "-" + b + c + d; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("STRUCT",36, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-5)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LIST_ROWS ::= LIST_ROWS comma ROW 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a + b + c; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("LIST_ROWS",37, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LIST_ROWS ::= ROW 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("LIST_ROWS",37, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ROW ::= ocorch LIST_COLUMN ccorch 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a + b + c; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("ROW",38, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LIST_COLUMN ::= LIST_COLUMN comma EXP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a + b + c; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("LIST_COLUMN",39, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LIST_COLUMN ::= EXP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("LIST_COLUMN",39, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SET ::= setcontenido opar VALOR_STRING cpar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		 RESULT = a + "@" + b; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("SET",40, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SET ::= setalineacion opar VALOR_STRING cpar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		 RESULT = a + "@" + b; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("SET",40, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SET ::= setpath opar VALOR_STRING cpar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		 RESULT = a + "@" + b; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("SET",40, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SET ::= setalto opar EXP cpar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		 RESULT = a + "@" + b; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("SET",40, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SET ::= setancho opar EXP cpar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		 RESULT = a + "@" + b; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("SET",40, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SET ::= setborde opar VALOR_BOOLEANO cpar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		 RESULT = a + "@" + b; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("SET",40, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SET ::= settexto opar VALOR_STRING cpar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		 RESULT = a + "@" + b; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("SET",40, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SET ::= clickboton opar VALOR_STRING cpar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		 RESULT = a + "@" + b; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("SET",40, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-3)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // GET ::= getcontenido opar cpar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		 RESULT = a; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("GET",41, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // GET ::= getalineacion opar cpar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		 RESULT = a; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("GET",41, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // GET ::= getpath opar cpar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		 RESULT = a; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("GET",41, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // GET ::= getalto opar cpar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		 RESULT = a; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("GET",41, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // GET ::= getancho opar cpar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		 RESULT = a; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("GET",41, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // GET ::= gettexto opar cpar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		 RESULT = a; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("GET",41, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // VALOR_BOOLEANO ::= true_ 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("VALOR_BOOLEANO",42, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // VALOR_BOOLEANO ::= false_ 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("VALOR_BOOLEANO",42, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // VALOR_BOOLEANO ::= dolar identificador 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		  
                                                                                                    for(Variable aux: lista_variables){
                                                                                                        if(aux.nombre.equals(a)){
                                                                                                        RESULT = aux.valor;
                                                                                                        break;
                                                                                                        }
                                                                                                    } 
                                                                                                
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("VALOR_BOOLEANO",42, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXP ::= EXP or EXP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		
                                                            boolean val1 = Boolean.parseBoolean(a);
                                                            boolean val2 = Boolean.parseBoolean(b);
                                                            boolean r = val1 || val2;
                                                            RESULT = Boolean.toString(r);
                                                        
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("EXP",43, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXP ::= EXP dot EXP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		
                                                            String concat = a + b;
                                                            RESULT = concat;
                                                        
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("EXP",43, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXP ::= EXP and EXP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		
                                                            boolean val1 = Boolean.parseBoolean(a);
                                                            boolean val2 = Boolean.parseBoolean(b);
                                                            boolean r = val1 && val2;
                                                            RESULT = Boolean.toString(r);
                                                        
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("EXP",43, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXP ::= not EXP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		
                                                            boolean val = Boolean.parseBoolean(a);
                                                            boolean r = !val;
                                                            RESULT = Boolean.toString(r);
                                                        
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("EXP",43, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXP ::= EXP mayor EXP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		
                                                            String tipo1 = getTipo(a);
                                                            String tipo2 = getTipo(b);
                                                            if(tipo1.equals("Entero") && tipo2.equals("Entero")){
                                                                int num1 = Integer.valueOf(a);
                                                                int num2 = Integer.valueOf(b);
                                                                boolean r = num1 > num2;
                                                                RESULT = Boolean.toString(r);
                                                            }else if(tipo1.equals("Decimal") && tipo2.equals("Decimal")){
                                                                double num1 = Double.parseDouble(a);
                                                                double num2 = Double.parseDouble(b);
                                                                boolean r = num1 > num2; 
                                                                RESULT = Boolean.toString(r);  
                                                            }else if(tipo1.equals("Decimal") && tipo2.equals("Entero")){
                                                                double num1 = Double.parseDouble(a);
                                                                int num2 = Integer.valueOf(b);
                                                                boolean r = num1 > num2;
                                                                RESULT = Boolean.toString(r);
                                                            }else if(tipo1.equals("Entero") && tipo2.equals("Decimal")){
                                                                int num1 = Integer.valueOf(a);
                                                                double num2 = Double.parseDouble(b);
                                                                boolean r = num1 > num2;
                                                                RESULT = Boolean.toString(r);
                                                            }
                                                        
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("EXP",43, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXP ::= EXP menor EXP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		
                                                            String tipo1 = getTipo(a);
                                                            String tipo2 = getTipo(b);
                                                            if(tipo1.equals("Entero") && tipo2.equals("Entero")){
                                                                int num1 = Integer.valueOf(a);
                                                                int num2 = Integer.valueOf(b);
                                                                boolean r = num1 < num2;
                                                                RESULT = Boolean.toString(r);
                                                            }else if(tipo1.equals("Decimal") && tipo2.equals("Decimal")){
                                                                double num1 = Double.parseDouble(a);
                                                                double num2 = Double.parseDouble(b);
                                                                boolean r = num1 < num2; 
                                                                RESULT = Boolean.toString(r);  
                                                            }else if(tipo1.equals("Decimal") && tipo2.equals("Entero")){
                                                                double num1 = Double.parseDouble(a);
                                                                int num2 = Integer.valueOf(b);
                                                                boolean r = num1 < num2;
                                                                RESULT = Boolean.toString(r);
                                                            }else if(tipo1.equals("Entero") && tipo2.equals("Decimal")){
                                                                int num1 = Integer.valueOf(a);
                                                                double num2 = Double.parseDouble(b);
                                                                boolean r = num1 < num2;
                                                                RESULT = Boolean.toString(r);
                                                            }
                                                        
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("EXP",43, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXP ::= EXP menorque EXP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		
                                                            String tipo1 = getTipo(a);
                                                            String tipo2 = getTipo(b);
                                                            if(tipo1.equals("Entero") && tipo2.equals("Entero")){
                                                                int num1 = Integer.valueOf(a);
                                                                int num2 = Integer.valueOf(b);
                                                                boolean r = num1 <= num2;
                                                                RESULT = Boolean.toString(r);
                                                            }else if(tipo1.equals("Decimal") && tipo2.equals("Decimal")){
                                                                double num1 = Double.parseDouble(a);
                                                                double num2 = Double.parseDouble(b);
                                                                boolean r = num1 <= num2; 
                                                                RESULT = Boolean.toString(r);  
                                                            }else if(tipo1.equals("Decimal") && tipo2.equals("Entero")){
                                                                double num1 = Double.parseDouble(a);
                                                                int num2 = Integer.valueOf(b);
                                                                boolean r = num1 <= num2;
                                                                RESULT = Boolean.toString(r);
                                                            }else if(tipo1.equals("Entero") && tipo2.equals("Decimal")){
                                                                int num1 = Integer.valueOf(a);
                                                                double num2 = Double.parseDouble(b);
                                                                boolean r = num1 <= num2;
                                                                RESULT = Boolean.toString(r);
                                                            }
                                                        
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("EXP",43, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXP ::= EXP mayorque EXP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		
                                                            String tipo1 = getTipo(a);
                                                            String tipo2 = getTipo(b);
                                                            if(tipo1.equals("Entero") && tipo2.equals("Entero")){
                                                                int num1 = Integer.valueOf(a);
                                                                int num2 = Integer.valueOf(b);
                                                                boolean r = num1 >= num2;
                                                                RESULT = Boolean.toString(r);
                                                            }else if(tipo1.equals("Decimal") && tipo2.equals("Decimal")){
                                                                double num1 = Double.parseDouble(a);
                                                                double num2 = Double.parseDouble(b);
                                                                boolean r = num1 >= num2; 
                                                                RESULT = Boolean.toString(r);  
                                                            }else if(tipo1.equals("Decimal") && tipo2.equals("Entero")){
                                                                double num1 = Double.parseDouble(a);
                                                                int num2 = Integer.valueOf(b);
                                                                boolean r = num1 >= num2;
                                                                RESULT = Boolean.toString(r);
                                                            }else if(tipo1.equals("Entero") && tipo2.equals("Decimal")){
                                                                int num1 = Integer.valueOf(a);
                                                                double num2 = Double.parseDouble(b);
                                                                boolean r = num1 >= num2;
                                                                RESULT = Boolean.toString(r);
                                                            }
                                                        
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("EXP",43, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXP ::= EXP diferente EXP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		
                                                            String tipo1 = getTipo(a);
                                                            String tipo2 = getTipo(b);
                                                            if(tipo1.equals("Entero") && tipo2.equals("Entero")){
                                                                int num1 = Integer.valueOf(a);
                                                                int num2 = Integer.valueOf(b);
                                                                boolean r = num1 != num2;
                                                                RESULT = Boolean.toString(r);
                                                            }else if(tipo1.equals("Decimal") && tipo2.equals("Decimal")){
                                                                double num1 = Double.parseDouble(a);
                                                                double num2 = Double.parseDouble(b);
                                                                boolean r = num1 != num2; 
                                                                RESULT = Boolean.toString(r);  
                                                            }else if(tipo1.equals("Decimal") && tipo2.equals("Entero")){
                                                                double num1 = Double.parseDouble(a);
                                                                int num2 = Integer.valueOf(b);
                                                                boolean r = num1 != num2;
                                                                RESULT = Boolean.toString(r);
                                                            }else if(tipo1.equals("Entero") && tipo2.equals("Decimal")){
                                                                int num1 = Integer.valueOf(a);
                                                                double num2 = Double.parseDouble(b);
                                                                boolean r = num1 != num2;
                                                                RESULT = Boolean.toString(r);
                                                            }else if(tipo1.equals("Booleano") && tipo2.equals("Booleano")){
                                                                boolean val1 = Boolean.parseBoolean(a);
                                                                boolean val2 = Boolean.parseBoolean(b);
                                                                boolean r = val1 != val2;
                                                                RESULT = Boolean.toString(r);
                                                            }
                                                        
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("EXP",43, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXP ::= EXP igualque EXP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		
                                                            String tipo1 = getTipo(a);
                                                            String tipo2 = getTipo(b);
                                                            if(tipo1.equals("Entero") && tipo2.equals("Entero")){
                                                                int num1 = Integer.valueOf(a);
                                                                int num2 = Integer.valueOf(b);
                                                                boolean r = num1 == num2;
                                                                RESULT = Boolean.toString(r);
                                                            }else if(tipo1.equals("Decimal") && tipo2.equals("Decimal")){
                                                                double num1 = Double.parseDouble(a);
                                                                double num2 = Double.parseDouble(b);
                                                                boolean r = num1 == num2; 
                                                                RESULT = Boolean.toString(r);  
                                                            }else if(tipo1.equals("Decimal") && tipo2.equals("Entero")){
                                                                double num1 = Double.parseDouble(a);
                                                                int num2 = Integer.valueOf(b);
                                                                boolean r = num1 == num2;
                                                                RESULT = Boolean.toString(r);
                                                            }else if(tipo1.equals("Entero") && tipo2.equals("Decimal")){
                                                                int num1 = Integer.valueOf(a);
                                                                double num2 = Double.parseDouble(b);
                                                                boolean r = num1 == num2;
                                                                RESULT = Boolean.toString(r);
                                                            }else if(tipo1.equals("Booleano") && tipo2.equals("Booleano")){
                                                                boolean val1 = Boolean.parseBoolean(a);
                                                                boolean val2 = Boolean.parseBoolean(b);
                                                                boolean r = val1 == val2;
                                                                RESULT = Boolean.toString(r);
                                                            }                                                        
                                                        
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("EXP",43, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXP ::= EXP plus EXP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		
                                                            String tipo1 = getTipo(a);
                                                            String tipo2 = getTipo(b);
                                                            if(tipo1.equals("Entero") && tipo2.equals("Entero")){   //Tipo Entero
                                                                int num1 = Integer.valueOf(a);
                                                                int num2 = Integer.valueOf(b);
                                                                int sum = num1 + num2;
                                                                RESULT = String.valueOf(sum);
                                                            }else if(tipo1.equals("Decimal") && tipo2.equals("Decimal")){   //Tipo Decimal
                                                                double num1 = Double.parseDouble(a);
                                                                double num2 = Double.parseDouble(b);
                                                                double sum = num1 + num2;
                                                                RESULT = String.valueOf(sum);
                                                            }else{  //Tipo entero (truncar valores)
                                                                int num1 = getValor(a);
                                                                int num2 = getValor(b);
                                                                int sum = num1 + num2;
                                                                RESULT = String.valueOf(sum);
                                                            }                         
                                                        
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("EXP",43, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXP ::= EXP hypen EXP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		
                                                            String tipo1 = getTipo(a);
                                                            String tipo2 = getTipo(b);
                                                            if(tipo1.equals("Entero") && tipo2.equals("Entero")){   //Tipo Entero
                                                                int num1 = Integer.valueOf(a);
                                                                int num2 = Integer.valueOf(b);
                                                                int sum = num1 - num2;
                                                                RESULT = String.valueOf(sum);
                                                            }else if(tipo1.equals("Decimal") && tipo2.equals("Decimal")){   //Tipo Decimal
                                                                double num1 = Double.parseDouble(a);
                                                                double num2 = Double.parseDouble(b);
                                                                double sum = num1 - num2;
                                                                RESULT = String.valueOf(sum);
                                                            }else{  //Tipo entero (truncar valores)
                                                                int num1 = getValor(a);
                                                                int num2 = getValor(b);
                                                                int sum = num1 - num2;
                                                                RESULT = String.valueOf(sum);
                                                            }             
                                                        
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("EXP",43, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXP ::= EXP div EXP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		
                                                            String tipo1 = getTipo(a);
                                                            String tipo2 = getTipo(b);
                                                            if(tipo1.equals("Entero") && tipo2.equals("Entero")){   //Tipo Entero
                                                                int num1 = Integer.valueOf(a);
                                                                int num2 = Integer.valueOf(b);
                                                                int sum = num1 / num2;
                                                                RESULT = String.valueOf(sum);
                                                            }else if(tipo1.equals("Decimal") && tipo2.equals("Decimal")){   //Tipo Decimal
                                                                double num1 = Double.parseDouble(a);
                                                                double num2 = Double.parseDouble(b);
                                                                double sum = num1 / num2;
                                                                RESULT = String.valueOf(sum);
                                                            }else{  //Tipo entero (truncar valores)
                                                                int num1 = getValor(a);
                                                                int num2 = getValor(b);
                                                                int sum = num1 / num2;
                                                                RESULT = String.valueOf(sum);
                                                            }             
                                                        
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("EXP",43, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // EXP ::= EXP asterisk EXP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		
                                                            String tipo1 = getTipo(a);
                                                            String tipo2 = getTipo(b);
                                                            if(tipo1.equals("Entero") && tipo2.equals("Entero")){   //Tipo Entero
                                                                int num1 = Integer.valueOf(a);
                                                                int num2 = Integer.valueOf(b);
                                                                int sum = num1 * num2;
                                                                RESULT = String.valueOf(sum);
                                                            }else if(tipo1.equals("Decimal") && tipo2.equals("Decimal")){   //Tipo Decimal
                                                                double num1 = Double.parseDouble(a);
                                                                double num2 = Double.parseDouble(b);
                                                                double sum = num1 * num2;
                                                                RESULT = String.valueOf(sum);
                                                            }else{  //Tipo entero (truncar valores)
                                                                int num1 = getValor(a);
                                                                int num2 = getValor(b);
                                                                int sum = num1 * num2;
                                                                RESULT = String.valueOf(sum);
                                                            }             
                                                        
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("EXP",43, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // EXP ::= hypen EXP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		
                                                            String tipo1 = getTipo(a);
                                                            if(tipo1.equals("Entero")){
                                                                int num1 = Integer.valueOf(a);
                                                                num1 = -1*num1;
                                                                RESULT = String.valueOf(num1);
                                                            }else if(tipo1.equals("Decimal")){
                                                                double num1 = Double.parseDouble(a);
                                                                double num = -1*num1;
                                                                RESULT = String.valueOf(num);
                                                            }
                                                        
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("EXP",43, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // EXP ::= opar EXP cpar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)).value;
		
                                                            RESULT = a;
                                                        
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("EXP",43, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-2)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // EXP ::= VALOR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		
                                                            RESULT = a;
                                                        
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("EXP",43, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // VALOR ::= cadena 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("VALOR",44, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // VALOR ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("VALOR",44, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // VALOR ::= true_ 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("VALOR",44, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // VALOR ::= false_ 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 RESULT = a; 
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("VALOR",44, ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // VALOR ::= dolar identificador 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Scanner$stack.peek()).value;
		 
                                                            for(Variable aux: lista_variables){
                                                                if(aux.nombre.equals(a)){
                                                                    RESULT = aux.valor;
                                                                    break;
                                                                }
                                                            }
                                                        
              CUP$Scanner$result = parser.getSymbolFactory().newSymbol("VALOR",44, ((java_cup.runtime.Symbol)CUP$Scanner$stack.elementAt(CUP$Scanner$top-1)), ((java_cup.runtime.Symbol)CUP$Scanner$stack.peek()), RESULT);
            }
          return CUP$Scanner$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Scanner$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Scanner$do_action(
    int                        CUP$Scanner$act_num,
    java_cup.runtime.lr_parser CUP$Scanner$parser,
    java.util.Stack            CUP$Scanner$stack,
    int                        CUP$Scanner$top)
    throws java.lang.Exception
    {
              return CUP$Scanner$do_action_part00000000(
                               CUP$Scanner$act_num,
                               CUP$Scanner$parser,
                               CUP$Scanner$stack,
                               CUP$Scanner$top);
    }
}

}
