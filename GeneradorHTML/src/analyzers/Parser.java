/* The following code was generated by JFlex 1.6.1 */

package analyzers;
import java_cup.runtime.*;
import java.io.Reader;
import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/analyzers/Lexer.jflex</tt>
 */
public class Parser implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int HSC = 2;
  public static final int TAG = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
    10, 10, 10, 10, 10, 10, 10, 10, 10, 18,  4, 56, 18, 16, 10, 10, 
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 56, 56, 56, 56, 
    18, 12,  3,  9, 44, 56, 47, 17, 51, 52, 13, 45, 55, 46,  7, 15, 
     6,  6,  6,  6,  6,  6,  6,  6,  6,  6, 10, 43, 11, 40, 14, 19, 
    56, 29, 30, 23,  8, 31, 36, 38, 20, 28,  1, 42, 35, 25, 37, 24, 
    26,  1, 32, 22, 33, 34,  1,  1, 39,  1,  1, 53,  5, 54, 56,  2, 
    56, 29, 30, 23,  8, 31, 36, 38, 20, 28,  1, 42, 35, 25, 37, 24, 
    26,  1, 32, 22, 33, 34,  1,  1, 39,  1,  1, 49, 48, 50, 56, 10, 
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
    56, 10, 10, 10, 10, 10, 56, 56, 56, 56, 10, 56, 56, 10, 56, 56, 
    56, 56, 56, 56, 56, 10, 56, 56, 56, 56, 10, 56, 56, 56, 56, 10, 
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
    10, 10, 10, 10, 10, 10, 10, 56, 10, 10, 10, 10, 10, 10, 10, 10, 
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
    10, 10, 10, 10, 10, 10, 10, 56, 10, 10, 10, 10, 10, 10, 10, 10
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\3\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\2\1\0\2\5\1\0\7\5\1\17\1\20\1\21"+
    "\1\22\1\23\2\2\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\2\1\33\1\16\1\0\3\2\1\0"+
    "\6\2\1\17\3\0\1\34\2\0\1\35\1\36\1\37"+
    "\1\0\1\3\1\40\1\0\3\5\1\41\1\0\1\41"+
    "\10\5\1\42\1\43\1\44\6\0\1\45\17\0\1\34"+
    "\1\7\3\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\2\5\1\0\5\5\26\0\1\3\1\46\1\0\1\3"+
    "\5\0\6\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\47\2\50\1\5\1\51\1\0\5\5\7\0\1\52"+
    "\1\0\1\53\7\0\1\51\1\0\1\54\6\0\7\5"+
    "\1\0\1\5\1\0\1\5\1\0\2\5\2\55\5\5"+
    "\1\0\1\56\1\57\5\0\1\60\1\61\1\62\2\0"+
    "\1\63\1\64\1\65\7\0\10\5\1\0\3\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\3\5\1\0"+
    "\4\5\3\0\1\66\1\0\1\67\1\0\1\70\1\71"+
    "\1\72\1\0\1\73\1\0\1\74\3\0\1\5\1\73"+
    "\1\5\1\74\4\5\1\0\4\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\2\75\1\5\1\76\1\0\1\5"+
    "\1\77\2\5\1\100\1\101\1\0\1\102\1\103\2\0"+
    "\1\104\1\105\1\106\2\5\1\104\1\105\1\106\1\5"+
    "\1\0\4\5\1\0\1\5\2\107\1\0\2\5\1\0"+
    "\1\5\1\110\1\111\1\112\1\113\2\0\3\5\1\0"+
    "\4\5\1\0\1\5\1\0\2\5\1\0\1\5\2\0"+
    "\3\5\1\0\1\5\1\114\1\115\1\5\2\116\2\117"+
    "\1\0\1\5\1\0\1\5\2\0\3\5\2\120\1\121"+
    "\1\122\1\0\1\5\1\0\1\5\1\123\1\0\1\123"+
    "\1\5\1\124\2\125\1\0\1\5\2\126\2\127";

  private static int [] zzUnpackAction() {
    int [] result = new int[422];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\344\0\u011d\0\u0156"+
    "\0\u018f\0\u01c8\0\u0201\0\344\0\344\0\u023a\0\u0273\0\344"+
    "\0\u02ac\0\u02e5\0\u031e\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b"+
    "\0\u0474\0\u04ad\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\344"+
    "\0\344\0\344\0\344\0\u0603\0\u063c\0\344\0\344\0\344"+
    "\0\344\0\344\0\344\0\344\0\u0675\0\344\0\344\0\u06ae"+
    "\0\u06ae\0\u06e7\0\u0720\0\u0759\0\u0759\0\u0792\0\u07cb\0\u0804"+
    "\0\u083d\0\u0876\0\344\0\u08af\0\u08e8\0\u01c8\0\344\0\u0921"+
    "\0\u095a\0\344\0\344\0\344\0\u0993\0\u09cc\0\344\0\u0a05"+
    "\0\u0a3e\0\u0a77\0\u0ab0\0\344\0\u0ae9\0\u018f\0\u0b22\0\u0b5b"+
    "\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\344\0\344"+
    "\0\344\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\344"+
    "\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf"+
    "\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u01c8"+
    "\0\u095a\0\u1197\0\u11d0\0\u1209\0\u1242\0\u127b\0\u12b4\0\u12ed"+
    "\0\u1326\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5"+
    "\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d"+
    "\0\u16b6\0\u16ef\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845"+
    "\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4\0\u1a0d"+
    "\0\u1a46\0\u10ec\0\344\0\u1a7f\0\u1197\0\u1ab8\0\u1af1\0\u1b2a"+
    "\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2"+
    "\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\u018f\0\344"+
    "\0\u018f\0\u1e81\0\u018f\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e"+
    "\0\u1fd7\0\u2010\0\u2049\0\u2082\0\u20bb\0\u20f4\0\u212d\0\u2166"+
    "\0\344\0\u219f\0\344\0\u21d8\0\u2211\0\u224a\0\u2283\0\u22bc"+
    "\0\u22f5\0\u232e\0\344\0\u2367\0\344\0\u23a0\0\u23d9\0\u2412"+
    "\0\u244b\0\u2484\0\u24bd\0\u24f6\0\u252f\0\u2568\0\u25a1\0\u25da"+
    "\0\u2613\0\u264c\0\u2685\0\u26be\0\u26f7\0\u2730\0\u2769\0\u27a2"+
    "\0\u27db\0\344\0\u018f\0\u2814\0\u284d\0\u2886\0\u28bf\0\u28f8"+
    "\0\u2931\0\344\0\344\0\u296a\0\u29a3\0\u29dc\0\u2a15\0\u2a4e"+
    "\0\344\0\344\0\344\0\u2a87\0\u2ac0\0\344\0\u2af9\0\344"+
    "\0\u2b32\0\u2b6b\0\u2ba4\0\u2bdd\0\u2c16\0\u2c4f\0\u2c88\0\u2cc1"+
    "\0\u2cfa\0\u2d33\0\u2d6c\0\u2da5\0\u2dde\0\u2e17\0\u2e50\0\u2e89"+
    "\0\u2ec2\0\u2efb\0\u2f34\0\u2f6d\0\u2fa6\0\u2fdf\0\u3018\0\u3051"+
    "\0\u308a\0\u30c3\0\u30fc\0\u3135\0\u316e\0\u31a7\0\u31e0\0\u3219"+
    "\0\u3252\0\u328b\0\u32c4\0\u32fd\0\u3336\0\344\0\u336f\0\344"+
    "\0\u33a8\0\344\0\344\0\344\0\u33e1\0\344\0\u341a\0\344"+
    "\0\u3453\0\u348c\0\u34c5\0\u34fe\0\u018f\0\u3537\0\u018f\0\u3570"+
    "\0\u35a9\0\u35e2\0\u361b\0\u3654\0\u368d\0\u36c6\0\u36ff\0\u3738"+
    "\0\u3771\0\u37aa\0\u37e3\0\u381c\0\u3855\0\u388e\0\344\0\u018f"+
    "\0\u38c7\0\u018f\0\u3900\0\u3939\0\u018f\0\u3972\0\u39ab\0\344"+
    "\0\u39e4\0\u3a1d\0\344\0\344\0\u3a56\0\u3a8f\0\344\0\344"+
    "\0\344\0\u3ac8\0\u3b01\0\u018f\0\u018f\0\u018f\0\u3b3a\0\u3b73"+
    "\0\u3bac\0\u3be5\0\u3c1e\0\u3c57\0\u3c90\0\u3cc9\0\344\0\u018f"+
    "\0\u3d02\0\u3d3b\0\u3d74\0\u3dad\0\u3de6\0\u018f\0\u018f\0\344"+
    "\0\344\0\u3e1f\0\u3e58\0\u3e91\0\u3eca\0\u3f03\0\u3f3c\0\u3f75"+
    "\0\u3fae\0\u3fe7\0\u4020\0\u4059\0\u4092\0\u40cb\0\u4104\0\u413d"+
    "\0\u4176\0\u41af\0\u41e8\0\u4221\0\u425a\0\u4293\0\u42cc\0\u4305"+
    "\0\u433e\0\u018f\0\u018f\0\u4377\0\344\0\u018f\0\344\0\u018f"+
    "\0\u43b0\0\u43e9\0\u4422\0\u445b\0\u4494\0\u44cd\0\u4506\0\u453f"+
    "\0\u4578\0\344\0\u018f\0\u018f\0\u018f\0\u45b1\0\u45ea\0\u4623"+
    "\0\u465c\0\344\0\u4695\0\u018f\0\u46ce\0\u018f\0\344\0\u018f"+
    "\0\u4707\0\u4740\0\344\0\u018f\0\344\0\u018f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[422];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\4\1\5\1\6\1\5\3\4\1\5\1\4"+
    "\1\7\1\4\3\5\1\10\1\5\1\6\2\4\1\0"+
    "\5\4\1\0\14\4\1\5\1\0\3\4\6\5\2\4"+
    "\2\5\1\4\1\5\1\0\1\11\1\5\1\12\1\6"+
    "\1\5\1\13\1\14\1\11\1\15\1\5\1\16\1\17"+
    "\1\20\1\21\1\22\1\10\1\5\1\6\1\23\1\11"+
    "\1\24\1\25\1\26\3\11\1\27\1\30\1\31\1\11"+
    "\1\32\1\33\1\34\2\11\1\35\1\11\1\36\1\11"+
    "\1\37\1\0\1\11\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\5\1\0\2\5\1\12\1\6\1\5\1\13\2\5"+
    "\1\55\4\5\1\56\1\57\1\10\1\5\1\6\2\5"+
    "\1\60\1\61\1\62\2\5\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\5\1\71\2\5\1\72\3\5\1\73"+
    "\1\0\17\5\1\0\2\4\3\0\3\4\1\0\1\4"+
    "\1\0\1\4\6\0\2\4\1\0\5\4\1\0\14\4"+
    "\2\0\3\4\6\0\2\4\2\0\1\4\106\0\1\74"+
    "\6\0\1\75\51\0\1\6\65\0\2\11\3\0\1\11"+
    "\1\0\1\11\13\0\1\11\1\0\5\11\1\0\14\11"+
    "\2\0\1\11\16\0\3\76\1\77\1\0\1\100\63\76"+
    "\6\0\1\13\1\101\131\0\1\102\70\0\1\103\70\0"+
    "\1\104\35\0\1\105\1\0\1\106\67\0\1\107\111\0"+
    "\1\110\32\0\2\11\3\0\1\11\1\0\1\11\13\0"+
    "\1\11\1\0\5\11\1\0\3\11\1\111\10\11\2\0"+
    "\1\11\17\0\2\11\3\0\1\11\1\0\1\11\13\0"+
    "\1\11\1\0\5\11\1\0\4\11\1\112\2\11\1\113"+
    "\4\11\2\0\1\11\62\0\1\114\1\115\24\0\2\11"+
    "\3\0\1\11\1\0\1\11\13\0\1\11\1\0\5\11"+
    "\1\0\10\11\1\116\1\117\2\11\2\0\1\11\17\0"+
    "\2\11\3\0\1\11\1\0\1\11\13\0\1\11\1\0"+
    "\5\11\1\0\7\11\1\120\4\11\2\0\1\11\17\0"+
    "\2\11\3\0\1\11\1\0\1\11\13\0\1\11\1\0"+
    "\1\11\1\121\3\11\1\0\7\11\1\122\4\11\2\0"+
    "\1\11\17\0\2\11\3\0\1\11\1\0\1\11\13\0"+
    "\1\11\1\0\5\11\1\0\3\11\1\123\10\11\2\0"+
    "\1\11\17\0\2\11\3\0\1\11\1\0\1\11\13\0"+
    "\1\11\1\0\5\11\1\0\4\11\1\124\7\11\2\0"+
    "\1\11\17\0\2\11\3\0\1\11\1\0\1\11\13\0"+
    "\1\11\1\0\5\11\1\0\1\11\1\125\12\11\2\0"+
    "\1\11\17\0\2\11\3\0\1\11\1\0\1\11\13\0"+
    "\1\11\1\0\5\11\1\0\3\11\1\126\10\11\2\0"+
    "\1\11\66\0\1\127\77\0\1\130\71\0\1\131\16\0"+
    "\1\132\1\0\1\132\16\0\1\132\5\0\3\132\4\0"+
    "\1\132\61\0\1\133\63\0\1\134\4\0\1\135\4\0"+
    "\1\136\63\0\1\137\43\0\1\140\20\0\1\141\102\0"+
    "\1\142\1\0\1\143\53\0\1\144\65\0\2\145\75\0"+
    "\2\146\1\147\1\0\1\150\1\151\60\0\1\152\2\0"+
    "\2\153\1\154\33\0\14\155\1\156\1\0\53\155\24\0"+
    "\1\157\44\0\3\76\1\160\1\0\1\100\63\76\6\0"+
    "\1\161\62\0\15\162\1\163\53\162\4\106\1\6\13\106"+
    "\1\10\1\0\47\106\41\0\1\164\30\0\2\11\3\0"+
    "\1\11\1\0\1\11\13\0\1\11\1\0\5\11\1\0"+
    "\5\11\1\165\6\11\2\0\1\11\17\0\2\11\3\0"+
    "\1\11\1\0\1\11\13\0\1\11\1\0\5\11\1\0"+
    "\3\11\1\166\10\11\2\0\1\11\17\0\2\11\3\0"+
    "\1\11\1\0\1\11\13\0\1\11\1\0\5\11\1\167"+
    "\1\170\13\11\2\0\1\11\43\0\2\171\43\0\2\11"+
    "\3\0\1\11\1\0\1\11\13\0\1\11\1\171\1\172"+
    "\4\11\1\0\14\11\2\0\1\11\17\0\2\11\3\0"+
    "\1\11\1\0\1\11\13\0\1\11\1\0\5\11\1\173"+
    "\1\174\13\11\2\0\1\11\17\0\2\11\3\0\1\11"+
    "\1\0\1\11\13\0\1\175\1\0\5\11\1\0\14\11"+
    "\2\0\1\11\17\0\2\11\3\0\1\11\1\0\1\11"+
    "\13\0\1\11\1\176\1\177\4\11\1\0\14\11\2\0"+
    "\1\11\17\0\2\11\3\0\1\11\1\0\1\11\13\0"+
    "\1\11\1\0\4\11\1\200\1\0\14\11\2\0\1\11"+
    "\17\0\2\11\3\0\1\11\1\0\1\11\13\0\1\11"+
    "\1\0\5\11\1\0\6\11\1\201\5\11\2\0\1\11"+
    "\17\0\2\11\3\0\1\11\1\0\1\11\13\0\1\11"+
    "\1\0\5\11\1\0\7\11\1\202\4\11\2\0\1\11"+
    "\17\0\2\11\3\0\1\11\1\0\1\11\13\0\1\11"+
    "\1\0\5\11\1\0\5\11\1\203\6\11\2\0\1\11"+
    "\24\0\1\204\1\0\1\204\16\0\1\204\5\0\3\204"+
    "\4\0\1\204\67\0\1\205\56\0\1\206\11\0\1\207"+
    "\63\0\1\210\71\0\1\211\71\0\1\212\1\213\64\0"+
    "\1\214\66\0\2\173\4\0\1\215\56\0\1\216\101\0"+
    "\1\217\1\220\61\0\1\221\77\0\1\222\65\0\1\223"+
    "\101\0\1\224\63\0\1\225\73\0\1\226\66\0\1\227"+
    "\70\0\1\230\25\0\14\155\1\231\70\155\1\231\1\155"+
    "\1\232\52\155\25\0\2\233\42\0\15\162\1\234\70\162"+
    "\1\234\1\162\1\235\51\162\27\0\1\236\2\0\1\237"+
    "\2\0\1\240\1\241\2\0\1\242\30\0\2\11\3\0"+
    "\1\11\1\0\1\11\13\0\1\11\1\0\1\11\1\243"+
    "\2\11\1\244\1\0\1\11\1\245\1\246\2\11\1\247"+
    "\6\11\2\0\1\11\17\0\2\11\3\0\1\11\1\0"+
    "\1\11\13\0\1\11\1\0\5\11\1\0\1\11\1\250"+
    "\12\11\2\0\1\11\45\0\1\251\42\0\2\11\3\0"+
    "\1\11\1\0\1\11\13\0\1\11\1\0\1\11\1\252"+
    "\3\11\1\0\14\11\2\0\1\11\55\0\1\253\32\0"+
    "\2\11\3\0\1\11\1\0\1\11\13\0\1\11\1\0"+
    "\5\11\1\0\3\11\1\254\10\11\2\0\1\11\63\0"+
    "\1\255\24\0\2\11\3\0\1\11\1\0\1\11\13\0"+
    "\1\11\1\0\5\11\1\0\11\11\1\256\2\11\2\0"+
    "\1\11\17\0\2\11\3\0\1\11\1\0\1\11\13\0"+
    "\1\11\1\0\2\11\1\257\2\11\1\0\14\11\2\0"+
    "\1\11\55\0\1\260\32\0\2\11\3\0\1\11\1\0"+
    "\1\11\13\0\1\11\1\0\5\11\1\0\3\11\1\261"+
    "\10\11\2\0\1\11\17\0\2\11\3\0\1\11\1\0"+
    "\1\11\13\0\1\11\1\0\5\11\1\0\3\11\1\262"+
    "\10\11\2\0\1\11\17\0\2\11\3\0\1\11\1\0"+
    "\1\11\13\0\1\11\1\0\5\11\1\0\3\11\1\263"+
    "\10\11\2\0\1\11\17\0\2\11\3\0\1\11\1\0"+
    "\1\11\13\0\1\11\1\264\1\265\4\11\1\0\14\11"+
    "\2\0\1\11\17\0\2\11\3\0\1\11\1\0\1\11"+
    "\13\0\1\11\1\0\1\11\1\266\2\11\1\267\1\0"+
    "\1\11\1\270\3\11\1\271\6\11\2\0\1\11\24\0"+
    "\1\272\1\0\1\272\16\0\1\272\5\0\3\272\4\0"+
    "\1\272\65\0\1\273\61\0\1\274\100\0\1\275\65\0"+
    "\1\276\71\0\1\277\70\0\1\300\54\0\1\301\112\0"+
    "\1\302\52\0\1\303\64\0\1\304\54\0\1\305\110\0"+
    "\1\306\75\0\1\307\75\0\1\310\71\0\1\311\66\0"+
    "\1\312\66\0\1\313\41\0\1\314\115\0\1\315\60\0"+
    "\2\264\42\0\14\155\1\231\1\155\1\6\52\155\15\162"+
    "\1\234\1\162\1\6\51\162\30\0\1\316\75\0\1\317"+
    "\76\0\1\320\1\0\1\321\53\0\1\322\77\0\1\323"+
    "\32\0\2\11\3\0\1\11\1\0\1\11\13\0\1\11"+
    "\1\0\2\11\1\324\2\11\1\0\14\11\2\0\1\11"+
    "\17\0\2\11\3\0\1\11\1\0\1\11\13\0\1\11"+
    "\1\0\5\11\1\0\1\11\1\325\12\11\2\0\1\11"+
    "\17\0\2\11\3\0\1\11\1\0\1\11\13\0\1\11"+
    "\1\0\5\11\1\0\7\11\1\326\1\11\1\327\2\11"+
    "\2\0\1\11\17\0\2\11\3\0\1\11\1\0\1\11"+
    "\13\0\1\11\1\0\2\11\1\330\2\11\1\0\14\11"+
    "\2\0\1\11\17\0\2\11\3\0\1\11\1\0\1\11"+
    "\13\0\1\11\1\0\5\11\1\0\3\11\1\331\10\11"+
    "\2\0\1\11\17\0\2\11\3\0\1\11\1\0\1\11"+
    "\13\0\1\11\1\0\5\11\1\0\4\11\1\332\7\11"+
    "\2\0\1\11\67\0\2\333\17\0\2\11\3\0\1\11"+
    "\1\0\1\11\13\0\1\11\1\0\5\11\1\0\14\11"+
    "\1\0\1\333\1\334\56\0\1\335\31\0\2\11\3\0"+
    "\1\11\1\0\1\11\13\0\1\11\1\0\5\11\1\0"+
    "\4\11\1\336\7\11\2\0\1\11\55\0\1\337\32\0"+
    "\2\11\3\0\1\11\1\0\1\11\13\0\1\11\1\0"+
    "\5\11\1\0\3\11\1\340\10\11\2\0\1\11\17\0"+
    "\2\11\3\0\1\11\1\0\1\11\13\0\1\11\1\0"+
    "\5\11\1\0\5\11\1\341\6\11\2\0\1\11\55\0"+
    "\1\342\32\0\2\11\3\0\1\11\1\0\1\11\13\0"+
    "\1\11\1\0\5\11\1\0\3\11\1\343\10\11\2\0"+
    "\1\11\17\0\2\11\3\0\1\11\1\0\1\11\13\0"+
    "\1\11\1\0\2\11\1\344\2\11\1\0\14\11\2\0"+
    "\1\11\17\0\2\11\3\0\1\11\1\0\1\11\13\0"+
    "\1\11\1\0\5\11\1\0\1\11\1\345\12\11\2\0"+
    "\1\11\17\0\2\11\3\0\1\11\1\0\1\11\13\0"+
    "\1\11\1\0\5\11\1\0\7\11\1\346\1\11\1\347"+
    "\2\11\2\0\1\11\17\0\2\11\3\0\1\11\1\0"+
    "\1\11\13\0\1\11\1\0\5\11\1\0\3\11\1\350"+
    "\10\11\2\0\1\11\24\0\1\351\1\0\1\351\16\0"+
    "\1\351\5\0\3\351\4\0\1\351\54\0\1\352\73\0"+
    "\2\353\65\0\1\354\66\0\1\355\73\0\1\356\73\0"+
    "\1\357\72\0\1\360\61\0\1\361\77\0\1\362\76\0"+
    "\1\363\52\0\1\364\104\0\1\365\62\0\1\366\63\0"+
    "\1\367\70\0\1\370\105\0\1\371\64\0\1\372\62\0"+
    "\2\373\4\0\1\374\56\0\1\375\101\0\1\376\77\0"+
    "\1\377\22\0\2\11\3\0\1\11\1\0\1\11\13\0"+
    "\1\11\1\0\5\11\1\0\11\11\1\u0100\2\11\2\0"+
    "\1\11\17\0\2\11\3\0\1\11\1\0\1\11\13\0"+
    "\1\11\1\0\5\11\1\0\5\11\1\u0101\6\11\2\0"+
    "\1\11\17\0\2\11\3\0\1\11\1\0\1\11\13\0"+
    "\1\11\1\0\5\11\1\373\1\u0102\4\11\1\u0103\6\11"+
    "\2\0\1\11\17\0\2\11\3\0\1\11\1\0\1\11"+
    "\13\0\1\11\1\0\1\11\1\u0104\3\11\1\0\14\11"+
    "\2\0\1\11\17\0\2\11\3\0\1\11\1\0\1\11"+
    "\13\0\1\11\1\0\5\11\1\0\4\11\1\u0105\7\11"+
    "\2\0\1\11\17\0\2\11\3\0\1\11\1\0\1\11"+
    "\13\0\1\11\1\0\5\11\1\0\13\11\1\u0106\2\0"+
    "\1\11\17\0\2\11\3\0\1\11\1\0\1\11\13\0"+
    "\1\11\1\0\4\11\1\u0107\1\u0108\1\u0109\1\11\1\u010a"+
    "\2\11\1\u010b\6\11\2\0\1\11\54\0\1\u010c\33\0"+
    "\2\11\3\0\1\11\1\0\1\11\13\0\1\11\1\0"+
    "\5\11\1\0\2\11\1\u010d\11\11\2\0\1\11\57\0"+
    "\1\u010e\30\0\2\11\3\0\1\11\1\0\1\11\13\0"+
    "\1\11\1\0\5\11\1\0\5\11\1\u010f\6\11\2\0"+
    "\1\11\53\0\1\u0110\34\0\2\11\3\0\1\11\1\0"+
    "\1\11\13\0\1\11\1\0\5\11\1\0\1\11\1\u0111"+
    "\12\11\2\0\1\11\17\0\2\11\3\0\1\11\1\0"+
    "\1\11\13\0\1\11\1\0\5\11\1\u0112\1\u0113\13\11"+
    "\2\0\1\11\17\0\2\11\3\0\1\11\1\0\1\11"+
    "\13\0\1\11\1\0\5\11\1\0\11\11\1\u0114\2\11"+
    "\2\0\1\11\17\0\2\11\3\0\1\11\1\0\1\11"+
    "\13\0\1\11\1\0\5\11\1\0\5\11\1\u0115\6\11"+
    "\2\0\1\11\17\0\2\11\3\0\1\11\1\0\1\11"+
    "\13\0\1\11\1\0\5\11\1\u0116\1\u0117\4\11\1\u0118"+
    "\6\11\2\0\1\11\17\0\2\11\3\0\1\11\1\0"+
    "\1\11\13\0\1\11\1\0\1\11\1\u0119\3\11\1\0"+
    "\14\11\2\0\1\11\17\0\2\11\3\0\1\11\1\0"+
    "\1\11\13\0\1\11\1\0\5\11\1\0\13\11\1\u011a"+
    "\2\0\1\11\24\0\1\u011b\1\0\1\u011b\16\0\1\u011b"+
    "\5\0\3\u011b\4\0\1\u011b\71\0\1\u011c\62\0\1\u011d"+
    "\61\0\1\u011e\104\0\1\u011f\71\0\1\u0120\56\0\2\u0121"+
    "\64\0\1\u0122\75\0\1\u0123\1\u0124\73\0\1\u0125\53\0"+
    "\1\u0126\111\0\1\u0127\53\0\1\u0128\64\0\1\u0129\54\0"+
    "\1\u012a\121\0\1\u012b\30\0\2\11\3\0\1\11\1\0"+
    "\1\11\13\0\1\11\1\0\5\11\1\0\5\11\1\u012c"+
    "\6\11\2\0\1\11\17\0\2\11\3\0\1\11\1\0"+
    "\1\11\13\0\1\u012d\1\0\5\11\1\0\14\11\2\0"+
    "\1\11\17\0\2\11\3\0\1\11\1\0\1\11\13\0"+
    "\1\11\1\0\5\11\1\0\11\11\1\u012e\2\11\2\0"+
    "\1\11\17\0\2\11\3\0\1\11\1\0\1\11\13\0"+
    "\1\11\1\0\2\11\1\u012f\2\11\1\0\14\11\2\0"+
    "\1\11\17\0\2\11\3\0\1\11\1\0\1\11\13\0"+
    "\1\u0130\1\0\5\11\1\0\14\11\2\0\1\11\17\0"+
    "\2\11\3\0\1\11\1\0\1\u0131\13\0\1\11\1\0"+
    "\5\11\1\0\14\11\2\0\1\11\17\0\2\11\3\0"+
    "\1\11\1\0\1\11\13\0\1\11\1\0\5\11\1\0"+
    "\5\11\1\u0132\6\11\2\0\1\11\17\0\2\11\3\0"+
    "\1\11\1\0\1\11\13\0\1\11\1\0\5\11\1\0"+
    "\1\11\1\u0133\12\11\2\0\1\11\47\0\1\u0134\40\0"+
    "\2\11\3\0\1\11\1\0\1\11\13\0\1\11\1\0"+
    "\3\11\1\u0135\1\11\1\0\14\11\2\0\1\11\17\0"+
    "\2\11\3\0\1\11\1\0\1\11\13\0\1\11\1\0"+
    "\2\11\1\u0136\2\11\1\0\14\11\2\0\1\11\17\0"+
    "\2\11\3\0\1\11\1\0\1\11\13\0\1\11\1\0"+
    "\5\11\1\0\1\11\1\u0137\1\11\1\u0138\10\11\2\0"+
    "\1\11\46\0\1\u0139\41\0\2\11\3\0\1\11\1\0"+
    "\1\11\13\0\1\11\1\0\2\11\1\u013a\2\11\1\0"+
    "\14\11\2\0\1\11\53\0\1\u013b\34\0\2\11\3\0"+
    "\1\11\1\0\1\11\13\0\1\11\1\0\5\11\1\0"+
    "\1\11\1\u013c\12\11\2\0\1\11\45\0\1\u013d\42\0"+
    "\2\11\3\0\1\11\1\0\1\11\13\0\1\11\1\0"+
    "\1\11\1\u013e\3\11\1\0\14\11\2\0\1\11\56\0"+
    "\1\u013f\31\0\2\11\3\0\1\11\1\0\1\11\13\0"+
    "\1\11\1\0\5\11\1\0\4\11\1\u0140\7\11\2\0"+
    "\1\11\17\0\2\11\3\0\1\11\1\0\1\11\13\0"+
    "\1\11\1\0\5\11\1\0\5\11\1\u0141\6\11\2\0"+
    "\1\11\17\0\2\11\3\0\1\11\1\0\1\11\13\0"+
    "\1\u0142\1\0\5\11\1\0\14\11\2\0\1\11\63\0"+
    "\1\u0143\24\0\2\11\3\0\1\11\1\0\1\11\13\0"+
    "\1\11\1\0\5\11\1\0\11\11\1\u0144\2\11\2\0"+
    "\1\11\17\0\2\11\3\0\1\11\1\0\1\11\13\0"+
    "\1\11\1\0\2\11\1\u0145\2\11\1\0\14\11\2\0"+
    "\1\11\17\0\2\11\3\0\1\11\1\0\1\11\13\0"+
    "\1\u0146\1\0\5\11\1\0\14\11\2\0\1\11\17\0"+
    "\2\11\3\0\1\11\1\0\1\11\13\0\1\11\1\0"+
    "\5\11\1\0\5\11\1\u0147\6\11\2\0\1\11\24\0"+
    "\1\u0148\1\0\1\u0148\16\0\1\u0148\5\0\3\u0148\4\0"+
    "\1\u0148\61\0\1\u0149\73\0\1\u014a\60\0\1\u014b\70\0"+
    "\1\u014c\77\0\1\u014d\70\0\1\u014e\61\0\1\u014f\77\0"+
    "\1\u0150\61\0\1\u0151\41\0\2\11\3\0\1\11\1\0"+
    "\1\11\13\0\1\11\1\0\5\11\1\0\3\11\1\u0152"+
    "\10\11\2\0\1\11\17\0\2\11\3\0\1\11\1\0"+
    "\1\11\13\0\1\11\1\0\5\11\1\0\3\11\1\u0153"+
    "\10\11\2\0\1\11\17\0\2\11\3\0\1\11\1\0"+
    "\1\11\13\0\1\11\1\0\2\11\1\u0154\2\11\1\0"+
    "\14\11\2\0\1\11\17\0\2\11\3\0\1\11\1\0"+
    "\1\11\13\0\1\11\1\0\5\11\1\0\3\11\1\u0155"+
    "\10\11\2\0\1\11\17\0\2\11\3\0\1\11\1\0"+
    "\1\11\13\0\1\11\1\0\2\11\1\u0156\2\11\1\0"+
    "\14\11\2\0\1\11\17\0\2\11\3\0\1\11\1\0"+
    "\1\11\13\0\1\11\1\0\5\11\1\0\4\11\1\u0157"+
    "\7\11\2\0\1\11\53\0\1\u0158\34\0\2\11\3\0"+
    "\1\11\1\0\1\11\13\0\1\11\1\0\5\11\1\0"+
    "\1\11\1\u0159\12\11\2\0\1\11\17\0\2\11\3\0"+
    "\1\11\1\0\1\11\13\0\1\11\1\0\5\11\1\0"+
    "\5\11\1\u015a\6\11\2\0\1\11\17\0\2\11\3\0"+
    "\1\11\1\0\1\11\13\0\1\11\1\0\5\11\1\0"+
    "\2\11\1\u015b\11\11\2\0\1\11\17\0\2\11\3\0"+
    "\1\11\1\0\1\11\13\0\1\11\1\0\5\11\1\0"+
    "\13\11\1\u015c\2\0\1\11\57\0\1\u015d\30\0\2\11"+
    "\3\0\1\11\1\0\1\11\13\0\1\11\1\0\5\11"+
    "\1\0\5\11\1\u015e\6\11\2\0\1\11\56\0\1\u015f"+
    "\31\0\2\11\3\0\1\11\1\0\1\11\13\0\1\11"+
    "\1\0\5\11\1\0\4\11\1\u0160\7\11\2\0\1\11"+
    "\51\0\2\u0161\35\0\2\11\3\0\1\11\1\0\1\11"+
    "\13\0\1\11\1\0\5\11\1\u0161\1\u0162\13\11\2\0"+
    "\1\11\17\0\2\11\3\0\1\11\1\0\1\11\13\0"+
    "\1\11\1\0\5\11\1\0\3\11\1\u0163\10\11\2\0"+
    "\1\11\55\0\1\u0164\32\0\2\11\3\0\1\11\1\0"+
    "\1\11\13\0\1\11\1\0\5\11\1\0\3\11\1\u0165"+
    "\10\11\2\0\1\11\17\0\2\11\3\0\1\11\1\0"+
    "\1\11\13\0\1\11\1\0\2\11\1\u0166\2\11\1\0"+
    "\14\11\2\0\1\11\17\0\2\11\3\0\1\11\1\0"+
    "\1\11\13\0\1\11\1\0\2\11\1\u0167\2\11\1\0"+
    "\14\11\2\0\1\11\45\0\1\u0168\76\0\1\u0169\100\0"+
    "\1\u016a\60\0\1\u016b\34\0\2\11\3\0\1\11\1\0"+
    "\1\11\13\0\1\11\1\0\5\11\1\0\11\11\1\u016c"+
    "\2\11\2\0\1\11\17\0\2\11\3\0\1\11\1\0"+
    "\1\11\13\0\1\11\1\0\5\11\1\0\1\11\1\u016d"+
    "\12\11\2\0\1\11\17\0\2\11\3\0\1\11\1\0"+
    "\1\11\13\0\1\11\1\0\5\11\1\0\4\11\1\u016e"+
    "\7\11\2\0\1\11\64\0\1\u016f\23\0\2\11\3\0"+
    "\1\11\1\0\1\11\13\0\1\11\1\0\5\11\1\0"+
    "\12\11\1\u0170\1\11\2\0\1\11\17\0\2\11\3\0"+
    "\1\11\1\0\1\11\13\0\1\11\1\0\2\11\1\u0171"+
    "\2\11\1\0\14\11\2\0\1\11\17\0\2\11\3\0"+
    "\1\11\1\0\1\11\13\0\1\11\1\0\5\11\1\0"+
    "\7\11\1\u0172\4\11\2\0\1\11\17\0\2\11\3\0"+
    "\1\11\1\0\1\11\13\0\1\11\1\0\5\11\1\0"+
    "\5\11\1\u0173\6\11\2\0\1\11\46\0\1\u0174\41\0"+
    "\2\11\3\0\1\11\1\0\1\11\13\0\1\11\1\0"+
    "\2\11\1\u0175\2\11\1\0\14\11\2\0\1\11\46\0"+
    "\1\u0176\41\0\2\11\3\0\1\11\1\0\1\11\13\0"+
    "\1\11\1\0\2\11\1\u0177\2\11\1\0\14\11\2\0"+
    "\1\11\17\0\2\11\3\0\1\11\1\0\1\11\13\0"+
    "\1\11\1\0\5\11\1\0\11\11\1\u0178\2\11\2\0"+
    "\1\11\53\0\1\u0179\34\0\2\11\3\0\1\11\1\0"+
    "\1\11\13\0\1\11\1\0\5\11\1\0\1\11\1\u017a"+
    "\12\11\2\0\1\11\51\0\2\u017b\63\0\1\u017c\42\0"+
    "\2\11\3\0\1\11\1\0\1\11\13\0\1\11\1\0"+
    "\5\11\1\u017b\1\u017d\13\11\2\0\1\11\17\0\2\11"+
    "\3\0\1\11\1\0\1\11\13\0\1\11\1\0\1\11"+
    "\1\u017e\3\11\1\0\14\11\2\0\1\11\17\0\2\11"+
    "\3\0\1\11\1\0\1\11\13\0\1\11\1\0\5\11"+
    "\1\0\1\11\1\u017f\12\11\2\0\1\11\55\0\1\u0180"+
    "\32\0\2\11\3\0\1\11\1\0\1\11\13\0\1\11"+
    "\1\0\5\11\1\0\3\11\1\u0181\10\11\2\0\1\11"+
    "\17\0\2\11\3\0\1\11\1\0\1\11\13\0\1\11"+
    "\1\0\5\11\1\0\11\11\1\u0182\2\11\2\0\1\11"+
    "\17\0\2\11\3\0\1\11\1\0\1\11\13\0\1\11"+
    "\1\0\5\11\1\0\1\11\1\u0183\12\11\2\0\1\11"+
    "\17\0\2\11\3\0\1\11\1\0\1\11\13\0\1\11"+
    "\1\0\2\11\1\u0184\2\11\1\0\14\11\2\0\1\11"+
    "\63\0\1\u0185\24\0\2\11\3\0\1\11\1\0\1\11"+
    "\13\0\1\11\1\0\5\11\1\0\11\11\1\u0186\2\11"+
    "\2\0\1\11\63\0\1\u0187\24\0\2\11\3\0\1\11"+
    "\1\0\1\11\13\0\1\11\1\0\5\11\1\0\11\11"+
    "\1\u0188\2\11\2\0\1\11\17\0\2\11\3\0\1\11"+
    "\1\0\1\11\13\0\1\11\1\0\5\11\1\u0189\1\u018a"+
    "\13\11\2\0\1\11\45\0\1\u018b\42\0\2\11\3\0"+
    "\1\11\1\0\1\11\13\0\1\11\1\0\1\11\1\u018c"+
    "\3\11\1\0\14\11\2\0\1\11\26\0\1\u018d\113\0"+
    "\2\u018e\35\0\2\11\3\0\1\11\1\0\1\u018f\13\0"+
    "\1\11\1\0\5\11\1\0\14\11\2\0\1\11\17\0"+
    "\2\11\3\0\1\11\1\0\1\11\13\0\1\11\1\0"+
    "\5\11\1\u018e\1\u0190\13\11\2\0\1\11\17\0\2\11"+
    "\3\0\1\11\1\0\1\11\13\0\1\11\1\0\5\11"+
    "\1\0\10\11\1\u0191\3\11\2\0\1\11\63\0\1\u0192"+
    "\24\0\2\11\3\0\1\11\1\0\1\11\13\0\1\11"+
    "\1\0\5\11\1\0\11\11\1\u0193\2\11\2\0\1\11"+
    "\17\0\2\11\3\0\1\11\1\0\1\11\13\0\1\11"+
    "\1\0\5\11\1\0\1\11\1\u0194\1\u0195\11\11\2\0"+
    "\1\11\26\0\1\u0196\61\0\2\11\3\0\1\11\1\0"+
    "\1\u0197\13\0\1\11\1\0\5\11\1\0\14\11\2\0"+
    "\1\11\51\0\2\u0198\35\0\2\11\3\0\1\11\1\0"+
    "\1\11\13\0\1\11\1\0\5\11\1\u0198\1\u0199\13\11"+
    "\2\0\1\11\46\0\1\u019a\70\0\1\u019b\41\0\2\11"+
    "\3\0\1\11\1\0\1\11\13\0\1\11\1\0\2\11"+
    "\1\u019c\2\11\1\0\14\11\2\0\1\11\17\0\2\11"+
    "\3\0\1\11\1\0\1\11\13\0\1\11\1\0\2\11"+
    "\1\u019d\2\11\1\0\14\11\2\0\1\11\17\0\2\11"+
    "\3\0\1\11\1\0\1\11\13\0\1\11\1\0\2\11"+
    "\1\u019e\2\11\1\0\14\11\2\0\1\11\46\0\1\u019f"+
    "\41\0\2\11\3\0\1\11\1\0\1\11\13\0\1\11"+
    "\1\0\2\11\1\u01a0\2\11\1\0\14\11\2\0\1\11"+
    "\46\0\1\u01a1\41\0\2\11\3\0\1\11\1\0\1\11"+
    "\13\0\1\11\1\0\2\11\1\u01a2\2\11\1\0\14\11"+
    "\2\0\1\11\63\0\1\u01a3\24\0\2\11\3\0\1\11"+
    "\1\0\1\11\13\0\1\11\1\0\5\11\1\0\11\11"+
    "\1\u01a4\2\11\2\0\1\11\63\0\1\u01a5\24\0\2\11"+
    "\3\0\1\11\1\0\1\11\13\0\1\11\1\0\5\11"+
    "\1\0\11\11\1\u01a6\2\11\2\0\1\11\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18297];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\1\2\11\5\1\2\11\2\1\1\11\3\1"+
    "\1\0\2\1\1\0\10\1\4\11\2\1\7\11\1\1"+
    "\2\11\1\0\3\1\1\0\6\1\1\11\3\0\1\11"+
    "\2\0\3\11\1\0\1\1\1\11\1\0\3\1\1\11"+
    "\1\0\11\1\3\11\6\0\1\11\17\0\2\1\3\0"+
    "\2\1\1\0\1\1\1\0\1\1\1\0\2\1\1\0"+
    "\5\1\26\0\1\1\1\11\1\0\1\1\5\0\6\1"+
    "\1\0\1\1\1\0\1\1\1\0\2\1\1\11\3\1"+
    "\1\0\5\1\7\0\1\11\1\0\1\11\7\0\1\11"+
    "\1\0\1\11\6\0\7\1\1\0\1\1\1\0\1\1"+
    "\1\0\2\1\1\11\6\1\1\0\2\11\5\0\3\11"+
    "\2\0\1\11\1\1\1\11\7\0\10\1\1\0\3\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\3\1"+
    "\1\0\4\1\3\0\1\11\1\0\1\11\1\0\3\11"+
    "\1\0\1\11\1\0\1\11\3\0\10\1\1\0\4\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\11\3\1"+
    "\1\0\4\1\1\11\1\1\1\0\2\11\2\0\3\11"+
    "\6\1\1\0\4\1\1\0\1\1\1\11\1\1\1\0"+
    "\2\1\1\0\3\1\2\11\2\0\3\1\1\0\4\1"+
    "\1\0\1\1\1\0\2\1\1\0\1\1\2\0\3\1"+
    "\1\0\4\1\1\11\1\1\1\11\1\1\1\0\1\1"+
    "\1\0\1\1\2\0\3\1\1\11\3\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\0\3\1\1\11\1\1\1\0"+
    "\1\1\1\11\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[422];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public ArrayList<Esemanticos> ErroresLexicos = new ArrayList<Esemanticos> ();
    
    //Generar un java_cup.symbol para guardar el tipo de token encontrado
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }
    
    //Generar un symbol para el tipo de token encontrado junto con su valor
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Parser(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return symbol(sym.paragraph, yytext());
            }
          case 88: break;
          case 2: 
            { System.err.println("Este es un error lexico: "+yytext()+", en la linea: "+yyline+", en la columna: "+yychar);
                Esemanticos e = new Esemanticos(String.valueOf(yytext()),"Lexico",(int)yyline+1,(int)yychar, "Caracter Invalido");
                ErroresLexicos.add(e);
            }
          case 89: break;
          case 3: 
            { /* Ignore */
            }
          case 90: break;
          case 4: 
            { yybegin(TAG); return symbol(sym.open, yytext());
            }
          case 91: break;
          case 5: 
            { return symbol(sym.identificador, yytext());
            }
          case 92: break;
          case 6: 
            { return symbol(sym.ddq, yytext());
            }
          case 93: break;
          case 7: 
            { return symbol(sym.numero, yytext());
            }
          case 94: break;
          case 8: 
            { return symbol(sym.dot, yytext());
            }
          case 95: break;
          case 9: 
            { return symbol(sym.hashtag, yytext());
            }
          case 96: break;
          case 10: 
            { return symbol(sym.menor, yytext());
            }
          case 97: break;
          case 11: 
            { return symbol(sym.not, yytext());
            }
          case 98: break;
          case 12: 
            { return symbol(sym.asterisk, yytext());
            }
          case 99: break;
          case 13: 
            { return symbol(sym.mayor, yytext());
            }
          case 100: break;
          case 14: 
            { return symbol(sym.div, yytext());
            }
          case 101: break;
          case 15: 
            { return symbol(sym.equal, yytext());
            }
          case 102: break;
          case 16: 
            { return symbol(sym.semicolon, yytext());
            }
          case 103: break;
          case 17: 
            { return symbol(sym.dolar, yytext());
            }
          case 104: break;
          case 18: 
            { return symbol(sym.plus, yytext());
            }
          case 105: break;
          case 19: 
            { return symbol(sym.hypen, yytext());
            }
          case 106: break;
          case 20: 
            { return symbol(sym.ollv, yytext());
            }
          case 107: break;
          case 21: 
            { return symbol(sym.cllv, yytext());
            }
          case 108: break;
          case 22: 
            { return symbol(sym.opar, yytext());
            }
          case 109: break;
          case 23: 
            { return symbol(sym.cpar, yytext());
            }
          case 110: break;
          case 24: 
            { return symbol(sym.ocorch, yytext());
            }
          case 111: break;
          case 25: 
            { return symbol(sym.ccorch, yytext());
            }
          case 112: break;
          case 26: 
            { return symbol(sym.comma, yytext());
            }
          case 113: break;
          case 27: 
            { yybegin(YYINITIAL); return symbol(sym.close, yytext());
            }
          case 114: break;
          case 28: 
            { return symbol(sym.cadena, yytext());
            }
          case 115: break;
          case 29: 
            { return symbol(sym.menorque, yytext());
            }
          case 116: break;
          case 30: 
            { return symbol(sym.diferente, yytext());
            }
          case 117: break;
          case 31: 
            { return symbol(sym.mayorque, yytext());
            }
          case 118: break;
          case 32: 
            { yybegin(YYINITIAL); return symbol(sym.endHS, yytext());
            }
          case 119: break;
          case 33: 
            { return symbol(sym.if_, yytext());
            }
          case 120: break;
          case 34: 
            { return symbol(sym.igualque, yytext());
            }
          case 121: break;
          case 35: 
            { return symbol(sym.and, yytext());
            }
          case 122: break;
          case 36: 
            { return symbol(sym.or, yytext());
            }
          case 123: break;
          case 37: 
            { return symbol(sym.id, yytext());
            }
          case 124: break;
          case 38: 
            { yybegin(HSC); return symbol(sym.beginHS, yytext());
            }
          case 125: break;
          case 39: 
            { return symbol(sym.echo, yytext());
            }
          case 126: break;
          case 40: 
            { return symbol(sym.else_, yytext());
            }
          case 127: break;
          case 41: 
            { return symbol(sym.true_, yytext());
            }
          case 128: break;
          case 42: 
            { return symbol(sym.path, yytext());
            }
          case 129: break;
          case 43: 
            { return symbol(sym.alto, yytext());
            }
          case 130: break;
          case 44: 
            { return symbol(sym.fila, yytext());
            }
          case 131: break;
          case 45: 
            { return symbol(sym.false_, yytext());
            }
          case 132: break;
          case 46: 
            { return symbol(sym.salto, yytext());
            }
          case 133: break;
          case 47: 
            { return symbol(sym.compi, yytext());
            }
          case 134: break;
          case 48: 
            { return symbol(sym.ancho, yytext());
            }
          case 135: break;
          case 49: 
            { return symbol(sym.borde, yytext());
            }
          case 136: break;
          case 50: 
            { return symbol(sym.boton, yytext());
            }
          case 137: break;
          case 51: 
            { return symbol(sym.tabla, yytext());
            }
          case 138: break;
          case 52: 
            { return symbol(sym.texto, yytext());
            }
          case 139: break;
          case 53: 
            { return symbol(sym.fondo, yytext());
            }
          case 140: break;
          case 54: 
            { return symbol(sym.cuerpo, yytext());
            }
          case 141: break;
          case 55: 
            { return symbol(sym.imagen, yytext());
            }
          case 142: break;
          case 56: 
            { return symbol(sym.titulo, yytext());
            }
          case 143: break;
          case 57: 
            { return symbol(sym.textoa, yytext());
            }
          case 144: break;
          case 58: 
            { return symbol(sym.textob, yytext());
            }
          case 145: break;
          case 59: 
            { return symbol(sym.setpath, yytext());
            }
          case 146: break;
          case 60: 
            { return symbol(sym.setalto, yytext());
            }
          case 147: break;
          case 61: 
            { return symbol(sym.repetir, yytext());
            }
          case 148: break;
          case 62: 
            { return symbol(sym.getpath, yytext());
            }
          case 149: break;
          case 63: 
            { return symbol(sym.getalto, yytext());
            }
          case 150: break;
          case 64: 
            { return symbol(sym.rgb, yytext());
            }
          case 151: break;
          case 65: 
            { return symbol(sym.columna, yytext());
            }
          case 152: break;
          case 66: 
            { return symbol(sym.parrafo, yytext());
            }
          case 153: break;
          case 67: 
            { return symbol(sym.espacio, yytext());
            }
          case 154: break;
          case 68: 
            { return symbol(sym.setancho, yytext());
            }
          case 155: break;
          case 69: 
            { return symbol(sym.setborde, yytext());
            }
          case 156: break;
          case 70: 
            { return symbol(sym.settexto, yytext());
            }
          case 157: break;
          case 71: 
            { return symbol(sym.insertar, yytext());
            }
          case 158: break;
          case 72: 
            { return symbol(sym.getancho, yytext());
            }
          case 159: break;
          case 73: 
            { return symbol(sym.gettexto, yytext());
            }
          case 160: break;
          case 74: 
            { return symbol(sym.columnac, yytext());
            }
          case 161: break;
          case 75: 
            { return symbol(sym.cabecera, yytext());
            }
          case 162: break;
          case 76: 
            { return symbol(sym.crearboton, yytext());
            }
          case 163: break;
          case 77: 
            { return symbol(sym.creartabla, yytext());
            }
          case 164: break;
          case 78: 
            { return symbol(sym.clickboton, yytext());
            }
          case 165: break;
          case 79: 
            { return symbol(sym.alineacion, yytext());
            }
          case 166: break;
          case 80: 
            { return symbol(sym.crearimagen, yytext());
            }
          case 167: break;
          case 81: 
            { return symbol(sym.creartextoa, yytext());
            }
          case 168: break;
          case 82: 
            { return symbol(sym.creartextob, yytext());
            }
          case 169: break;
          case 83: 
            { return symbol(sym.setcontenido, yytext());
            }
          case 170: break;
          case 84: 
            { return symbol(sym.crearparrafo, yytext());
            }
          case 171: break;
          case 85: 
            { return symbol(sym.getcontenido, yytext());
            }
          case 172: break;
          case 86: 
            { return symbol(sym.setalineacion, yytext());
            }
          case 173: break;
          case 87: 
            { return symbol(sym.getalineacion, yytext());
            }
          case 174: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
